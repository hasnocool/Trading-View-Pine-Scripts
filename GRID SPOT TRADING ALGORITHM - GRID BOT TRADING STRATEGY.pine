Script Name: GRID SPOT TRADING ALGORITHM - GRID BOT TRADING STRATEGY
Author: thequantscience
Description: GRID SPOT TRADING ALGORITHM : LONG ONLY STRATEGY OPEN SOURCE 

This is a long only strategy for spot assets.

 HOW IT WORKS 
Grid trading is a trading strategy where an investor creates a so-called "price grid". The basic idea of the strategy is to repeatedly buy at the pre-specified price and then wait for the price to rise above that level and then sell the...
PineScript code:

Pine Script™ strategy
GRID SPOT TRADING ALGORITHM - GRID BOT TRADING STRATEGY
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © thequantscience
//  ██████╗ ██████╗ ██╗██████╗     ███████╗██████╗  ██████╗ ████████╗     █████╗ ██╗      ██████╗  ██████╗ ██████╗ ██╗████████╗██╗  ██╗███╗   ███╗
//  ██╔════╝ ██╔══██╗██║██╔══██╗    ██╔════╝██╔══██╗██╔═══██╗╚══██╔══╝    ██╔══██╗██║     ██╔════╝ ██╔═══██╗██╔══██╗██║╚══██╔══╝██║  ██║████╗ ████║
//  ██║  ███╗██████╔╝██║██║  ██║    ███████╗██████╔╝██║   ██║   ██║       ███████║██║     ██║  ███╗██║   ██║██████╔╝██║   ██║   ███████║██╔████╔██║
//  ██║   ██║██╔══██╗██║██║  ██║    ╚════██║██╔═══╝ ██║   ██║   ██║       ██╔══██║██║     ██║   ██║██║   ██║██╔══██╗██║   ██║   ██╔══██║██║╚██╔╝██║
//  ╚██████╔╝██║  ██║██║██████╔╝    ███████║██║     ╚██████╔╝   ██║       ██║  ██║███████╗╚██████╔╝╚██████╔╝██║  ██║██║   ██║   ██║  ██║██║ ╚═╝ ██║
//   ╚═════╝ ╚═╝  ╚═╝╚═╝╚═════╝     ╚══════╝╚═╝      ╚═════╝    ╚═╝       ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝     ╚═╝
                                                                                                                                               
initial_grid_amount = 10000
//@version=5
strategy(
     title = 'Grid Spot Trading Algorithm - The Quant Science™', 
     overlay = true,
     calc_on_every_tick = true,
     initial_capital = initial_grid_amount, 
     commission_type = strategy.commission.percent, 
     commission_value = 0.10, 
     pyramiding = 20,
     default_qty_type = strategy.percent_of_equity,
     close_entries_rule = 'ANY'
     )
/////////////////////////////// Design by The Quant Science ™  ////////////////////////////////////
//----------------------------------------------------------------------------------------------------------
//------------------------------------- Grid Spot Trading Algorithm ----------------------------------------
//----------------------------------------------------------------------------------------------------------
// HOW IT WORKS: 3Commas Grid Bot Strategy for spot asset, based on multiple dinamic trigger start condition.
//----------------------------------------------------------------------------------------------------------
// SET UP: Select the high price, select the low price, select the trigger entry condition. 
// Extra feature: adjust date range.
//----------------------------------------------------------------------------------------------------------
// Upgrade 2.00 (2022.30.07) 
// Upgrade 3.00 (2022.11.11)
// Upgrade 4.00 (2022.20.01)
/////////////////////////////// ALGORITHM BACKTEST SOURCE CODE ////////////////////////////////////
startDate = input.int(title="Start date: ",
     defval=1, minval=1, maxval=31, 
          group = '############# BACKTESTING PERIOD #############')
startMonth = input.int(title="Start month: ",
     defval=1, minval=1, maxval=12, 
          group = '############# BACKTESTING PERIOD #############')
startYear = input.int(title="Start year: ",
     defval=2022, minval=1800, maxval=2100, 
          group = '############# BACKTESTING PERIOD #############')
endDate = input.int(title="End date: ",
     defval=31, minval=1, maxval=31, 
          group = '############# BACKTESTING PERIOD #############')
endMonth = input.int(title="End month: ",
     defval=12, minval=1, maxval=12, 
          group = '############# BACKTESTING PERIOD #############')
endYear = input.int(title="End year: ",
     defval=2022, minval=1800, maxval=2100, 
          group = '############# BACKTESTING PERIOD #############')
inDateRange = (time >= timestamp(syminfo.timezone, startYear,
         startMonth, startDate, 0, 0)) and
     (time < timestamp(syminfo.timezone, endYear, endMonth, endDate, 0, 0))
// #########################################################################################################
high_price = input.price(
      defval = 0.00, 
      title = 'High price: ',
      group = " ################# HIGH PRICE GRID ################ ", 
      confirm = true,
      tooltip = "Top grid price."
      )
low_price = input.price(
      defval = 0.00, 
      title = 'Low price: ',
      group = " ################# LOW PRICE GRID ################# ", 
      confirm = true,
      tooltip = "Bottom grid price."
      )
ten_grid = input.bool(
     defval = false,
     title = "Grid: 10",
     group = " ############## GRID CONFIGURATION ############## ",
     tooltip = "Create a 10 levels grid.",
     confirm = true
     )
tewnty_grid = input.bool(
     defval = false,
     title = "Grid: 20",
     group = " ############## GRID CONFIGURATION ############## ",
     tooltip = "Create a 20 levels grid.",
     confirm = true
     )
grid_destroyer = input.bool(
     defval = false,
     title = "Active grid destroyer",
     group = " ############ STOP LOSS CONFIGURATION ############ ",
     tooltip = "Destroy the grid when price crossunder the stop loss level.",
     confirm = false
     )
stop_level = input.price(
      defval = 0.00, 
      title = 'Destroy level: ',
      group = " ############ STOP LOSS CONFIGURATION ############ ", 
      confirm = false,
      tooltip = "Stop loss price level. Always set this value below the low price grid."
      )
// #########################################################################################################
grid_range = high_price - low_price
var float grid_1 = 0
var float grid_2 = 0
var float grid_3 = 0
var float grid_4 = 0
var float grid_5 = 0
var float grid_6 = 0
var float grid_7 = 0
var float grid_8 = 0
var float grid_9 = 0
var float grid_10 = 0
var float grid_11 = 0
var float grid_12 = 0
var float grid_13 = 0
var float grid_14 = 0
var float grid_15 = 0
var float grid_16 = 0
var float grid_17 = 0
var float grid_18 = 0
var float grid_19 = 0
var float grid_20 = 0
var float factor = 0 
if ten_grid == true
    factor := grid_range / 9
    grid_1 := (high_price) 
    grid_2 := (high_price - (factor * 1)) 
    grid_3 := (high_price - (factor * 2)) 
    grid_4 := (high_price - (factor * 3)) 
    grid_5 := (high_price - (factor * 4)) 
    grid_6 := (high_price - (factor * 5)) 
    grid_7 := (high_price - (factor * 6)) 
    grid_8 := (high_price - (factor * 7)) 
    grid_9 := (high_price - (factor * 8))
    grid_10 := (low_price)
    
if tewnty_grid == true
    factor := grid_range / 19
    grid_1 := (high_price) 
    grid_2 := (high_price - (factor * 1)) 
    grid_3 := (high_price - (factor * 2)) 
    grid_4 := (high_price - (factor * 3)) 
    grid_5 := (high_price - (factor * 4)) 
    grid_6 := (high_price - (factor * 5)) 
    grid_7 := (high_price - (factor * 6)) 
    grid_8 := (high_price - (factor * 7)) 
    grid_9 := (high_price - (factor * 8)) 
    grid_10 := (high_price - (factor * 9)) 
    grid_11 := (high_price - (factor * 10)) 
    grid_12 := (high_price - (factor * 11)) 
    grid_13 := (high_price - (factor * 12)) 
    grid_14 := (high_price - (factor * 13)) 
    grid_15 := (high_price - (factor * 14)) 
    grid_16 := (high_price - (factor * 15)) 
    grid_17 := (high_price - (factor * 16)) 
    grid_18 := (high_price - (factor * 17)) 
    grid_19 := (high_price - (factor * 18))
    grid_20 := (low_price)
// #########################################################################################################
var tb = table.new(position.bottom_left, 1, 1, bgcolor = color.new(color.blue, 90))
if barstate.isfirst
    table.cell(tb, 0, 0, 
      'Developed by The Quant Science™'
      ,text_size = size.normal
      ,text_color = color.new(color.blue, 20))
// #########################################################################################################
long_1 = ta.crossunder(low, grid_1) and inDateRange
long_2 = ta.crossunder(low, grid_2) and inDateRange
long_3 = ta.crossunder(low, grid_3) and inDateRange
long_4 = ta.crossunder(low, grid_4) and inDateRange
long_5 = ta.crossunder(low, grid_5) and inDateRange
long_6 = ta.crossunder(low, grid_6) and inDateRange
long_7 = ta.crossunder(low, grid_7) and inDateRange
long_8 = ta.crossunder(low, grid_8) and inDateRange
long_9 = ta.crossunder(low, grid_9) and inDateRange
long_10 = ta.crossunder(low, grid_10) and inDateRange
long_11 = ta.crossunder(low, grid_11) and inDateRange
long_12 = ta.crossunder(low, grid_12) and inDateRange
long_13 = ta.crossunder(low, grid_13) and inDateRange
long_14 = ta.crossunder(low, grid_14) and inDateRange
long_15 = ta.crossunder(low, grid_15) and inDateRange
long_16 = ta.crossunder(low, grid_16) and inDateRange
long_17 = ta.crossunder(low, grid_17) and inDateRange
long_18 = ta.crossunder(low, grid_18) and inDateRange
long_19 = ta.crossunder(low, grid_19) and inDateRange
last_long = ta.crossunder(low, low_price) and inDateRange
// #########################################################################################################
// Change the default trigger start condition with your personal and custom start condition
// Code the condition inside the local function below. 
// Define a indicator condition or another specific condition .....
// Example with RSI calculating on close bar, and last 14 previous bar data 
rsi = ta.rsi(close, 14)
// Create a local function for the trigger start condition 
TriggerGrid() =>
    trigger_rsi = ta.crossover(rsi, 75) and inDateRange // Define the specific condition 
    trigger_rsi 
trigger_entry = TriggerGrid() // Assign the condition to the "trigger_entry" variable
// ANOTHER EASY EXAMPLE WITH OVERSOLD RSI CONDITION ....
//TriggerGrid() =>
    
    //trigger_rsi = ta.crossunder(rsi, 35) // Crossunder the RSI 35 value...
    
    //trigger_rsi 
//trigger_entry = TriggerGrid() // Assign the condition to the "trigger_entry" variable
// #########################################################################################################
var float lots = 0 
if ten_grid == true and inDateRange
    lots := (initial_grid_amount / close) / 10
    if trigger_entry and strategy.opentrades == 0 
        strategy.order(id = "O #1", direction = strategy.long, qty = lots, limit = grid_6)
        strategy.order(id = "O #2", direction = strategy.long, qty = lots, limit = grid_7)
        strategy.order(id = "O #3", direction = strategy.long, qty = lots, limit = grid_8)
        strategy.order(id = "O #4", direction = strategy.long, qty = lots, limit = grid_9)
        strategy.order(id = "O #5", direction = strategy.long, qty = lots, limit = grid_10)
if close < grid_6 and ten_grid == true
    strategy.cancel("O #1")
if close < grid_7 and ten_grid == true
    strategy.cancel("O #2")
if close < grid_8 and ten_grid == true
    strategy.cancel("O #3")
if close < grid_9 and ten_grid == true
    strategy.cancel("O #4")
if close < grid_10 and ten_grid == true
    strategy.cancel("O #5")
if grid_5 and ten_grid == true
    strategy.exit(
           id = "C #1", 
           from_entry = "O #1",
           qty = 100, 
           limit = grid_5
           )
if grid_4 and ten_grid == true
    strategy.exit(
           id = "C #2", 
           from_entry = "O #2",
           qty = 100, 
           limit = grid_4
           )
if grid_3 and ten_grid == true
    strategy.exit(
           id = "C #3", 
           from_entry = "O #3",
           qty = 100, 
           limit = grid_3
           )
if grid_2 and ten_grid == true
    strategy.exit(
           id = "C #4", 
           from_entry = "O #4",
           qty = 100, 
           limit = grid_2
           )
if grid_1
    strategy.exit(
           id = "C #5", 
           from_entry = "O #5",
           qty = 100, 
           limit = grid_1
           )
if ten_grid == true and grid_destroyer == true 
    if ta.crossunder(low, stop_level)
        strategy.close_all(" Grid Destroyed !!! ") 
if tewnty_grid == true and inDateRange
    lots := (initial_grid_amount / close) / 20
    if trigger_entry and strategy.opentrades == 0 
        strategy.order(id = "O #1", direction = strategy.long, qty = lots, limit = grid_11)
        strategy.order(id = "O #2", direction = strategy.long, qty = lots, limit = grid_12)
        strategy.order(id = "O #3", direction = strategy.long, qty = lots, limit = grid_13)
        strategy.order(id = "O #4", direction = strategy.long, qty = lots, limit = grid_14)
        strategy.order(id = "O #5", direction = strategy.long, qty = lots, limit = grid_15)
        strategy.order(id = "O #6", direction = strategy.long, qty = lots, limit = grid_16)
        strategy.order(id = "O #7", direction = strategy.long, qty = lots, limit = grid_17)
        strategy.order(id = "O #8", direction = strategy.long, qty = lots, limit = grid_18)
        strategy.order(id = "O #9", direction = strategy.long, qty = lots, limit = grid_19)
        strategy.order(id = "O #10", direction = strategy.long, qty = lots, limit = grid_20)
if close < grid_11 and tewnty_grid == true
    strategy.cancel("O #1")
if close < grid_12 and tewnty_grid == true
    strategy.cancel("O #2")
if close < grid_13 and tewnty_grid == true
    strategy.cancel("O #3")
if close < grid_14 and tewnty_grid == true
    strategy.cancel("O #4")
if close < grid_15 and tewnty_grid == true
    strategy.cancel("O #5")
if close < grid_16 and tewnty_grid == true
    strategy.cancel("O #6")
if close < grid_17 and tewnty_grid == true
    strategy.cancel("O #7")
if close < grid_18 and tewnty_grid == true
    strategy.cancel("O #8")
if close < grid_19 and tewnty_grid == true
    strategy.cancel("O #9")
if close < grid_20 and tewnty_grid == true
    strategy.cancel("O #10")
if grid_10 and tewnty_grid == true
    strategy.exit(
           id = "C #1", 
           from_entry = "O #1",
           qty = 100, 
           limit = grid_10
           )
if grid_9 and tewnty_grid == true
    strategy.exit(
           id = "C #2", 
           from_entry = "O #2",
           qty = 100, 
           limit = grid_9
           )
if grid_8 and tewnty_grid == true
    strategy.exit(
           id = "C #3", 
           from_entry = "O #3",
           qty = 100, 
           limit = grid_8
           )
if grid_7 and tewnty_grid == true
    strategy.exit(
           id = "C #4", 
           from_entry = "O #4",
           qty = 100, 
           limit = grid_7
           )
if grid_6 and tewnty_grid == true
    strategy.exit(
           id = "C #5", 
           from_entry = "O #5",
           qty = 100, 
           limit = grid_6
           )
if grid_5 and tewnty_grid == true
    strategy.exit(
           id = "C #6", 
           from_entry = "O #6",
           qty = 100, 
           limit = grid_5
           )
if grid_4 and tewnty_grid == true
    strategy.exit(
           id = "C #7", 
           from_entry = "O #7",
           qty = 100, 
           limit = grid_4
           )
if grid_3 and tewnty_grid == true
    strategy.exit(
           id = "C #8", 
           from_entry = "O #8",
           qty = 100, 
           limit = grid_3
           )
if grid_2 and tewnty_grid == true
    strategy.exit(
           id = "C #9", 
           from_entry = "O #9",
           qty = 100, 
           limit = grid_2
           )
if grid_1 and tewnty_grid == true
    strategy.exit(
           id = "C #10", 
           from_entry = "O #10",
           qty = 100, 
           limit = grid_1
           )
if tewnty_grid == true and grid_destroyer == true 
    if ta.crossunder(low, stop_level)
        strategy.close_all(" Grid Destroyed !!! ") 
// #########################################################################################################
var float new_ten_grid_1 = 0 
var float new_ten_grid_2 = 0 
var float new_ten_grid_3 = 0 
var float new_ten_grid_4 = 0 
var float new_ten_grid_5 = 0 
var float new_ten_grid_6 = 0 
var float new_ten_grid_7 = 0 
var float new_ten_grid_8 = 0 
var float new_ten_grid_9 = 0 
var float new_ten_grid_10 = 0 
var float grid_destroyed_ten = 0 
if ten_grid == true
    new_ten_grid_1 := grid_1
    new_ten_grid_2 := grid_2
    new_ten_grid_3 := grid_3
    new_ten_grid_4 := grid_4
    new_ten_grid_5 := grid_5
    new_ten_grid_6 := grid_6
    new_ten_grid_7 := grid_7
    new_ten_grid_8 := grid_8
    new_ten_grid_9 := grid_9
    new_ten_grid_10 := grid_10
    if grid_destroyer == true 
        grid_destroyed_ten := stop_level
else if ten_grid == false
    new_ten_grid_1 := na
    new_ten_grid_2 := na
    new_ten_grid_3 := na
    new_ten_grid_4 := na
    new_ten_grid_5 := na
    new_ten_grid_6 := na
    new_ten_grid_7 := na
    new_ten_grid_8 := na
    new_ten_grid_9 := na
    new_ten_grid_10 := na
    if grid_destroyer == false 
        grid_destroyed_ten := na
fill(plot(new_ten_grid_1, color = color.new(color.green, 90)), 
     plot(new_ten_grid_2, color = color.new(color.green, 90)), 
         color = color.new(color.green, 90))
fill(plot(new_ten_grid_2, color = color.new(color.green, 85)), 
     plot(new_ten_grid_3, color = color.new(color.green, 85)), 
         color = color.new(color.green, 85))
fill(plot(new_ten_grid_3, color = color.new(color.green, 80)), 
     plot(new_ten_grid_4, color = color.new(color.green, 80)), 
         color = color.new(color.green, 80))
fill(plot(new_ten_grid_4, color = color.new(color.green, 70)), 
     plot(new_ten_grid_5, color = color.new(color.green, 70)), 
         color = color.new(color.green, 70))
fill(plot(new_ten_grid_5, color = color.new(color.green, 60)), 
     plot(new_ten_grid_6, color = color.new(color.green, 60)), 
         color = color.new(color.green, 60))
fill(plot(new_ten_grid_6, color = color.new(color.red, 60)), 
     plot(new_ten_grid_7, color = color.new(color.red, 60)), 
         color = color.new(color.red, 60))
fill(plot(new_ten_grid_7, color = color.new(color.red, 70)), 
     plot(new_ten_grid_8, color = color.new(color.red, 70)), 
         color = color.new(color.red, 70))
fill(plot(new_ten_grid_8, color = color.new(color.red, 80)), 
     plot(new_ten_grid_9, color = color.new(color.red, 80)), 
         color = color.new(color.red, 80))
fill(plot(new_ten_grid_9, color = color.new(color.red, 85)), 
     plot(new_ten_grid_10, color = color.new(color.red, 85)), 
         color = color.new(color.red, 85))
plot(grid_destroyed_ten, color = color.new(color.red, 80), linewidth = 10)
// #########################################################################################################
var float new_twenty_grid_1 = 0 
var float new_twenty_grid_2 = 0 
var float new_twenty_grid_3 = 0 
var float new_twenty_grid_4 = 0 
var float new_twenty_grid_5 = 0 
var float new_twenty_grid_6 = 0 
var float new_twenty_grid_7 = 0 
var float new_twenty_grid_8 = 0 
var float new_twenty_grid_9 = 0 
var float new_twenty_grid_10 = 0 
var float new_twenty_grid_11 = 0 
var float new_twenty_grid_12 = 0 
var float new_twenty_grid_13 = 0 
var float new_twenty_grid_14 = 0 
var float new_twenty_grid_15 = 0 
var float new_twenty_grid_16 = 0 
var float new_twenty_grid_17 = 0 
var float new_twenty_grid_18 = 0 
var float new_twenty_grid_19 = 0 
var float new_twenty_grid_20 = 0 
var float grid_destroyed_twenty = 0
if tewnty_grid == true
    new_twenty_grid_1 := grid_1
    new_twenty_grid_2 := grid_2
    new_twenty_grid_3 := grid_3
    new_twenty_grid_4 := grid_4
    new_twenty_grid_5 := grid_5
    new_twenty_grid_6 := grid_6
    new_twenty_grid_7 := grid_7
    new_twenty_grid_8 := grid_8
    new_twenty_grid_9 := grid_9
    new_twenty_grid_10 := grid_10
    new_twenty_grid_11 := grid_11
    new_twenty_grid_12 := grid_12
    new_twenty_grid_13 := grid_13
    new_twenty_grid_14 := grid_14
    new_twenty_grid_15 := grid_15
    new_twenty_grid_16 := grid_16
    new_twenty_grid_17 := grid_17
    new_twenty_grid_18 := grid_18
    new_twenty_grid_19 := grid_19
    new_twenty_grid_20 := grid_20
    if grid_destroyer == true 
        grid_destroyed_twenty := stop_level
else if tewnty_grid == false
    new_twenty_grid_1 := na
    new_twenty_grid_2 := na
    new_twenty_grid_3 := na
    new_twenty_grid_4 := na
    new_twenty_grid_5 := na
    new_twenty_grid_6 := na
    new_twenty_grid_7 := na
    new_twenty_grid_8 := na
    new_twenty_grid_9 := na
    new_twenty_grid_10 := na
    new_twenty_grid_11 := na
    new_twenty_grid_12 := na
    new_twenty_grid_13 := na
    new_twenty_grid_14 := na
    new_twenty_grid_15 := na
    new_twenty_grid_16 := na
    new_twenty_grid_17 := na
    new_twenty_grid_18 := na
    new_twenty_grid_19 := na
    new_twenty_grid_20 := na
    if grid_destroyer == false 
        grid_destroyed_twenty := na
fill(plot(new_twenty_grid_1, color = color.new(color.green, 90)), 
     plot(new_twenty_grid_2, color = color.new(color.green, 90)), 
         color = color.new(color.green, 90))
fill(plot(new_twenty_grid_2, color = color.new(color.green, 85)), 
     plot(new_twenty_grid_3, color = color.new(color.green, 85)), 
         color = color.new(color.green, 85))
fill(plot(new_twenty_grid_3, color = color.new(color.green, 80)), 
     plot(new_twenty_grid_4, color = color.new(color.green, 80)), 
         color = color.new(color.green, 80))
fill(plot(new_twenty_grid_4, color = color.new(color.green, 70)), 
     plot(new_twenty_grid_5, color = color.new(color.green, 70)), 
         color = color.new(color.green, 70))
fill(plot(new_twenty_grid_5, color = color.new(color.green, 60)), 
     plot(new_twenty_grid_6, color = color.new(color.green, 60)), 
         color = color.new(color.green, 60))
fill(plot(new_twenty_grid_6, color = color.new(color.green, 60)), 
     plot(new_twenty_grid_7, color = color.new(color.green, 60)), 
         color = color.new(color.green, 60))
fill(plot(new_twenty_grid_7, color = color.new(color.green, 70)), 
     plot(new_twenty_grid_8, color = color.new(color.green, 70)), 
         color = color.new(color.green, 70))
fill(plot(new_twenty_grid_8, color = color.new(color.green, 80)), 
     plot(new_twenty_grid_9, color = color.new(color.green, 80)), 
         color = color.new(color.green, 80))
fill(plot(new_twenty_grid_9, color = color.new(color.green, 85)), 
     plot(new_twenty_grid_10, color = color.new(color.green, 85)), 
         color = color.new(color.green, 85))
fill(plot(new_twenty_grid_10, color = color.new(color.red, 90)), 
     plot(new_twenty_grid_11, color = color.new(color.red, 90)), 
         color = color.new(color.red, 90))
fill(plot(new_twenty_grid_11, color = color.new(color.red, 85)), 
     plot(new_twenty_grid_12, color = color.new(color.red, 85)), 
         color = color.new(color.red, 85))
fill(plot(new_twenty_grid_12, color = color.new(color.red, 80)), 
     plot(new_twenty_grid_13, color = color.new(color.red, 80)), 
         color = color.new(color.red, 80))
fill(plot(new_twenty_grid_13, color = color.new(color.red, 70)), 
     plot(new_twenty_grid_14, color = color.new(color.red, 70)), 
         color = color.new(color.red, 70))
fill(plot(new_twenty_grid_14, color = color.new(color.red, 60)), 
     plot(new_twenty_grid_15, color = color.new(color.red, 60)), 
         color = color.new(color.red, 60))
fill(plot(new_twenty_grid_15, color = color.new(color.red, 60)), 
     plot(new_twenty_grid_16, color = color.new(color.red, 60)), 
         color = color.new(color.red, 60))
fill(plot(new_twenty_grid_16, color = color.new(color.red, 70)), 
     plot(new_twenty_grid_17, color = color.new(color.red, 70)), 
         color = color.new(color.red, 70))
fill(plot(new_twenty_grid_17, color = color.new(color.red, 80)), 
     plot(new_twenty_grid_18, color = color.new(color.red, 80)), 
         color = color.new(color.red, 80))
fill(plot(new_twenty_grid_18, color = color.new(color.red, 85)), 
     plot(new_twenty_grid_19, color = color.new(color.red, 85)), 
         color = color.new(color.red, 85))
fill(plot(new_twenty_grid_19, color = color.new(color.red, 85)), 
     plot(new_twenty_grid_20, color = color.new(color.red, 85)), 
         color = color.new(color.red, 85))
plot(grid_destroyed_twenty, color = color.new(color.red, 80), linewidth = 10)
// #########################################################################################################
Expand (646 lines)