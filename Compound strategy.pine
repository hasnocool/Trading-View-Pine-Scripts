Script Name: Compound strategy
Author: pcooma
Description: In this strategy, I looked at how to manage the crypto I bought. Once we have a little understanding of how cryptocurrency is valued, we can manage the coins we have. For example, the most valuable coin in a coin is to sell when it is overvalued and re-buy when it is undervalued. Furthermore, I realised that buying from the right place and selling at the right...
PineScript code:

Pine Script™ strategy
Compound strategy
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319
1320
1321
1322
1323
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
1336
1337
1338
1339
1340
1341
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1394
1395
1396
1397
1398
1399
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1411
1412
1413
1414
1415
1416
1417
1418
1419
1420
1421
1422
1423
1424
1425
1426
1427
1428
1429
1430
1431
1432
1433
1434
1435
1436
1437
1438
1439
1440
1441
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464
1465
1466
1467
1468
1469
1470
1471
1472
1473
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1535
1536
1537
1538
1539
1540
1541
1542
1543
1544
1545
1546
1547
1548
1549
1550
//@version=5
//stable version = 128
//stable version = 148 - before trading arrangement
//before delite calculations - 190
//before publish - 321 stable version 
//published version - 328
//good performance improvement - 399
strategy("OPV17 V1 (Duplicate of OPV16 V1 Higher timeframes) - Co-relation and St-deviation Strategy", shorttitle="OPV17 V1", overlay=true, calc_on_order_fills=false, close_entries_rule = "FIFO", calc_on_every_tick=false, initial_capital = 1000,pyramiding = 999,precision = 4, process_orders_on_close=true, currency = currency.USD, default_qty_type = strategy.cash, default_qty_value = 33, commission_type = strategy.commission.percent, max_lines_count = 500, commission_value = 0.1)
//Enter Coustom comand to perform buy and sell actions link with webhook
string strategy_long_buy_comment                                =   "L-BUY" 
string strategy_long_sell_comment                               =   "L-SELL" 
string strategy_short_buy_comment                               =   "S-BUY" 
string strategy_short_sell_comment                              =   "S-SELL" 
//Backtest dates
fromDay                                                         = input.int     (defval = 25,                                                                                           title    = "From (DD/MM/YYYY) - ",     minval = 1, maxval = 31,                     group = 'Time Period Values', inline = 'From')
fromMonth                                                       = input.int     (defval = 02,                                                                                           title    = "/",                        minval = 1, maxval = 12,                     group = 'Time Period Values', inline = 'From')
fromYear                                                        = input.int     (defval = 2022,                                                                                         title    = "/",                        minval = 1970,                               group = 'Time Period Values', inline = 'From')
thruDay                                                         = input.int     (defval = 1,                                                                                            title    = "Thru (DD/MM/YYYY) - ",     minval = 1, maxval = 31,                     group = 'Time Period Values', inline = 'Thru')
thruMonth                                                       = input.int     (defval = 1,                                                                                            title    = "/",                        minval = 1, maxval = 12,                     group = 'Time Period Values', inline = 'Thru')
thruYear                                                        = input.int     (defval = 2112,                                                                                         title    = "/",                        minval = 1970,                               group = 'Time Period Values', inline = 'Thru')
start                                                           = timestamp     (fromYear, fromMonth, fromDay, 00, 00)         // backtest start window
finish                                                          = timestamp     (thruYear, thruMonth, thruDay, 23, 59)         // backtest finish window
use_timeframe                                                   = input.bool    (defval = true,                                                                                         title = "Use data window to limit trade",                                           group = 'Time Period Values')
var window = true
if use_timeframe == true
    window  := time >= start and time <= finish ? true : false
else
    window := true
//Fund Management
var int_cap                                                     = input.float   (defval = 1100,                                                                                         title = "Cumilative Investment",                                                    group = "Fund Management")
var purchaseing_method                                          = input.string  (defval ='Equal amounts',                                                                               title = "Value of Purchas will be",                                                 group = "Fund Management",                                                                                              options=['Equal amounts','Incremental amounts'])
var dev_of_equal_amounts                                        = input.string  (defval ='Equal amounts with fixed USDT',                                                               title = "Value of Purchas will be",                                                 group = "Fund Management",                                                                                              options=['Equal amounts with fixed USDT','Equal amounts with fixed entries'])
var int_val_prc                                                 = input.float   (defval = 45,                                                                                           title = "Value of first purchase will be",                                          group = "Fund Management",                                                                                              tooltip = "Minimum value of initial purchase will be 15USDT",       inline = "Investment")
var int_val_allocation                                          = input.string  (defval ='USDT',                                                                                        title = "",                                                                         group = "Fund Management",                                                                                              options=['% of cumilative investment', 'USDT'],                                                                                                  inline = "Investment")  
var piramiding                                                  = input.int     (defval = 35,                                                                                           title = "Numbers of pararal entries",                                               group = "Fund Management")
var r                                                           = input.float   (defval = 5,                                                                                            title = "r starting value",                                                         group = "Input parameters for fund management")
var r_change_input                                              = input.int     (defval = 1,                                                                                            title = "Initiative value for r change",                                            group = "Input parameters for fund management")
var r_finetune                                                  = input.bool    (defval = false,                                                                                        title = "Use r = 0.001 to finetune r value",                                        group = "Input parameters for fund management")
var r_value                                                     = input.float   (defval = 3.259,                                                                                        title = "Calculated r value",                                                       group = "Input parameters for fund management")
//Portfolio Management
var intermidiate_selling                                        = input         (defval = true,                                                                                         title = "Enable Swing Trading",                                                     group = "Portfolio Management")
var down_trend_selling                                          = input         (defval = true,                                                                                         title = "Enable Down Trend Trading",                                                group = "Portfolio Management")
source_of_downtrend_sell_determination_sma                      = input         (defval = low,                                                                                          title = "Source of Downtrend sell determination",                                   group = "Portfolio Management")
period_of_downtrend_sell_determination_sma                      = input         (defval = 9,                                                                                            title = "Period of Downtrend sell determination",                                   group = "Portfolio Management")
source_of_downtrend_sell_price_ricing_determination             = input         (defval = close,                                                                                        title = "Source to Determine Downtrend price ricing",                               group = "Portfolio Management")
period_of_downtrend_sell_price_ricing_determination             = input         (defval = 14,                                                                                           title = "Period of Price Ricing to Determine Downtrend sell",                       group = "Portfolio Management")
source_of_intermidiate_sell_determination_sma                   = input         (defval = high,                                                                                         title = "Source of Intermidiate sell determination",                                group = "Portfolio Management")
period_of_intermidiate_sell_determination_sma                   = input         (defval = 19,                                                                                           title = "Period of Intermidiate sell determination",                                group = "Portfolio Management")
var source_of_downfall_deviation                                = input         (defval = close,                                                                                        title = "Source of Downfall deviation",                                             group = "Portfolio Management")
var period_of_downfall_deviation                                = input         (defval = 9,                                                                                            title = "Period of Downfall deviation",                                             group = "Portfolio Management")
var downfall_deviation                                          = input         (defval = 5,                                                                                            title = "Downfall deviation",                                                       group = "Portfolio Management")
// Calculation of profit precentage
var profit_precentage                                           = input.float   (defval = 19,                                                                                           title = "Profit precentage will be",                                                group = "Profit Calculations",                                                                                          step = 0.01)
var profit_precentage_intermidiate                              = input.float   (defval = 17,                                                                                           title = "Swing Trading profit precentage will be",                                  group = "Profit Calculations",                                                                                          step = 0.01)
var down_trend_threshhold                                       = input.float   (defval = 20,                                                                                           title = "Downtrend Identification level will be",                                   group = "Profit Calculations",                                                                                          step = 0.01)
var ajust_profit_line                                           = input.bool    (defval = true,                                                                                         title = "Adjust profit line to absorb losses during swing trading",                 group = "Profit Calculations")
//Up and Down trend filter
src                                                             = input         (defval = open,                                                                                         title="Source",                                                                     group = "Up and Down trend filter")
len1                                                            = input.int     (defval = 50,                                                                                           title="SMA50",                                                                      group = "Up and Down trend filter",                                                                                     minval=25,                  maxval = 75,        step = 1)
len2                                                            = input.int     (defval = 141,                                                                                          title="SMA100",                                                                     group = "Up and Down trend filter",                                                                                     minval=75,                  maxval = 150,       step = 2)
len3                                                            = input.int     (defval = 200,                                                                                          title="SMA200",                                                                     group = "Up and Down trend filter",                                                                                     minval=150,                 maxval = 250,       step = 5)
//Principle input
look_back_period                                                = input.int     (defval = 9,                                                                                            title = "Look back period of principle Input",                                      group = "Principle inputs")
source_of_principle_input                                       = input         (defval = close,                                                                                        title = "Source of Principle Input",                                                group = "Principle inputs")
source_of_price_average                                         = input         (defval = close,                                                                                        title = "Source of Average Price",                                                  group = "Principle inputs")
look_back_period_for_price_falling                              = input.int     (defval = 3,                                                                                            title = "Look back period for price falling",                                       group = "Principle inputs")
source_of_ma9                                                   = input         (defval = low,                                                                                          title = "Source of average price to determine selling and buying",                  group = "Principle inputs")
look_back_period_of_sma9                                        = input.int     (defval = 3,                                                                                            title = "Look back period of average price to determine buy and sell",              group = "Principle inputs")
ma_9_calculation                                                = input.string  (defval = 'Volume-weighted Moving Average (VWMA)',                                                      title = "Calculation method of average price",                                      group = "Principle inputs",                                                                                             options=['Lenior regression', 'Simple Moving Average (SMA)','Exponentially Weighted Moving Average (EMA)', 'Hull Moving Average (HMA)', 'Exponentially Weighted Moving average with alpha length (RMA)', 'Weighted Moving Average (WMA)', 'Arnaud Legoux Moving Average (ALMA)', 'Symmetrically weighted moving average with fixed length (SWMA)','Volume-weighted Moving Average (VWMA)'])
volume_profile_calculation                                      = input.string  (defval = 'Lenior regression',                                                                          title = "Calculation method of volume profile",                                     group = "Principle inputs",                                                                                             options=['Lenior regression', 'Simple Moving Average (SMA)','Exponentially Weighted Moving Average (EMA)', 'Hull Moving Average (HMA)', 'Exponentially Weighted Moving average with alpha length (RMA)', 'Weighted Moving Average (WMA)', 'Arnaud Legoux Moving Average (ALMA)', 'Symmetrically weighted moving average with fixed length (SWMA)','Volume-weighted Moving Average (VWMA)'])
//Buy and Sell range
var factor_of_supertrend_to_determine_sell_comand               = input.int     (defval = 1,                                                                                            title = "Factor of supertrend to determine buy command",                            group = "Determination of buy or sell command")
var artperiod_of_supertrend_to_determine_sell_comand            = input.int     (defval = 16,                                                                                           title = "ArtPeriod of supertrend to determine buy command",                         group = "Determination of buy or sell command")
buy_comand_high_value                                           = input         (defval = high,                                                                                         title = "Source of Higher value of Look back period",                               group = "Determination of buy or sell command")
buy_comand_low_value                                            = input         (defval = hlc3,                                                                                         title = "Source of Lower value of Look back period",                                group = "Determination of buy or sell command")
var buy_or_sell_lookback                                        = input.int     (defval = 208,                                                                                          title = "Look back period to determine lower low points",                           group = "Determination of buy or sell command")
source_of_lower_point                                           = input         (defval = low,                                                                                          title = "Source of Lower point to initiate purchase",                               group = "Determination of buy or sell command")
//Principle inputs
var float ma_9 = 0
if ma_9_calculation == 'Lenior regression'
    ma_9 := ta.linreg(source_of_ma9, look_back_period, 0)
else if ma_9_calculation == 'Simple Moving Average (SMA)'
    ma_9 := ta.sma(source_of_ma9, look_back_period)
else if ma_9_calculation == 'Exponentially Weighted Moving Average (EMA)'
    ma_9 := ta.ema(source_of_ma9, look_back_period)
else if ma_9_calculation == 'Hull Moving Average (HMA)'
    ma_9 := ta.hma(source_of_ma9, look_back_period)
else if ma_9_calculation == 'Exponentially Weighted Moving average with alpha length (RMA)'
    ma_9 := ta.rma(source_of_ma9, look_back_period)
else if ma_9_calculation == 'Weighted Moving Average (WMA)'
    ma_9 := ta.wma(source_of_ma9, look_back_period)
else if ma_9_calculation == 'Arnaud Legoux Moving Average (ALMA)'
    ma_9 := ta.alma(source_of_ma9, look_back_period,0,3)
else if ma_9_calculation == 'Symmetrically weighted moving average with fixed length (SWMA)'
    ma_9 := ta.swma(source_of_ma9)
else if ma_9_calculation == 'Volume-weighted Moving Average (VWMA)'
    ma_9 := ta.vwma(source_of_ma9, look_back_period)
//Up and Down trend filter
smma1 = 0.0
sma_1 = ta.sma(src, len1)
smma1 := na(smma1[1]) ? sma_1 : (smma1[1] * (len1 - 1) + src) / len1
smma2 = 0.0
sma_2 = ta.sma(src, len2)
smma2 := na(smma2[1]) ? sma_2 : (smma2[1] * (len2 - 1) + src) / len2
smma3 = 0.0
sma_3 = ta.sma(src, len3)
smma3 := na(smma3[1]) ? sma_3 : (smma3[1] * (len3 - 1) + src) / len3
al_smma1 = ta.ema(src,len1)
al_smma2 = ta.ema(src,len1)
al_smma3 = ta.ema(src,len1)
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
//////////////// multi time period calculations ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
var float final_graph_value = 0
var float positive_value = 0
mt_prc_10 = ta.ema(source_of_principle_input,10)
mt_prc_50 = ta.ema(source_of_principle_input,50)
mt_prc_100 = ta.ema(source_of_principle_input,100)
mt_prc_200 = ta.ema(source_of_principle_input,200)
mt_prc_300 = ta.ema(source_of_principle_input,300)
mt_vol_10 = ta.ema(volume,10)
mt_vol_50 = ta.ema(volume,50)
mt_vol_100 = ta.ema(volume,100)
mt_vol_200 = ta.ema(volume,200)
mt_vol_300 = ta.ema(volume,300)
[mt_middle_mt_prc, mt_upper_mt_prc, mt_lower_mt_prc] = ta.bb(mt_prc_300, 5, 4)
[mt_middle_mt_vol, mt_upper_mt_vol, mt_lower_mt_vol] = ta.bb(mt_vol_300, 5, 4)
mt_gap_prc_10 = mt_prc_10 - mt_middle_mt_prc
mt_gap_prc_50 = mt_prc_50 - mt_middle_mt_prc
mt_gap_prc_100 = mt_prc_100 - mt_middle_mt_prc
mt_gap_prc_200 = mt_prc_200 - mt_middle_mt_prc
mt_gap_vol_10 = mt_vol_10 - mt_middle_mt_vol
mt_gap_vol_50 = mt_vol_50 - mt_middle_mt_vol
mt_gap_vol_100 = mt_vol_100 - mt_middle_mt_vol
mt_gap_vol_200 = mt_vol_200 - mt_middle_mt_vol
mt_stdev_gap_prc_10 = ta.stdev(mt_gap_prc_10,look_back_period)
mt_stdev_gap_prc_50 = ta.stdev(mt_gap_prc_50,look_back_period)
mt_stdev_gap_prc_100 = ta.stdev(mt_gap_prc_100,look_back_period)
mt_stdev_gap_prc_200 = ta.stdev(mt_gap_prc_200,look_back_period)
mt_stdev_gap_vol_10 = ta.stdev(mt_gap_vol_10,look_back_period)
mt_stdev_gap_vol_50 = ta.stdev(mt_gap_vol_50,look_back_period)
mt_stdev_gap_vol_100 = ta.stdev(mt_gap_vol_100,look_back_period)
mt_stdev_gap_vol_200 = ta.stdev(mt_gap_vol_200,look_back_period)
//Multi time frame RSI
mt_rsi_10 = ta.rsi(source_of_principle_input, 10)
mt_rsi_50 = ta.rsi(source_of_principle_input, 50)
mt_rsi_100 = ta.rsi(source_of_principle_input, 100)
mt_rsi_200 = ta.rsi(source_of_principle_input, 200)
mt_rsi_300 = ta.rsi(source_of_principle_input, 300)
co_rsi_10_50 = ta.crossover(mt_rsi_10,mt_rsi_50)
co_rsi_10_100 = ta.crossover(mt_rsi_10,mt_rsi_100)
co_rsi_10_200 = ta.crossover(mt_rsi_10,mt_rsi_200)
co_rsi_10_300 = ta.crossover(mt_rsi_10,mt_rsi_300)
co_rsi_50_100 = ta.crossover(mt_rsi_50,mt_rsi_100)
co_rsi_50_200 = ta.crossover(mt_rsi_50,mt_rsi_200)
co_rsi_50_300 = ta.crossover(mt_rsi_50,mt_rsi_300)
co_rsi_100_200 = ta.crossover(mt_rsi_100,mt_rsi_200)
co_rsi_100_300 = ta.crossover(mt_rsi_100,mt_rsi_300)
co_rsi_200_300 = ta.crossover(mt_rsi_200,mt_rsi_300)
cu_rsi_10_50 = ta.crossunder(mt_rsi_10,mt_rsi_50)
cu_rsi_10_100 = ta.crossunder(mt_rsi_10,mt_rsi_100)
cu_rsi_10_200 = ta.crossunder(mt_rsi_10,mt_rsi_200)
cu_rsi_10_300 = ta.crossunder(mt_rsi_10,mt_rsi_300)
cu_rsi_50_100 = ta.crossunder(mt_rsi_50,mt_rsi_100)
cu_rsi_50_200 = ta.crossunder(mt_rsi_50,mt_rsi_200)
cu_rsi_50_300 = ta.crossunder(mt_rsi_50,mt_rsi_300)
cu_rsi_100_200 = ta.crossunder(mt_rsi_100,mt_rsi_200)
cu_rsi_100_300 = ta.crossunder(mt_rsi_100,mt_rsi_300)
cu_rsi_200_300 = ta.crossunder(mt_rsi_200,mt_rsi_300)
[mt_middle_mt_rsi, mt_upper_mt_rsi, mt_lower_mt_rsi] = ta.bb(mt_rsi_300, 5, 4)
mt_gap_rsi_10 = mt_rsi_10 - mt_middle_mt_rsi
mt_gap_rsi_50 = mt_rsi_50 - mt_middle_mt_rsi
mt_gap_rsi_100 = mt_rsi_100 - mt_middle_mt_rsi
mt_gap_rsi_200 = mt_rsi_200 - mt_middle_mt_rsi
mt_stdev_gap_rsi_10 = ta.stdev(mt_gap_rsi_10,look_back_period)
mt_stdev_gap_rsi_50 = ta.stdev(mt_gap_rsi_50,look_back_period)
mt_stdev_gap_rsi_100 = ta.stdev(mt_gap_rsi_100,look_back_period)
mt_stdev_gap_rsi_200 = ta.stdev(mt_gap_rsi_200,look_back_period)
mt_corelation_gap_prc_rsi_10 = ta.correlation(mt_gap_rsi_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_rsi_50 = ta.correlation(mt_gap_rsi_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_rsi_100 = ta.correlation(mt_gap_rsi_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_rsi_200 = ta.correlation(mt_gap_rsi_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_rsi_10 = ta.correlation(mt_gap_rsi_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_rsi_50 = ta.correlation(mt_gap_rsi_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_rsi_100 = ta.correlation(mt_gap_rsi_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_rsi_200 = ta.correlation(mt_gap_rsi_200,mt_gap_vol_200,look_back_period)
rsi_gap_prc_correlation = mt_stdev_gap_rsi_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_rsi_10 * 30 + mt_stdev_gap_rsi_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_rsi_50 * 6 + mt_stdev_gap_rsi_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_rsi_100 * 3 + mt_stdev_gap_rsi_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_rsi_200 * 1.5
rsi_gap_vol_correlation = mt_stdev_gap_rsi_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_rsi_10 * 30 + mt_stdev_gap_rsi_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_rsi_50 * 6 + mt_stdev_gap_rsi_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_rsi_100 * 3 + mt_stdev_gap_rsi_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_rsi_200 * 1.5
mt_corelation_gap_prc_vol_rsi = ta.correlation(rsi_gap_prc_correlation,rsi_gap_vol_correlation,look_back_period)
//MFI
mt_mfi_10 = ta.mfi(source_of_principle_input, 10)
mt_mfi_50 = ta.mfi(source_of_principle_input, 50)
mt_mfi_100 = ta.mfi(source_of_principle_input, 100)
mt_mfi_200 = ta.mfi(source_of_principle_input, 200)
mt_mfi_300 = ta.mfi(source_of_principle_input, 300)
co_mfi_10_50 = ta.crossover(mt_mfi_10,mt_mfi_50)
co_mfi_10_100 = ta.crossover(mt_mfi_10,mt_mfi_100)
co_mfi_10_200 = ta.crossover(mt_mfi_10,mt_mfi_200)
co_mfi_10_300 = ta.crossover(mt_mfi_10,mt_mfi_300)
co_mfi_50_100 = ta.crossover(mt_mfi_50,mt_mfi_100)
co_mfi_50_200 = ta.crossover(mt_mfi_50,mt_mfi_200)
co_mfi_50_300 = ta.crossover(mt_mfi_50,mt_mfi_300)
co_mfi_100_200 = ta.crossover(mt_mfi_100,mt_mfi_200)
co_mfi_100_300 = ta.crossover(mt_mfi_100,mt_mfi_300)
co_mfi_200_300 = ta.crossover(mt_mfi_200,mt_mfi_300)
cu_mfi_10_50 = ta.crossunder(mt_mfi_10,mt_mfi_50)
cu_mfi_10_100 = ta.crossunder(mt_mfi_10,mt_mfi_100)
cu_mfi_10_200 = ta.crossunder(mt_mfi_10,mt_mfi_200)
cu_mfi_10_300 = ta.crossunder(mt_mfi_10,mt_mfi_300)
cu_mfi_50_100 = ta.crossunder(mt_mfi_50,mt_mfi_100)
cu_mfi_50_200 = ta.crossunder(mt_mfi_50,mt_mfi_200)
cu_mfi_50_300 = ta.crossunder(mt_mfi_50,mt_mfi_300)
cu_mfi_100_200 = ta.crossunder(mt_mfi_100,mt_mfi_200)
cu_mfi_100_300 = ta.crossunder(mt_mfi_100,mt_mfi_300)
cu_mfi_200_300 = ta.crossunder(mt_mfi_200,mt_mfi_300)
[mt_middle_mt_mfi, mt_upper_mt_mfi, mt_lower_mt_mfi] = ta.bb(mt_mfi_300, 5, 4)
mt_gap_mfi_10 = mt_mfi_10 - mt_middle_mt_mfi
mt_gap_mfi_50 = mt_mfi_50 - mt_middle_mt_mfi
mt_gap_mfi_100 = mt_mfi_100 - mt_middle_mt_mfi
mt_gap_mfi_200 = mt_mfi_200 - mt_middle_mt_mfi
mt_stdev_gap_mfi_10 = ta.stdev(mt_gap_mfi_10,look_back_period)
mt_stdev_gap_mfi_50 = ta.stdev(mt_gap_mfi_50,look_back_period)
mt_stdev_gap_mfi_100 = ta.stdev(mt_gap_mfi_100,look_back_period)
mt_stdev_gap_mfi_200 = ta.stdev(mt_gap_mfi_200,look_back_period)
mt_corelation_gap_prc_mfi_10 = ta.correlation(mt_gap_mfi_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_mfi_50 = ta.correlation(mt_gap_mfi_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_mfi_100 = ta.correlation(mt_gap_mfi_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_mfi_200 = ta.correlation(mt_gap_mfi_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_mfi_10 = ta.correlation(mt_gap_mfi_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_mfi_50 = ta.correlation(mt_gap_mfi_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_mfi_100 = ta.correlation(mt_gap_mfi_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_mfi_200 = ta.correlation(mt_gap_mfi_200,mt_gap_vol_200,look_back_period)
mfi_gap_prc_correlation = mt_stdev_gap_mfi_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_mfi_10 * 30 + mt_stdev_gap_mfi_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_mfi_50 * 6 + mt_stdev_gap_mfi_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_mfi_100 * 3 + mt_stdev_gap_mfi_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_mfi_200 * 1.5
mfi_gap_vol_correlation = mt_stdev_gap_mfi_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_mfi_10 * 30 + mt_stdev_gap_mfi_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_mfi_50 * 6 + mt_stdev_gap_mfi_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_mfi_100 * 3 + mt_stdev_gap_mfi_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_mfi_200 * 1.5
mt_corelation_gap_prc_vol_mfi = ta.correlation(mfi_gap_prc_correlation,mfi_gap_vol_correlation,look_back_period)
//CMO
mt_cmo_10 = ta.cmo(source_of_principle_input, 10)
mt_cmo_50 = ta.cmo(source_of_principle_input, 50)
mt_cmo_100 = ta.cmo(source_of_principle_input, 100)
mt_cmo_200 = ta.cmo(source_of_principle_input, 200)
mt_cmo_300 = ta.cmo(source_of_principle_input, 300)
co_cmo_10_50 = ta.crossover(mt_cmo_10,mt_cmo_50)
co_cmo_10_100 = ta.crossover(mt_cmo_10,mt_cmo_100)
co_cmo_10_200 = ta.crossover(mt_cmo_10,mt_cmo_200)
co_cmo_10_300 = ta.crossover(mt_cmo_10,mt_cmo_300)
co_cmo_50_100 = ta.crossover(mt_cmo_50,mt_cmo_100)
co_cmo_50_200 = ta.crossover(mt_cmo_50,mt_cmo_200)
co_cmo_50_300 = ta.crossover(mt_cmo_50,mt_cmo_300)
co_cmo_100_200 = ta.crossover(mt_cmo_100,mt_cmo_200)
co_cmo_100_300 = ta.crossover(mt_cmo_100,mt_cmo_300)
co_cmo_200_300 = ta.crossover(mt_cmo_200,mt_cmo_300)
cu_cmo_10_50 = ta.crossunder(mt_cmo_10,mt_cmo_50)
cu_cmo_10_100 = ta.crossunder(mt_cmo_10,mt_cmo_100)
cu_cmo_10_200 = ta.crossunder(mt_cmo_10,mt_cmo_200)
cu_cmo_10_300 = ta.crossunder(mt_cmo_10,mt_cmo_300)
cu_cmo_50_100 = ta.crossunder(mt_cmo_50,mt_cmo_100)
cu_cmo_50_200 = ta.crossunder(mt_cmo_50,mt_cmo_200)
cu_cmo_50_300 = ta.crossunder(mt_cmo_50,mt_cmo_300)
cu_cmo_100_200 = ta.crossunder(mt_cmo_100,mt_cmo_200)
cu_cmo_100_300 = ta.crossunder(mt_cmo_100,mt_cmo_300)
cu_cmo_200_300 = ta.crossunder(mt_cmo_200,mt_cmo_300)
[mt_middle_mt_cmo, mt_upper_mt_cmo, mt_lower_mt_cmo] = ta.bb(mt_cmo_300, 5, 4)
mt_gap_cmo_10 = mt_cmo_10 - mt_middle_mt_cmo
mt_gap_cmo_50 = mt_cmo_50 - mt_middle_mt_cmo
mt_gap_cmo_100 = mt_cmo_100 - mt_middle_mt_cmo
mt_gap_cmo_200 = mt_cmo_200 - mt_middle_mt_cmo
mt_stdev_gap_cmo_10 = ta.stdev(mt_gap_cmo_10,look_back_period)
mt_stdev_gap_cmo_50 = ta.stdev(mt_gap_cmo_50,look_back_period)
mt_stdev_gap_cmo_100 = ta.stdev(mt_gap_cmo_100,look_back_period)
mt_stdev_gap_cmo_200 = ta.stdev(mt_gap_cmo_200,look_back_period)
mt_corelation_gap_prc_cmo_10 = ta.correlation(mt_gap_cmo_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_cmo_50 = ta.correlation(mt_gap_cmo_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_cmo_100 = ta.correlation(mt_gap_cmo_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_cmo_200 = ta.correlation(mt_gap_cmo_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_cmo_10 = ta.correlation(mt_gap_cmo_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_cmo_50 = ta.correlation(mt_gap_cmo_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_cmo_100 = ta.correlation(mt_gap_cmo_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_cmo_200 = ta.correlation(mt_gap_cmo_200,mt_gap_vol_200,look_back_period)
cmo_gap_prc_correlation = mt_stdev_gap_cmo_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_cmo_10 * 30 + mt_stdev_gap_cmo_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_cmo_50 * 6 + mt_stdev_gap_cmo_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_cmo_100 * 3 + mt_stdev_gap_cmo_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_cmo_200 * 1.5
cmo_gap_vol_correlation = mt_stdev_gap_cmo_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_cmo_10 * 30 + mt_stdev_gap_cmo_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_cmo_50 * 6 + mt_stdev_gap_cmo_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_cmo_100 * 3 + mt_stdev_gap_cmo_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_cmo_200 * 1.5
mt_corelation_gap_prc_vol_cmo = ta.correlation(cmo_gap_prc_correlation,cmo_gap_vol_correlation,look_back_period)
//mom
mt_mom_10 = ta.mom(source_of_principle_input, 10)
mt_mom_50 = ta.mom(source_of_principle_input, 50)
mt_mom_100 = ta.mom(source_of_principle_input, 100)
mt_mom_200 = ta.mom(source_of_principle_input, 200)
mt_mom_300 = ta.mom(source_of_principle_input, 300)
co_mom_10_50 = ta.crossover(mt_mom_10,mt_mom_50)
co_mom_10_100 = ta.crossover(mt_mom_10,mt_mom_100)
co_mom_10_200 = ta.crossover(mt_mom_10,mt_mom_200)
co_mom_10_300 = ta.crossover(mt_mom_10,mt_mom_300)
co_mom_50_100 = ta.crossover(mt_mom_50,mt_mom_100)
co_mom_50_200 = ta.crossover(mt_mom_50,mt_mom_200)
co_mom_50_300 = ta.crossover(mt_mom_50,mt_mom_300)
co_mom_100_200 = ta.crossover(mt_mom_100,mt_mom_200)
co_mom_100_300 = ta.crossover(mt_mom_100,mt_mom_300)
co_mom_200_300 = ta.crossover(mt_mom_200,mt_mom_300)
cu_mom_10_50 = ta.crossunder(mt_mom_10,mt_mom_50)
cu_mom_10_100 = ta.crossunder(mt_mom_10,mt_mom_100)
cu_mom_10_200 = ta.crossunder(mt_mom_10,mt_mom_200)
cu_mom_10_300 = ta.crossunder(mt_mom_10,mt_mom_300)
cu_mom_50_100 = ta.crossunder(mt_mom_50,mt_mom_100)
cu_mom_50_200 = ta.crossunder(mt_mom_50,mt_mom_200)
cu_mom_50_300 = ta.crossunder(mt_mom_50,mt_mom_300)
cu_mom_100_200 = ta.crossunder(mt_mom_100,mt_mom_200)
cu_mom_100_300 = ta.crossunder(mt_mom_100,mt_mom_300)
cu_mom_200_300 = ta.crossunder(mt_mom_200,mt_mom_300)
[mt_middle_mt_mom, mt_upper_mt_mom, mt_lower_mt_mom] = ta.bb(mt_mom_300, 5, 4)
mt_gap_mom_10 = mt_mom_10 - mt_middle_mt_mom
mt_gap_mom_50 = mt_mom_50 - mt_middle_mt_mom
mt_gap_mom_100 = mt_mom_100 - mt_middle_mt_mom
mt_gap_mom_200 = mt_mom_200 - mt_middle_mt_mom
mt_stdev_gap_mom_10 = ta.stdev(mt_gap_mom_10,look_back_period)
mt_stdev_gap_mom_50 = ta.stdev(mt_gap_mom_50,look_back_period)
mt_stdev_gap_mom_100 = ta.stdev(mt_gap_mom_100,look_back_period)
mt_stdev_gap_mom_200 = ta.stdev(mt_gap_mom_200,look_back_period)
mt_corelation_gap_prc_mom_10 = ta.correlation(mt_gap_mom_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_mom_50 = ta.correlation(mt_gap_mom_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_mom_100 = ta.correlation(mt_gap_mom_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_mom_200 = ta.correlation(mt_gap_mom_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_mom_10 = ta.correlation(mt_gap_mom_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_mom_50 = ta.correlation(mt_gap_mom_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_mom_100 = ta.correlation(mt_gap_mom_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_mom_200 = ta.correlation(mt_gap_mom_200,mt_gap_vol_200,look_back_period)
mom_gap_prc_correlation = mt_stdev_gap_mom_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_mom_10 * 30 + mt_stdev_gap_mom_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_mom_50 * 6 + mt_stdev_gap_mom_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_mom_100 * 3 + mt_stdev_gap_mom_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_mom_200 * 1.5
mom_gap_vol_correlation = mt_stdev_gap_mom_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_mom_10 * 30 + mt_stdev_gap_mom_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_mom_50 * 6 + mt_stdev_gap_mom_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_mom_100 * 3 + mt_stdev_gap_mom_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_mom_200 * 1.5
mt_corelation_gap_prc_vol_mom = ta.correlation(mom_gap_prc_correlation,mom_gap_vol_correlation,look_back_period)
//cog
mt_cog_10 = ta.cog(source_of_principle_input, 10)
mt_cog_50 = ta.cog(source_of_principle_input, 50)
mt_cog_100 = ta.cog(source_of_principle_input, 100)
mt_cog_200 = ta.cog(source_of_principle_input, 200)
mt_cog_300 = ta.cog(source_of_principle_input, 300)
co_cog_10_50 = ta.crossover(mt_cog_10,mt_cog_50)
co_cog_10_100 = ta.crossover(mt_cog_10,mt_cog_100)
co_cog_10_200 = ta.crossover(mt_cog_10,mt_cog_200)
co_cog_10_300 = ta.crossover(mt_cog_10,mt_cog_300)
co_cog_50_100 = ta.crossover(mt_cog_50,mt_cog_100)
co_cog_50_200 = ta.crossover(mt_cog_50,mt_cog_200)
co_cog_50_300 = ta.crossover(mt_cog_50,mt_cog_300)
co_cog_100_200 = ta.crossover(mt_cog_100,mt_cog_200)
co_cog_100_300 = ta.crossover(mt_cog_100,mt_cog_300)
co_cog_200_300 = ta.crossover(mt_cog_200,mt_cog_300)
cu_cog_10_50 = ta.crossunder(mt_cog_10,mt_cog_50)
cu_cog_10_100 = ta.crossunder(mt_cog_10,mt_cog_100)
cu_cog_10_200 = ta.crossunder(mt_cog_10,mt_cog_200)
cu_cog_10_300 = ta.crossunder(mt_cog_10,mt_cog_300)
cu_cog_50_100 = ta.crossunder(mt_cog_50,mt_cog_100)
cu_cog_50_200 = ta.crossunder(mt_cog_50,mt_cog_200)
cu_cog_50_300 = ta.crossunder(mt_cog_50,mt_cog_300)
cu_cog_100_200 = ta.crossunder(mt_cog_100,mt_cog_200)
cu_cog_100_300 = ta.crossunder(mt_cog_100,mt_cog_300)
cu_cog_200_300 = ta.crossunder(mt_cog_200,mt_cog_300)
[mt_middle_mt_cog, mt_upper_mt_cog, mt_lower_mt_cog] = ta.bb(mt_cog_300, 5, 4)
mt_gap_cog_10 = mt_cog_10 - mt_middle_mt_cog
mt_gap_cog_50 = mt_cog_50 - mt_middle_mt_cog
mt_gap_cog_100 = mt_cog_100 - mt_middle_mt_cog
mt_gap_cog_200 = mt_cog_200 - mt_middle_mt_cog
mt_stdev_gap_cog_10 = ta.stdev(mt_gap_cog_10,look_back_period)
mt_stdev_gap_cog_50 = ta.stdev(mt_gap_cog_50,look_back_period)
mt_stdev_gap_cog_100 = ta.stdev(mt_gap_cog_100,look_back_period)
mt_stdev_gap_cog_200 = ta.stdev(mt_gap_cog_200,look_back_period)
mt_corelation_gap_prc_cog_10 = ta.correlation(mt_gap_cog_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_cog_50 = ta.correlation(mt_gap_cog_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_cog_100 = ta.correlation(mt_gap_cog_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_cog_200 = ta.correlation(mt_gap_cog_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_cog_10 = ta.correlation(mt_gap_cog_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_cog_50 = ta.correlation(mt_gap_cog_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_cog_100 = ta.correlation(mt_gap_cog_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_cog_200 = ta.correlation(mt_gap_cog_200,mt_gap_vol_200,look_back_period)
cog_gap_prc_correlation = mt_stdev_gap_cog_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_cog_10 * 30 + mt_stdev_gap_cog_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_cog_50 * 6 + mt_stdev_gap_cog_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_cog_100 * 3 + mt_stdev_gap_cog_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_cog_200 * 1.5
cog_gap_vol_correlation = mt_stdev_gap_cog_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_cog_10 * 30 + mt_stdev_gap_cog_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_cog_50 * 6 + mt_stdev_gap_cog_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_cog_100 * 3 + mt_stdev_gap_cog_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_cog_200 * 1.5
mt_corelation_gap_prc_vol_cog = ta.correlation(cog_gap_prc_correlation,cog_gap_vol_correlation,look_back_period)
//dmi
[mt_diplus, mt_diminus, mt_adx] = ta.dmi(2, 1)
mt_dmi_10 = ta.ema(mt_adx, 10)
mt_dmi_50 = ta.ema(mt_adx, 50)
mt_dmi_100 = ta.ema(mt_adx, 100)
mt_dmi_200 = ta.ema(mt_adx, 200)
mt_dmi_300 = ta.ema(mt_adx, 300)
co_dmi_10_50 = ta.crossover(mt_dmi_10,mt_dmi_50)
co_dmi_10_100 = ta.crossover(mt_dmi_10,mt_dmi_100)
co_dmi_10_200 = ta.crossover(mt_dmi_10,mt_dmi_200)
co_dmi_10_300 = ta.crossover(mt_dmi_10,mt_dmi_300)
co_dmi_50_100 = ta.crossover(mt_dmi_50,mt_dmi_100)
co_dmi_50_200 = ta.crossover(mt_dmi_50,mt_dmi_200)
co_dmi_50_300 = ta.crossover(mt_dmi_50,mt_dmi_300)
co_dmi_100_200 = ta.crossover(mt_dmi_100,mt_dmi_200)
co_dmi_100_300 = ta.crossover(mt_dmi_100,mt_dmi_300)
co_dmi_200_300 = ta.crossover(mt_dmi_200,mt_dmi_300)
cu_dmi_10_50 = ta.crossunder(mt_dmi_10,mt_dmi_50)
cu_dmi_10_100 = ta.crossunder(mt_dmi_10,mt_dmi_100)
cu_dmi_10_200 = ta.crossunder(mt_dmi_10,mt_dmi_200)
cu_dmi_10_300 = ta.crossunder(mt_dmi_10,mt_dmi_300)
cu_dmi_50_100 = ta.crossunder(mt_dmi_50,mt_dmi_100)
cu_dmi_50_200 = ta.crossunder(mt_dmi_50,mt_dmi_200)
cu_dmi_50_300 = ta.crossunder(mt_dmi_50,mt_dmi_300)
cu_dmi_100_200 = ta.crossunder(mt_dmi_100,mt_dmi_200)
cu_dmi_100_300 = ta.crossunder(mt_dmi_100,mt_dmi_300)
cu_dmi_200_300 = ta.crossunder(mt_dmi_200,mt_dmi_300)
[mt_middle_mt_dmi, mt_upper_mt_dmi, mt_lower_mt_dmi] = ta.bb(mt_dmi_300, 5, 4)
mt_gap_dmi_10 = mt_dmi_10 - mt_middle_mt_dmi
mt_gap_dmi_50 = mt_dmi_50 - mt_middle_mt_dmi
mt_gap_dmi_100 = mt_dmi_100 - mt_middle_mt_dmi
mt_gap_dmi_200 = mt_dmi_200 - mt_middle_mt_dmi
mt_stdev_gap_dmi_10 = ta.stdev(mt_gap_dmi_10,look_back_period)
mt_stdev_gap_dmi_50 = ta.stdev(mt_gap_dmi_50,look_back_period)
mt_stdev_gap_dmi_100 = ta.stdev(mt_gap_dmi_100,look_back_period)
mt_stdev_gap_dmi_200 = ta.stdev(mt_gap_dmi_200,look_back_period)
mt_corelation_gap_prc_dmi_10 = ta.correlation(mt_gap_dmi_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_dmi_50 = ta.correlation(mt_gap_dmi_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_dmi_100 = ta.correlation(mt_gap_dmi_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_dmi_200 = ta.correlation(mt_gap_dmi_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_dmi_10 = ta.correlation(mt_gap_dmi_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_dmi_50 = ta.correlation(mt_gap_dmi_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_dmi_100 = ta.correlation(mt_gap_dmi_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_dmi_200 = ta.correlation(mt_gap_dmi_200,mt_gap_vol_200,look_back_period)
dmi_gap_prc_correlation = mt_stdev_gap_dmi_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_dmi_10 * 30 + mt_stdev_gap_dmi_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_dmi_50 * 6 + mt_stdev_gap_dmi_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_dmi_100 * 3 + mt_stdev_gap_dmi_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_dmi_200 * 1.5
dmi_gap_vol_correlation = mt_stdev_gap_dmi_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_dmi_10 * 30 + mt_stdev_gap_dmi_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_dmi_50 * 6 + mt_stdev_gap_dmi_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_dmi_100 * 3 + mt_stdev_gap_dmi_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_dmi_200 * 1.5
mt_corelation_gap_prc_vol_dmi = ta.correlation(dmi_gap_prc_correlation,dmi_gap_vol_correlation,look_back_period)
//bop
bop_val = (close - open) / (high - low)
mt_bop_10 = ta.ema(bop_val, 10)
mt_bop_50 = ta.ema(bop_val, 50)
mt_bop_100 = ta.ema(bop_val, 100)
mt_bop_200 = ta.ema(bop_val, 200)
mt_bop_300 = ta.ema(bop_val, 300)
co_bop_10_50 = ta.crossover(mt_bop_10,mt_bop_50)
co_bop_10_100 = ta.crossover(mt_bop_10,mt_bop_100)
co_bop_10_200 = ta.crossover(mt_bop_10,mt_bop_200)
co_bop_10_300 = ta.crossover(mt_bop_10,mt_bop_300)
co_bop_50_100 = ta.crossover(mt_bop_50,mt_bop_100)
co_bop_50_200 = ta.crossover(mt_bop_50,mt_bop_200)
co_bop_50_300 = ta.crossover(mt_bop_50,mt_bop_300)
co_bop_100_200 = ta.crossover(mt_bop_100,mt_bop_200)
co_bop_100_300 = ta.crossover(mt_bop_100,mt_bop_300)
co_bop_200_300 = ta.crossover(mt_bop_200,mt_bop_300)
cu_bop_10_50 = ta.crossunder(mt_bop_10,mt_bop_50)
cu_bop_10_100 = ta.crossunder(mt_bop_10,mt_bop_100)
cu_bop_10_200 = ta.crossunder(mt_bop_10,mt_bop_200)
cu_bop_10_300 = ta.crossunder(mt_bop_10,mt_bop_300)
cu_bop_50_100 = ta.crossunder(mt_bop_50,mt_bop_100)
cu_bop_50_200 = ta.crossunder(mt_bop_50,mt_bop_200)
cu_bop_50_300 = ta.crossunder(mt_bop_50,mt_bop_300)
cu_bop_100_200 = ta.crossunder(mt_bop_100,mt_bop_200)
cu_bop_100_300 = ta.crossunder(mt_bop_100,mt_bop_300)
cu_bop_200_300 = ta.crossunder(mt_bop_200,mt_bop_300)
[mt_middle_mt_bop, mt_upper_mt_bop, mt_lower_mt_bop] = ta.bb(mt_bop_300, 5, 4)
mt_gap_bop_10 = mt_bop_10 - mt_middle_mt_bop
mt_gap_bop_50 = mt_bop_50 - mt_middle_mt_bop
mt_gap_bop_100 = mt_bop_100 - mt_middle_mt_bop
mt_gap_bop_200 = mt_bop_200 - mt_middle_mt_bop
mt_stdev_gap_bop_10 = ta.stdev(mt_gap_bop_10,look_back_period)
mt_stdev_gap_bop_50 = ta.stdev(mt_gap_bop_50,look_back_period)
mt_stdev_gap_bop_100 = ta.stdev(mt_gap_bop_100,look_back_period)
mt_stdev_gap_bop_200 = ta.stdev(mt_gap_bop_200,look_back_period)
mt_corelation_gap_prc_bop_10 = ta.correlation(mt_gap_bop_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_bop_50 = ta.correlation(mt_gap_bop_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_bop_100 = ta.correlation(mt_gap_bop_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_bop_200 = ta.correlation(mt_gap_bop_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_bop_10 = ta.correlation(mt_gap_bop_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_bop_50 = ta.correlation(mt_gap_bop_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_bop_100 = ta.correlation(mt_gap_bop_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_bop_200 = ta.correlation(mt_gap_bop_200,mt_gap_vol_200,look_back_period)
bop_gap_prc_correlation = mt_stdev_gap_bop_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_bop_10 * 30 + mt_stdev_gap_bop_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_bop_50 * 6 + mt_stdev_gap_bop_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_bop_100 * 3 + mt_stdev_gap_bop_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_bop_200 * 1.5
bop_gap_vol_correlation = mt_stdev_gap_bop_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_bop_10 * 30 + mt_stdev_gap_bop_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_bop_50 * 6 + mt_stdev_gap_bop_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_bop_100 * 3 + mt_stdev_gap_bop_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_bop_200 * 1.5
mt_corelation_gap_prc_vol_bop = ta.correlation(bop_gap_prc_correlation,bop_gap_vol_correlation,look_back_period)
//stoch
sto_val = ta.stoch(source_of_principle_input, high, low, 1)
mt_sto_10 = ta.ema(sto_val, 10)
mt_sto_50 = ta.ema(sto_val, 50)
mt_sto_100 = ta.ema(sto_val, 100)
mt_sto_200 = ta.ema(sto_val, 200)
mt_sto_300 = ta.ema(sto_val, 300)
co_sto_10_50 = ta.crossover(mt_sto_10,mt_sto_50)
co_sto_10_100 = ta.crossover(mt_sto_10,mt_sto_100)
co_sto_10_200 = ta.crossover(mt_sto_10,mt_sto_200)
co_sto_10_300 = ta.crossover(mt_sto_10,mt_sto_300)
co_sto_50_100 = ta.crossover(mt_sto_50,mt_sto_100)
co_sto_50_200 = ta.crossover(mt_sto_50,mt_sto_200)
co_sto_50_300 = ta.crossover(mt_sto_50,mt_sto_300)
co_sto_100_200 = ta.crossover(mt_sto_100,mt_sto_200)
co_sto_100_300 = ta.crossover(mt_sto_100,mt_sto_300)
co_sto_200_300 = ta.crossover(mt_sto_200,mt_sto_300)
cu_sto_10_50 = ta.crossunder(mt_sto_10,mt_sto_50)
cu_sto_10_100 = ta.crossunder(mt_sto_10,mt_sto_100)
cu_sto_10_200 = ta.crossunder(mt_sto_10,mt_sto_200)
cu_sto_10_300 = ta.crossunder(mt_sto_10,mt_sto_300)
cu_sto_50_100 = ta.crossunder(mt_sto_50,mt_sto_100)
cu_sto_50_200 = ta.crossunder(mt_sto_50,mt_sto_200)
cu_sto_50_300 = ta.crossunder(mt_sto_50,mt_sto_300)
cu_sto_100_200 = ta.crossunder(mt_sto_100,mt_sto_200)
cu_sto_100_300 = ta.crossunder(mt_sto_100,mt_sto_300)
cu_sto_200_300 = ta.crossunder(mt_sto_200,mt_sto_300)
[mt_middle_mt_sto, mt_upper_mt_sto, mt_lower_mt_sto] = ta.bb(mt_sto_300, 5, 4)
mt_gap_sto_10 = mt_sto_10 - mt_middle_mt_sto
mt_gap_sto_50 = mt_sto_50 - mt_middle_mt_sto
mt_gap_sto_100 = mt_sto_100 - mt_middle_mt_sto
mt_gap_sto_200 = mt_sto_200 - mt_middle_mt_sto
mt_stdev_gap_sto_10 = ta.stdev(mt_gap_sto_10,look_back_period)
mt_stdev_gap_sto_50 = ta.stdev(mt_gap_sto_50,look_back_period)
mt_stdev_gap_sto_100 = ta.stdev(mt_gap_sto_100,look_back_period)
mt_stdev_gap_sto_200 = ta.stdev(mt_gap_sto_200,look_back_period)
mt_corelation_gap_prc_sto_10 = ta.correlation(mt_gap_sto_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_sto_50 = ta.correlation(mt_gap_sto_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_sto_100 = ta.correlation(mt_gap_sto_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_sto_200 = ta.correlation(mt_gap_sto_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_sto_10 = ta.correlation(mt_gap_sto_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_sto_50 = ta.correlation(mt_gap_sto_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_sto_100 = ta.correlation(mt_gap_sto_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_sto_200 = ta.correlation(mt_gap_sto_200,mt_gap_vol_200,look_back_period)
sto_gap_prc_correlation = mt_stdev_gap_sto_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_sto_10 * 30 + mt_stdev_gap_sto_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_sto_50 * 6 + mt_stdev_gap_sto_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_sto_100 * 3 + mt_stdev_gap_sto_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_sto_200 * 1.5
sto_gap_vol_correlation = mt_stdev_gap_sto_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_sto_10 * 30 + mt_stdev_gap_sto_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_sto_50 * 6 + mt_stdev_gap_sto_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_sto_100 * 3 + mt_stdev_gap_sto_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_sto_200 * 1.5
mt_corelation_gap_prc_vol_sto = ta.correlation(sto_gap_prc_correlation,sto_gap_vol_correlation,look_back_period)
//swma
swma_val = ta.swma(source_of_principle_input)
mt_swma_10 = ta.ema(swma_val, 10)
mt_swma_50 = ta.ema(swma_val, 50)
mt_swma_100 = ta.ema(swma_val, 100)
mt_swma_200 = ta.ema(swma_val, 200)
mt_swma_300 = ta.ema(swma_val, 300)
co_swma_10_50 = ta.crossover(mt_swma_10,mt_swma_50)
co_swma_10_100 = ta.crossover(mt_swma_10,mt_swma_100)
co_swma_10_200 = ta.crossover(mt_swma_10,mt_swma_200)
co_swma_10_300 = ta.crossover(mt_swma_10,mt_swma_300)
co_swma_50_100 = ta.crossover(mt_swma_50,mt_swma_100)
co_swma_50_200 = ta.crossover(mt_swma_50,mt_swma_200)
co_swma_50_300 = ta.crossover(mt_swma_50,mt_swma_300)
co_swma_100_200 = ta.crossover(mt_swma_100,mt_swma_200)
co_swma_100_300 = ta.crossover(mt_swma_100,mt_swma_300)
co_swma_200_300 = ta.crossover(mt_swma_200,mt_swma_300)
cu_swma_10_50 = ta.crossunder(mt_swma_10,mt_swma_50)
cu_swma_10_100 = ta.crossunder(mt_swma_10,mt_swma_100)
cu_swma_10_200 = ta.crossunder(mt_swma_10,mt_swma_200)
cu_swma_10_300 = ta.crossunder(mt_swma_10,mt_swma_300)
cu_swma_50_100 = ta.crossunder(mt_swma_50,mt_swma_100)
cu_swma_50_200 = ta.crossunder(mt_swma_50,mt_swma_200)
cu_swma_50_300 = ta.crossunder(mt_swma_50,mt_swma_300)
cu_swma_100_200 = ta.crossunder(mt_swma_100,mt_swma_200)
cu_swma_100_300 = ta.crossunder(mt_swma_100,mt_swma_300)
cu_swma_200_300 = ta.crossunder(mt_swma_200,mt_swma_300)
[mt_middle_mt_swma, mt_upper_mt_swma, mt_lower_mt_swma] = ta.bb(mt_swma_300, 5, 4)
mt_gap_swma_10 = mt_swma_10 - mt_middle_mt_swma
mt_gap_swma_50 = mt_swma_50 - mt_middle_mt_swma
mt_gap_swma_100 = mt_swma_100 - mt_middle_mt_swma
mt_gap_swma_200 = mt_swma_200 - mt_middle_mt_swma
mt_stdev_gap_swma_10 = ta.stdev(mt_gap_swma_10,look_back_period)
mt_stdev_gap_swma_50 = ta.stdev(mt_gap_swma_50,look_back_period)
mt_stdev_gap_swma_100 = ta.stdev(mt_gap_swma_100,look_back_period)
mt_stdev_gap_swma_200 = ta.stdev(mt_gap_swma_200,look_back_period)
mt_corelation_gap_prc_swma_10 = ta.correlation(mt_gap_swma_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_swma_50 = ta.correlation(mt_gap_swma_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_swma_100 = ta.correlation(mt_gap_swma_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_swma_200 = ta.correlation(mt_gap_swma_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_swma_10 = ta.correlation(mt_gap_swma_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_swma_50 = ta.correlation(mt_gap_swma_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_swma_100 = ta.correlation(mt_gap_swma_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_swma_200 = ta.correlation(mt_gap_swma_200,mt_gap_vol_200,look_back_period)
swma_gap_prc_correlation = mt_stdev_gap_swma_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_swma_10 * 30 + mt_stdev_gap_swma_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_swma_50 * 6 + mt_stdev_gap_swma_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_swma_100 * 3 + mt_stdev_gap_swma_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_swma_200 * 1.5
swma_gap_vol_correlation = mt_stdev_gap_swma_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_swma_10 * 30 + mt_stdev_gap_swma_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_swma_50 * 6 + mt_stdev_gap_swma_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_swma_100 * 3 + mt_stdev_gap_swma_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_swma_200 * 1.5
mt_corelation_gap_prc_vol_swma = ta.correlation(swma_gap_prc_correlation,swma_gap_vol_correlation,look_back_period)
//tsi
tsi_val = ta.tsi(source_of_principle_input, 1, 2)
mt_tsi_10 = ta.ema(tsi_val, 10)
mt_tsi_50 = ta.ema(tsi_val, 50)
mt_tsi_100 = ta.ema(tsi_val, 100)
mt_tsi_200 = ta.ema(tsi_val, 200)
mt_tsi_300 = ta.ema(tsi_val, 300)
co_tsi_10_50 = ta.crossover(mt_tsi_10,mt_tsi_50)
co_tsi_10_100 = ta.crossover(mt_tsi_10,mt_tsi_100)
co_tsi_10_200 = ta.crossover(mt_tsi_10,mt_tsi_200)
co_tsi_10_300 = ta.crossover(mt_tsi_10,mt_tsi_300)
co_tsi_50_100 = ta.crossover(mt_tsi_50,mt_tsi_100)
co_tsi_50_200 = ta.crossover(mt_tsi_50,mt_tsi_200)
co_tsi_50_300 = ta.crossover(mt_tsi_50,mt_tsi_300)
co_tsi_100_200 = ta.crossover(mt_tsi_100,mt_tsi_200)
co_tsi_100_300 = ta.crossover(mt_tsi_100,mt_tsi_300)
co_tsi_200_300 = ta.crossover(mt_tsi_200,mt_tsi_300)
cu_tsi_10_50 = ta.crossunder(mt_tsi_10,mt_tsi_50)
cu_tsi_10_100 = ta.crossunder(mt_tsi_10,mt_tsi_100)
cu_tsi_10_200 = ta.crossunder(mt_tsi_10,mt_tsi_200)
cu_tsi_10_300 = ta.crossunder(mt_tsi_10,mt_tsi_300)
cu_tsi_50_100 = ta.crossunder(mt_tsi_50,mt_tsi_100)
cu_tsi_50_200 = ta.crossunder(mt_tsi_50,mt_tsi_200)
cu_tsi_50_300 = ta.crossunder(mt_tsi_50,mt_tsi_300)
cu_tsi_100_200 = ta.crossunder(mt_tsi_100,mt_tsi_200)
cu_tsi_100_300 = ta.crossunder(mt_tsi_100,mt_tsi_300)
cu_tsi_200_300 = ta.crossunder(mt_tsi_200,mt_tsi_300)
[mt_middle_mt_tsi, mt_upper_mt_tsi, mt_lower_mt_tsi] = ta.bb(mt_tsi_300, 5, 4)
mt_gap_tsi_10 = mt_tsi_10 - mt_middle_mt_tsi
mt_gap_tsi_50 = mt_tsi_50 - mt_middle_mt_tsi
mt_gap_tsi_100 = mt_tsi_100 - mt_middle_mt_tsi
mt_gap_tsi_200 = mt_tsi_200 - mt_middle_mt_tsi
mt_stdev_gap_tsi_10 = ta.stdev(mt_gap_tsi_10,look_back_period)
mt_stdev_gap_tsi_50 = ta.stdev(mt_gap_tsi_50,look_back_period)
mt_stdev_gap_tsi_100 = ta.stdev(mt_gap_tsi_100,look_back_period)
mt_stdev_gap_tsi_200 = ta.stdev(mt_gap_tsi_200,look_back_period)
mt_corelation_gap_prc_tsi_10 = ta.correlation(mt_gap_tsi_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_tsi_50 = ta.correlation(mt_gap_tsi_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_tsi_100 = ta.correlation(mt_gap_tsi_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_tsi_200 = ta.correlation(mt_gap_tsi_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_tsi_10 = ta.correlation(mt_gap_tsi_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_tsi_50 = ta.correlation(mt_gap_tsi_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_tsi_100 = ta.correlation(mt_gap_tsi_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_tsi_200 = ta.correlation(mt_gap_tsi_200,mt_gap_vol_200,look_back_period)
tsi_gap_prc_correlation = mt_stdev_gap_tsi_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_tsi_10 * 30 + mt_stdev_gap_tsi_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_tsi_50 * 6 + mt_stdev_gap_tsi_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_tsi_100 * 3 + mt_stdev_gap_tsi_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_tsi_200 * 1.5
tsi_gap_vol_correlation = mt_stdev_gap_tsi_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_tsi_10 * 30 + mt_stdev_gap_tsi_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_tsi_50 * 6 + mt_stdev_gap_tsi_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_tsi_100 * 3 + mt_stdev_gap_tsi_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_tsi_200 * 1.5
mt_corelation_gap_prc_vol_tsi = ta.correlation(tsi_gap_prc_correlation,tsi_gap_vol_correlation,look_back_period)
//wpr
wpr_val = ta.wpr(1)
mt_wpr_10 = ta.ema(wpr_val, 10)
mt_wpr_50 = ta.ema(wpr_val, 50)
mt_wpr_100 = ta.ema(wpr_val, 100)
mt_wpr_200 = ta.ema(wpr_val, 200)
mt_wpr_300 = ta.ema(wpr_val, 300)
co_wpr_10_50 = ta.crossover(mt_wpr_10,mt_wpr_50)
co_wpr_10_100 = ta.crossover(mt_wpr_10,mt_wpr_100)
co_wpr_10_200 = ta.crossover(mt_wpr_10,mt_wpr_200)
co_wpr_10_300 = ta.crossover(mt_wpr_10,mt_wpr_300)
co_wpr_50_100 = ta.crossover(mt_wpr_50,mt_wpr_100)
co_wpr_50_200 = ta.crossover(mt_wpr_50,mt_wpr_200)
co_wpr_50_300 = ta.crossover(mt_wpr_50,mt_wpr_300)
co_wpr_100_200 = ta.crossover(mt_wpr_100,mt_wpr_200)
co_wpr_100_300 = ta.crossover(mt_wpr_100,mt_wpr_300)
co_wpr_200_300 = ta.crossover(mt_wpr_200,mt_wpr_300)
cu_wpr_10_50 = ta.crossunder(mt_wpr_10,mt_wpr_50)
cu_wpr_10_100 = ta.crossunder(mt_wpr_10,mt_wpr_100)
cu_wpr_10_200 = ta.crossunder(mt_wpr_10,mt_wpr_200)
cu_wpr_10_300 = ta.crossunder(mt_wpr_10,mt_wpr_300)
cu_wpr_50_100 = ta.crossunder(mt_wpr_50,mt_wpr_100)
cu_wpr_50_200 = ta.crossunder(mt_wpr_50,mt_wpr_200)
cu_wpr_50_300 = ta.crossunder(mt_wpr_50,mt_wpr_300)
cu_wpr_100_200 = ta.crossunder(mt_wpr_100,mt_wpr_200)
cu_wpr_100_300 = ta.crossunder(mt_wpr_100,mt_wpr_300)
cu_wpr_200_300 = ta.crossunder(mt_wpr_200,mt_wpr_300)
[mt_middle_mt_wpr, mt_upper_mt_wpr, mt_lower_mt_wpr] = ta.bb(mt_wpr_300, 5, 4)
mt_gap_wpr_10 = mt_wpr_10 - mt_middle_mt_wpr
mt_gap_wpr_50 = mt_wpr_50 - mt_middle_mt_wpr
mt_gap_wpr_100 = mt_wpr_100 - mt_middle_mt_wpr
mt_gap_wpr_200 = mt_wpr_200 - mt_middle_mt_wpr
mt_stdev_gap_wpr_10 = ta.stdev(mt_gap_wpr_10,look_back_period)
mt_stdev_gap_wpr_50 = ta.stdev(mt_gap_wpr_50,look_back_period)
mt_stdev_gap_wpr_100 = ta.stdev(mt_gap_wpr_100,look_back_period)
mt_stdev_gap_wpr_200 = ta.stdev(mt_gap_wpr_200,look_back_period)
mt_corelation_gap_prc_wpr_10 = ta.correlation(mt_gap_wpr_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_wpr_50 = ta.correlation(mt_gap_wpr_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_wpr_100 = ta.correlation(mt_gap_wpr_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_wpr_200 = ta.correlation(mt_gap_wpr_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_wpr_10 = ta.correlation(mt_gap_wpr_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_wpr_50 = ta.correlation(mt_gap_wpr_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_wpr_100 = ta.correlation(mt_gap_wpr_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_wpr_200 = ta.correlation(mt_gap_wpr_200,mt_gap_vol_200,look_back_period)
wpr_gap_prc_correlation = mt_stdev_gap_wpr_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_wpr_10 * 30 + mt_stdev_gap_wpr_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_wpr_50 * 6 + mt_stdev_gap_wpr_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_wpr_100 * 3 + mt_stdev_gap_wpr_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_wpr_200 * 1.5
wpr_gap_vol_correlation = mt_stdev_gap_wpr_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_wpr_10 * 30 + mt_stdev_gap_wpr_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_wpr_50 * 6 + mt_stdev_gap_wpr_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_wpr_100 * 3 + mt_stdev_gap_wpr_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_wpr_200 * 1.5
mt_corelation_gap_prc_vol_wpr = ta.correlation(wpr_gap_prc_correlation,wpr_gap_vol_correlation,look_back_period)
//accdist
acc_val = ta.accdist
mt_acc_10 = ta.ema(acc_val, 10)
mt_acc_50 = ta.ema(acc_val, 50)
mt_acc_100 = ta.ema(acc_val, 100)
mt_acc_200 = ta.ema(acc_val, 200)
mt_acc_300 = ta.ema(acc_val, 300)
co_acc_10_50 = ta.crossover(mt_acc_10,mt_acc_50)
co_acc_10_100 = ta.crossover(mt_acc_10,mt_acc_100)
co_acc_10_200 = ta.crossover(mt_acc_10,mt_acc_200)
co_acc_10_300 = ta.crossover(mt_acc_10,mt_acc_300)
co_acc_50_100 = ta.crossover(mt_acc_50,mt_acc_100)
co_acc_50_200 = ta.crossover(mt_acc_50,mt_acc_200)
co_acc_50_300 = ta.crossover(mt_acc_50,mt_acc_300)
co_acc_100_200 = ta.crossover(mt_acc_100,mt_acc_200)
co_acc_100_300 = ta.crossover(mt_acc_100,mt_acc_300)
co_acc_200_300 = ta.crossover(mt_acc_200,mt_acc_300)
cu_acc_10_50 = ta.crossunder(mt_acc_10,mt_acc_50)
cu_acc_10_100 = ta.crossunder(mt_acc_10,mt_acc_100)
cu_acc_10_200 = ta.crossunder(mt_acc_10,mt_acc_200)
cu_acc_10_300 = ta.crossunder(mt_acc_10,mt_acc_300)
cu_acc_50_100 = ta.crossunder(mt_acc_50,mt_acc_100)
cu_acc_50_200 = ta.crossunder(mt_acc_50,mt_acc_200)
cu_acc_50_300 = ta.crossunder(mt_acc_50,mt_acc_300)
cu_acc_100_200 = ta.crossunder(mt_acc_100,mt_acc_200)
cu_acc_100_300 = ta.crossunder(mt_acc_100,mt_acc_300)
cu_acc_200_300 = ta.crossunder(mt_acc_200,mt_acc_300)
[mt_middle_mt_acc, mt_upper_mt_acc, mt_lower_mt_acc] = ta.bb(mt_acc_300, 5, 4)
mt_gap_acc_10 = mt_acc_10 - mt_middle_mt_acc
mt_gap_acc_50 = mt_acc_50 - mt_middle_mt_acc
mt_gap_acc_100 = mt_acc_100 - mt_middle_mt_acc
mt_gap_acc_200 = mt_acc_200 - mt_middle_mt_acc
mt_stdev_gap_acc_10 = ta.stdev(mt_gap_acc_10,look_back_period)
mt_stdev_gap_acc_50 = ta.stdev(mt_gap_acc_50,look_back_period)
mt_stdev_gap_acc_100 = ta.stdev(mt_gap_acc_100,look_back_period)
mt_stdev_gap_acc_200 = ta.stdev(mt_gap_acc_200,look_back_period)
mt_corelation_gap_prc_acc_10 = ta.correlation(mt_gap_acc_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_acc_50 = ta.correlation(mt_gap_acc_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_acc_100 = ta.correlation(mt_gap_acc_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_acc_200 = ta.correlation(mt_gap_acc_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_acc_10 = ta.correlation(mt_gap_acc_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_acc_50 = ta.correlation(mt_gap_acc_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_acc_100 = ta.correlation(mt_gap_acc_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_acc_200 = ta.correlation(mt_gap_acc_200,mt_gap_vol_200,look_back_period)
acc_gap_prc_correlation = mt_stdev_gap_acc_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_acc_10 * 30 + mt_stdev_gap_acc_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_acc_50 * 6 + mt_stdev_gap_acc_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_acc_100 * 3 + mt_stdev_gap_acc_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_acc_200 * 1.5
acc_gap_vol_correlation = mt_stdev_gap_acc_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_acc_10 * 30 + mt_stdev_gap_acc_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_acc_50 * 6 + mt_stdev_gap_acc_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_acc_100 * 3 + mt_stdev_gap_acc_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_acc_200 * 1.5
mt_corelation_gap_prc_vol_acc = ta.correlation(acc_gap_prc_correlation,acc_gap_vol_correlation,look_back_period)
//iii
iii_val = ta.iii
mt_iii_10 = ta.ema(iii_val, 10)
mt_iii_50 = ta.ema(iii_val, 50)
mt_iii_100 = ta.ema(iii_val, 100)
mt_iii_200 = ta.ema(iii_val, 200)
mt_iii_300 = ta.ema(iii_val, 300)
co_iii_10_50 = ta.crossover(mt_iii_10,mt_iii_50)
co_iii_10_100 = ta.crossover(mt_iii_10,mt_iii_100)
co_iii_10_200 = ta.crossover(mt_iii_10,mt_iii_200)
co_iii_10_300 = ta.crossover(mt_iii_10,mt_iii_300)
co_iii_50_100 = ta.crossover(mt_iii_50,mt_iii_100)
co_iii_50_200 = ta.crossover(mt_iii_50,mt_iii_200)
co_iii_50_300 = ta.crossover(mt_iii_50,mt_iii_300)
co_iii_100_200 = ta.crossover(mt_iii_100,mt_iii_200)
co_iii_100_300 = ta.crossover(mt_iii_100,mt_iii_300)
co_iii_200_300 = ta.crossover(mt_iii_200,mt_iii_300)
cu_iii_10_50 = ta.crossunder(mt_iii_10,mt_iii_50)
cu_iii_10_100 = ta.crossunder(mt_iii_10,mt_iii_100)
cu_iii_10_200 = ta.crossunder(mt_iii_10,mt_iii_200)
cu_iii_10_300 = ta.crossunder(mt_iii_10,mt_iii_300)
cu_iii_50_100 = ta.crossunder(mt_iii_50,mt_iii_100)
cu_iii_50_200 = ta.crossunder(mt_iii_50,mt_iii_200)
cu_iii_50_300 = ta.crossunder(mt_iii_50,mt_iii_300)
cu_iii_100_200 = ta.crossunder(mt_iii_100,mt_iii_200)
cu_iii_100_300 = ta.crossunder(mt_iii_100,mt_iii_300)
cu_iii_200_300 = ta.crossunder(mt_iii_200,mt_iii_300)
[mt_middle_mt_iii, mt_upper_mt_iii, mt_lower_mt_iii] = ta.bb(mt_iii_300, 5, 4)
mt_gap_iii_10 = mt_iii_10 - mt_middle_mt_iii
mt_gap_iii_50 = mt_iii_50 - mt_middle_mt_iii
mt_gap_iii_100 = mt_iii_100 - mt_middle_mt_iii
mt_gap_iii_200 = mt_iii_200 - mt_middle_mt_iii
mt_stdev_gap_iii_10 = ta.stdev(mt_gap_iii_10,look_back_period)
mt_stdev_gap_iii_50 = ta.stdev(mt_gap_iii_50,look_back_period)
mt_stdev_gap_iii_100 = ta.stdev(mt_gap_iii_100,look_back_period)
mt_stdev_gap_iii_200 = ta.stdev(mt_gap_iii_200,look_back_period)
mt_corelation_gap_prc_iii_10 = ta.correlation(mt_gap_iii_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_iii_50 = ta.correlation(mt_gap_iii_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_iii_100 = ta.correlation(mt_gap_iii_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_iii_200 = ta.correlation(mt_gap_iii_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_iii_10 = ta.correlation(mt_gap_iii_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_iii_50 = ta.correlation(mt_gap_iii_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_iii_100 = ta.correlation(mt_gap_iii_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_iii_200 = ta.correlation(mt_gap_iii_200,mt_gap_vol_200,look_back_period)
iii_gap_prc_correlation = mt_stdev_gap_iii_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_iii_10 * 30 + mt_stdev_gap_iii_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_iii_50 * 6 + mt_stdev_gap_iii_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_iii_100 * 3 + mt_stdev_gap_iii_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_iii_200 * 1.5
iii_gap_vol_correlation = mt_stdev_gap_iii_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_iii_10 * 30 + mt_stdev_gap_iii_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_iii_50 * 6 + mt_stdev_gap_iii_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_iii_100 * 3 + mt_stdev_gap_iii_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_iii_200 * 1.5
mt_corelation_gap_prc_vol_iii = ta.correlation(iii_gap_prc_correlation,iii_gap_vol_correlation,look_back_period)
//nvi
nvi_val = ta.nvi
mt_nvi_10 = ta.ema(nvi_val, 10)
mt_nvi_50 = ta.ema(nvi_val, 50)
mt_nvi_100 = ta.ema(nvi_val, 100)
mt_nvi_200 = ta.ema(nvi_val, 200)
mt_nvi_300 = ta.ema(nvi_val, 300)
co_nvi_10_50 = ta.crossover(mt_nvi_10,mt_nvi_50)
co_nvi_10_100 = ta.crossover(mt_nvi_10,mt_nvi_100)
co_nvi_10_200 = ta.crossover(mt_nvi_10,mt_nvi_200)
co_nvi_10_300 = ta.crossover(mt_nvi_10,mt_nvi_300)
co_nvi_50_100 = ta.crossover(mt_nvi_50,mt_nvi_100)
co_nvi_50_200 = ta.crossover(mt_nvi_50,mt_nvi_200)
co_nvi_50_300 = ta.crossover(mt_nvi_50,mt_nvi_300)
co_nvi_100_200 = ta.crossover(mt_nvi_100,mt_nvi_200)
co_nvi_100_300 = ta.crossover(mt_nvi_100,mt_nvi_300)
co_nvi_200_300 = ta.crossover(mt_nvi_200,mt_nvi_300)
cu_nvi_10_50 = ta.crossunder(mt_nvi_10,mt_nvi_50)
cu_nvi_10_100 = ta.crossunder(mt_nvi_10,mt_nvi_100)
cu_nvi_10_200 = ta.crossunder(mt_nvi_10,mt_nvi_200)
cu_nvi_10_300 = ta.crossunder(mt_nvi_10,mt_nvi_300)
cu_nvi_50_100 = ta.crossunder(mt_nvi_50,mt_nvi_100)
cu_nvi_50_200 = ta.crossunder(mt_nvi_50,mt_nvi_200)
cu_nvi_50_300 = ta.crossunder(mt_nvi_50,mt_nvi_300)
cu_nvi_100_200 = ta.crossunder(mt_nvi_100,mt_nvi_200)
cu_nvi_100_300 = ta.crossunder(mt_nvi_100,mt_nvi_300)
cu_nvi_200_300 = ta.crossunder(mt_nvi_200,mt_nvi_300)
[mt_middle_mt_nvi, mt_upper_mt_nvi, mt_lower_mt_nvi] = ta.bb(mt_nvi_300, 5, 4)
mt_gap_nvi_10 = mt_nvi_10 - mt_middle_mt_nvi
mt_gap_nvi_50 = mt_nvi_50 - mt_middle_mt_nvi
mt_gap_nvi_100 = mt_nvi_100 - mt_middle_mt_nvi
mt_gap_nvi_200 = mt_nvi_200 - mt_middle_mt_nvi
mt_stdev_gap_nvi_10 = ta.stdev(mt_gap_nvi_10,look_back_period)
mt_stdev_gap_nvi_50 = ta.stdev(mt_gap_nvi_50,look_back_period)
mt_stdev_gap_nvi_100 = ta.stdev(mt_gap_nvi_100,look_back_period)
mt_stdev_gap_nvi_200 = ta.stdev(mt_gap_nvi_200,look_back_period)
mt_corelation_gap_prc_nvi_10 = ta.correlation(mt_gap_nvi_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_nvi_50 = ta.correlation(mt_gap_nvi_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_nvi_100 = ta.correlation(mt_gap_nvi_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_nvi_200 = ta.correlation(mt_gap_nvi_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_nvi_10 = ta.correlation(mt_gap_nvi_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_nvi_50 = ta.correlation(mt_gap_nvi_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_nvi_100 = ta.correlation(mt_gap_nvi_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_nvi_200 = ta.correlation(mt_gap_nvi_200,mt_gap_vol_200,look_back_period)
nvi_gap_prc_correlation = mt_stdev_gap_nvi_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_nvi_10 * 30 + mt_stdev_gap_nvi_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_nvi_50 * 6 + mt_stdev_gap_nvi_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_nvi_100 * 3 + mt_stdev_gap_nvi_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_nvi_200 * 1.5
nvi_gap_vol_correlation = mt_stdev_gap_nvi_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_nvi_10 * 30 + mt_stdev_gap_nvi_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_nvi_50 * 6 + mt_stdev_gap_nvi_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_nvi_100 * 3 + mt_stdev_gap_nvi_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_nvi_200 * 1.5
mt_corelation_gap_prc_vol_nvi = ta.correlation(nvi_gap_prc_correlation,nvi_gap_vol_correlation,look_back_period)
//pvi
pvi_val = ta.pvi
mt_pvi_10 = ta.ema(pvi_val, 10)
mt_pvi_50 = ta.ema(pvi_val, 50)
mt_pvi_100 = ta.ema(pvi_val, 100)
mt_pvi_200 = ta.ema(pvi_val, 200)
mt_pvi_300 = ta.ema(pvi_val, 300)
co_pvi_10_50 = ta.crossover(mt_pvi_10,mt_pvi_50)
co_pvi_10_100 = ta.crossover(mt_pvi_10,mt_pvi_100)
co_pvi_10_200 = ta.crossover(mt_pvi_10,mt_pvi_200)
co_pvi_10_300 = ta.crossover(mt_pvi_10,mt_pvi_300)
co_pvi_50_100 = ta.crossover(mt_pvi_50,mt_pvi_100)
co_pvi_50_200 = ta.crossover(mt_pvi_50,mt_pvi_200)
co_pvi_50_300 = ta.crossover(mt_pvi_50,mt_pvi_300)
co_pvi_100_200 = ta.crossover(mt_pvi_100,mt_pvi_200)
co_pvi_100_300 = ta.crossover(mt_pvi_100,mt_pvi_300)
co_pvi_200_300 = ta.crossover(mt_pvi_200,mt_pvi_300)
cu_pvi_10_50 = ta.crossunder(mt_pvi_10,mt_pvi_50)
cu_pvi_10_100 = ta.crossunder(mt_pvi_10,mt_pvi_100)
cu_pvi_10_200 = ta.crossunder(mt_pvi_10,mt_pvi_200)
cu_pvi_10_300 = ta.crossunder(mt_pvi_10,mt_pvi_300)
cu_pvi_50_100 = ta.crossunder(mt_pvi_50,mt_pvi_100)
cu_pvi_50_200 = ta.crossunder(mt_pvi_50,mt_pvi_200)
cu_pvi_50_300 = ta.crossunder(mt_pvi_50,mt_pvi_300)
cu_pvi_100_200 = ta.crossunder(mt_pvi_100,mt_pvi_200)
cu_pvi_100_300 = ta.crossunder(mt_pvi_100,mt_pvi_300)
cu_pvi_200_300 = ta.crossunder(mt_pvi_200,mt_pvi_300)
[mt_middle_mt_pvi, mt_upper_mt_pvi, mt_lower_mt_pvi] = ta.bb(mt_pvi_300, 5, 4)
mt_gap_pvi_10 = mt_pvi_10 - mt_middle_mt_pvi
mt_gap_pvi_50 = mt_pvi_50 - mt_middle_mt_pvi
mt_gap_pvi_100 = mt_pvi_100 - mt_middle_mt_pvi
mt_gap_pvi_200 = mt_pvi_200 - mt_middle_mt_pvi
mt_stdev_gap_pvi_10 = ta.stdev(mt_gap_pvi_10,look_back_period)
mt_stdev_gap_pvi_50 = ta.stdev(mt_gap_pvi_50,look_back_period)
mt_stdev_gap_pvi_100 = ta.stdev(mt_gap_pvi_100,look_back_period)
mt_stdev_gap_pvi_200 = ta.stdev(mt_gap_pvi_200,look_back_period)
mt_corelation_gap_prc_pvi_10 = ta.correlation(mt_gap_pvi_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_pvi_50 = ta.correlation(mt_gap_pvi_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_pvi_100 = ta.correlation(mt_gap_pvi_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_pvi_200 = ta.correlation(mt_gap_pvi_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_pvi_10 = ta.correlation(mt_gap_pvi_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_pvi_50 = ta.correlation(mt_gap_pvi_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_pvi_100 = ta.correlation(mt_gap_pvi_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_pvi_200 = ta.correlation(mt_gap_pvi_200,mt_gap_vol_200,look_back_period)
pvi_gap_prc_correlation = mt_stdev_gap_pvi_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_pvi_10 * 30 + mt_stdev_gap_pvi_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_pvi_50 * 6 + mt_stdev_gap_pvi_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_pvi_100 * 3 + mt_stdev_gap_pvi_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_pvi_200 * 1.5
pvi_gap_vol_correlation = mt_stdev_gap_pvi_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_pvi_10 * 30 + mt_stdev_gap_pvi_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_pvi_50 * 6 + mt_stdev_gap_pvi_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_pvi_100 * 3 + mt_stdev_gap_pvi_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_pvi_200 * 1.5
mt_corelation_gap_prc_vol_pvi = ta.correlation(pvi_gap_prc_correlation,pvi_gap_vol_correlation,look_back_period)
//obv
obv_val = ta.obv
mt_obv_10 = ta.ema(obv_val, 10)
mt_obv_50 = ta.ema(obv_val, 50)
mt_obv_100 = ta.ema(obv_val, 100)
mt_obv_200 = ta.ema(obv_val, 200)
mt_obv_300 = ta.ema(obv_val, 300)
co_obv_10_50 = ta.crossover(mt_obv_10,mt_obv_50)
co_obv_10_100 = ta.crossover(mt_obv_10,mt_obv_100)
co_obv_10_200 = ta.crossover(mt_obv_10,mt_obv_200)
co_obv_10_300 = ta.crossover(mt_obv_10,mt_obv_300)
co_obv_50_100 = ta.crossover(mt_obv_50,mt_obv_100)
co_obv_50_200 = ta.crossover(mt_obv_50,mt_obv_200)
co_obv_50_300 = ta.crossover(mt_obv_50,mt_obv_300)
co_obv_100_200 = ta.crossover(mt_obv_100,mt_obv_200)
co_obv_100_300 = ta.crossover(mt_obv_100,mt_obv_300)
co_obv_200_300 = ta.crossover(mt_obv_200,mt_obv_300)
cu_obv_10_50 = ta.crossunder(mt_obv_10,mt_obv_50)
cu_obv_10_100 = ta.crossunder(mt_obv_10,mt_obv_100)
cu_obv_10_200 = ta.crossunder(mt_obv_10,mt_obv_200)
cu_obv_10_300 = ta.crossunder(mt_obv_10,mt_obv_300)
cu_obv_50_100 = ta.crossunder(mt_obv_50,mt_obv_100)
cu_obv_50_200 = ta.crossunder(mt_obv_50,mt_obv_200)
cu_obv_50_300 = ta.crossunder(mt_obv_50,mt_obv_300)
cu_obv_100_200 = ta.crossunder(mt_obv_100,mt_obv_200)
cu_obv_100_300 = ta.crossunder(mt_obv_100,mt_obv_300)
cu_obv_200_300 = ta.crossunder(mt_obv_200,mt_obv_300)
[mt_middle_mt_obv, mt_upper_mt_obv, mt_lower_mt_obv] = ta.bb(mt_obv_300, 5, 4)
mt_gap_obv_10 = mt_obv_10 - mt_middle_mt_obv
mt_gap_obv_50 = mt_obv_50 - mt_middle_mt_obv
mt_gap_obv_100 = mt_obv_100 - mt_middle_mt_obv
mt_gap_obv_200 = mt_obv_200 - mt_middle_mt_obv
mt_stdev_gap_obv_10 = ta.stdev(mt_gap_obv_10,look_back_period)
mt_stdev_gap_obv_50 = ta.stdev(mt_gap_obv_50,look_back_period)
mt_stdev_gap_obv_100 = ta.stdev(mt_gap_obv_100,look_back_period)
mt_stdev_gap_obv_200 = ta.stdev(mt_gap_obv_200,look_back_period)
mt_corelation_gap_prc_obv_10 = ta.correlation(mt_gap_obv_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_obv_50 = ta.correlation(mt_gap_obv_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_obv_100 = ta.correlation(mt_gap_obv_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_obv_200 = ta.correlation(mt_gap_obv_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_obv_10 = ta.correlation(mt_gap_obv_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_obv_50 = ta.correlation(mt_gap_obv_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_obv_100 = ta.correlation(mt_gap_obv_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_obv_200 = ta.correlation(mt_gap_obv_200,mt_gap_vol_200,look_back_period)
obv_gap_prc_correlation = mt_stdev_gap_obv_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_obv_10 * 30 + mt_stdev_gap_obv_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_obv_50 * 6 + mt_stdev_gap_obv_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_obv_100 * 3 + mt_stdev_gap_obv_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_obv_200 * 1.5
obv_gap_vol_correlation = mt_stdev_gap_obv_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_obv_10 * 30 + mt_stdev_gap_obv_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_obv_50 * 6 + mt_stdev_gap_obv_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_obv_100 * 3 + mt_stdev_gap_obv_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_obv_200 * 1.5
mt_corelation_gap_prc_vol_obv = ta.correlation(obv_gap_prc_correlation,obv_gap_vol_correlation,look_back_period)
//pvt
pvt_val = ta.pvt
mt_pvt_10 = ta.ema(pvt_val, 10)
mt_pvt_50 = ta.ema(pvt_val, 50)
mt_pvt_100 = ta.ema(pvt_val, 100)
mt_pvt_200 = ta.ema(pvt_val, 200)
mt_pvt_300 = ta.ema(pvt_val, 300)
co_pvt_10_50 = ta.crossover(mt_pvt_10,mt_pvt_50)
co_pvt_10_100 = ta.crossover(mt_pvt_10,mt_pvt_100)
co_pvt_10_200 = ta.crossover(mt_pvt_10,mt_pvt_200)
co_pvt_10_300 = ta.crossover(mt_pvt_10,mt_pvt_300)
co_pvt_50_100 = ta.crossover(mt_pvt_50,mt_pvt_100)
co_pvt_50_200 = ta.crossover(mt_pvt_50,mt_pvt_200)
co_pvt_50_300 = ta.crossover(mt_pvt_50,mt_pvt_300)
co_pvt_100_200 = ta.crossover(mt_pvt_100,mt_pvt_200)
co_pvt_100_300 = ta.crossover(mt_pvt_100,mt_pvt_300)
co_pvt_200_300 = ta.crossover(mt_pvt_200,mt_pvt_300)
cu_pvt_10_50 = ta.crossunder(mt_pvt_10,mt_pvt_50)
cu_pvt_10_100 = ta.crossunder(mt_pvt_10,mt_pvt_100)
cu_pvt_10_200 = ta.crossunder(mt_pvt_10,mt_pvt_200)
cu_pvt_10_300 = ta.crossunder(mt_pvt_10,mt_pvt_300)
cu_pvt_50_100 = ta.crossunder(mt_pvt_50,mt_pvt_100)
cu_pvt_50_200 = ta.crossunder(mt_pvt_50,mt_pvt_200)
cu_pvt_50_300 = ta.crossunder(mt_pvt_50,mt_pvt_300)
cu_pvt_100_200 = ta.crossunder(mt_pvt_100,mt_pvt_200)
cu_pvt_100_300 = ta.crossunder(mt_pvt_100,mt_pvt_300)
cu_pvt_200_300 = ta.crossunder(mt_pvt_200,mt_pvt_300)
[mt_middle_mt_pvt, mt_upper_mt_pvt, mt_lower_mt_pvt] = ta.bb(mt_pvt_300, 5, 4)
mt_gap_pvt_10 = mt_pvt_10 - mt_middle_mt_pvt
mt_gap_pvt_50 = mt_pvt_50 - mt_middle_mt_pvt
mt_gap_pvt_100 = mt_pvt_100 - mt_middle_mt_pvt
mt_gap_pvt_200 = mt_pvt_200 - mt_middle_mt_pvt
mt_stdev_gap_pvt_10 = ta.stdev(mt_gap_pvt_10,look_back_period)
mt_stdev_gap_pvt_50 = ta.stdev(mt_gap_pvt_50,look_back_period)
mt_stdev_gap_pvt_100 = ta.stdev(mt_gap_pvt_100,look_back_period)
mt_stdev_gap_pvt_200 = ta.stdev(mt_gap_pvt_200,look_back_period)
mt_corelation_gap_prc_pvt_10 = ta.correlation(mt_gap_pvt_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_pvt_50 = ta.correlation(mt_gap_pvt_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_pvt_100 = ta.correlation(mt_gap_pvt_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_pvt_200 = ta.correlation(mt_gap_pvt_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_pvt_10 = ta.correlation(mt_gap_pvt_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_pvt_50 = ta.correlation(mt_gap_pvt_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_pvt_100 = ta.correlation(mt_gap_pvt_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_pvt_200 = ta.correlation(mt_gap_pvt_200,mt_gap_vol_200,look_back_period)
pvt_gap_prc_correlation = mt_stdev_gap_pvt_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_pvt_10 * 30 + mt_stdev_gap_pvt_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_pvt_50 * 6 + mt_stdev_gap_pvt_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_pvt_100 * 3 + mt_stdev_gap_pvt_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_pvt_200 * 1.5
pvt_gap_vol_correlation = mt_stdev_gap_pvt_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_pvt_10 * 30 + mt_stdev_gap_pvt_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_pvt_50 * 6 + mt_stdev_gap_pvt_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_pvt_100 * 3 + mt_stdev_gap_pvt_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_pvt_200 * 1.5
mt_corelation_gap_prc_vol_pvt = ta.correlation(pvt_gap_prc_correlation,pvt_gap_vol_correlation,look_back_period)
//tr
trr_val = ta.tr
mt_trr_10 = ta.ema(trr_val, 10)
mt_trr_50 = ta.ema(trr_val, 50)
mt_trr_100 = ta.ema(trr_val, 100)
mt_trr_200 = ta.ema(trr_val, 200)
mt_trr_300 = ta.ema(trr_val, 300)
co_trr_10_50 = ta.crossover(mt_trr_10,mt_trr_50)
co_trr_10_100 = ta.crossover(mt_trr_10,mt_trr_100)
co_trr_10_200 = ta.crossover(mt_trr_10,mt_trr_200)
co_trr_10_300 = ta.crossover(mt_trr_10,mt_trr_300)
co_trr_50_100 = ta.crossover(mt_trr_50,mt_trr_100)
co_trr_50_200 = ta.crossover(mt_trr_50,mt_trr_200)
co_trr_50_300 = ta.crossover(mt_trr_50,mt_trr_300)
co_trr_100_200 = ta.crossover(mt_trr_100,mt_trr_200)
co_trr_100_300 = ta.crossover(mt_trr_100,mt_trr_300)
co_trr_200_300 = ta.crossover(mt_trr_200,mt_trr_300)
cu_trr_10_50 = ta.crossunder(mt_trr_10,mt_trr_50)
cu_trr_10_100 = ta.crossunder(mt_trr_10,mt_trr_100)
cu_trr_10_200 = ta.crossunder(mt_trr_10,mt_trr_200)
cu_trr_10_300 = ta.crossunder(mt_trr_10,mt_trr_300)
cu_trr_50_100 = ta.crossunder(mt_trr_50,mt_trr_100)
cu_trr_50_200 = ta.crossunder(mt_trr_50,mt_trr_200)
cu_trr_50_300 = ta.crossunder(mt_trr_50,mt_trr_300)
cu_trr_100_200 = ta.crossunder(mt_trr_100,mt_trr_200)
cu_trr_100_300 = ta.crossunder(mt_trr_100,mt_trr_300)
cu_trr_200_300 = ta.crossunder(mt_trr_200,mt_trr_300)
[mt_middle_mt_trr, mt_upper_mt_trr, mt_lower_mt_trr] = ta.bb(mt_trr_300, 5, 4)
mt_gap_trr_10 = mt_trr_10 - mt_middle_mt_trr
mt_gap_trr_50 = mt_trr_50 - mt_middle_mt_trr
mt_gap_trr_100 = mt_trr_100 - mt_middle_mt_trr
mt_gap_trr_200 = mt_trr_200 - mt_middle_mt_trr
mt_stdev_gap_trr_10 = ta.stdev(mt_gap_trr_10,look_back_period)
mt_stdev_gap_trr_50 = ta.stdev(mt_gap_trr_50,look_back_period)
mt_stdev_gap_trr_100 = ta.stdev(mt_gap_trr_100,look_back_period)
mt_stdev_gap_trr_200 = ta.stdev(mt_gap_trr_200,look_back_period)
mt_corelation_gap_prc_trr_10 = ta.correlation(mt_gap_trr_10,mt_gap_prc_10,look_back_period)
mt_corelation_gap_prc_trr_50 = ta.correlation(mt_gap_trr_50,mt_gap_prc_50,look_back_period)
mt_corelation_gap_prc_trr_100 = ta.correlation(mt_gap_trr_100,mt_gap_prc_100,look_back_period)
mt_corelation_gap_prc_trr_200 = ta.correlation(mt_gap_trr_200,mt_gap_prc_200,look_back_period)
mt_corelation_gap_vol_trr_10 = ta.correlation(mt_gap_trr_10,mt_gap_vol_10,look_back_period)
mt_corelation_gap_vol_trr_50 = ta.correlation(mt_gap_trr_50,mt_gap_vol_50,look_back_period)
mt_corelation_gap_vol_trr_100 = ta.correlation(mt_gap_trr_100,mt_gap_vol_100,look_back_period)
mt_corelation_gap_vol_trr_200 = ta.correlation(mt_gap_trr_200,mt_gap_vol_200,look_back_period)
trr_gap_prc_correlation = mt_stdev_gap_trr_10 * mt_stdev_gap_prc_10 * mt_corelation_gap_prc_trr_10 * 30 + mt_stdev_gap_trr_50 * mt_stdev_gap_prc_50 * mt_corelation_gap_prc_trr_50 * 6 + mt_stdev_gap_trr_100 * mt_stdev_gap_prc_100 * mt_corelation_gap_prc_trr_100 * 3 + mt_stdev_gap_trr_200 * mt_stdev_gap_prc_200 * mt_corelation_gap_prc_trr_200 * 1.5
trr_gap_vol_correlation = mt_stdev_gap_trr_10 * mt_stdev_gap_vol_10 * mt_corelation_gap_vol_trr_10 * 30 + mt_stdev_gap_trr_50 * mt_stdev_gap_vol_50 * mt_corelation_gap_vol_trr_50 * 6 + mt_stdev_gap_trr_100 * mt_stdev_gap_vol_100 * mt_corelation_gap_vol_trr_100 * 3 + mt_stdev_gap_trr_200 * mt_stdev_gap_vol_200 * mt_corelation_gap_vol_trr_200 * 1.5
mt_corelation_gap_prc_vol_trr = ta.correlation(trr_gap_prc_correlation,trr_gap_vol_correlation,look_back_period)
//positive signal
if co_rsi_10_50 or co_mfi_10_50 or co_cmo_10_50 or co_mom_10_50 or co_cog_10_50 or co_dmi_10_50 or co_bop_10_50 or co_sto_10_50 or co_swma_10_50 or co_tsi_10_50 or co_wpr_10_50 or co_acc_10_50 or co_iii_10_50 or co_nvi_10_50 or co_pvi_10_50 or co_obv_10_50 or co_pvt_10_50 or co_trr_10_50 //or co_vwap_10_50 
    positive_value := positive_value + 180
else if co_rsi_10_100 or co_mfi_10_100 or co_cmo_10_100 or co_mom_10_100 or co_cog_10_100 or co_dmi_10_100 or co_bop_10_100 or co_sto_10_100 or co_swma_10_100 or co_tsi_10_100 or co_wpr_10_100 or co_acc_10_100 or co_iii_10_100 or co_nvi_10_100 or co_pvi_10_100 or co_obv_10_100 or co_pvt_10_100 or co_trr_10_100 //or co_vwap_10_100 
    positive_value := positive_value + 90
else if co_rsi_10_200 or co_mfi_10_200 or co_cmo_10_200 or co_mom_10_200 or co_cog_10_200 or co_dmi_10_200 or co_bop_10_200 or co_sto_10_200 or co_swma_10_200 or co_tsi_10_200 or co_wpr_10_200 or co_acc_10_200 or co_iii_10_200 or co_nvi_10_200 or co_pvi_10_200 or co_obv_10_200 or co_pvt_10_200 or co_trr_10_200 //or co_vwap_10_200 
    positive_value := positive_value + 45
else if co_rsi_10_300 or co_mfi_10_300 or co_cmo_10_300 or co_mom_10_300 or co_cog_10_300 or co_dmi_10_300 or co_bop_10_300 or co_sto_10_300 or co_swma_10_300 or co_tsi_10_300 or co_wpr_10_300 or co_acc_10_300 or co_iii_10_300 or co_nvi_10_300 or co_pvi_10_300 or co_obv_10_300 or co_pvt_10_300 or co_trr_10_300 //or co_vwap_10_300 
    positive_value := positive_value + 30
else if co_rsi_50_100 or co_mfi_50_100 or co_cmo_50_100 or co_mom_50_100 or co_cog_50_100 or co_dmi_50_100 or co_bop_50_100 or co_sto_50_100 or co_swma_50_100 or co_tsi_50_100 or co_wpr_50_100 or co_acc_50_100 or co_iii_50_100 or co_nvi_50_100 or co_pvi_50_100 or co_obv_50_100 or co_pvt_50_100 or co_trr_50_100 //or co_vwap_50_100 
    positive_value := positive_value + 18
else if co_rsi_50_200 or co_mfi_50_200 or co_cmo_50_200 or co_mom_50_200 or co_cog_50_200 or co_dmi_50_200 or co_bop_50_200 or co_sto_50_200 or co_swma_50_200 or co_tsi_50_200 or co_wpr_50_200 or co_acc_50_200 or co_iii_50_200 or co_nvi_50_200 or co_pvi_50_200 or co_obv_50_200 or co_pvt_50_200 or co_trr_50_200 //or co_vwap_50_200 
    positive_value := positive_value + 9
else if co_rsi_50_300 or co_mfi_50_300 or co_cmo_50_300 or co_mom_50_300 or co_cog_50_300 or co_dmi_50_300 or co_bop_50_300 or co_sto_50_300 or co_swma_50_300 or co_tsi_50_300 or co_wpr_50_300 or co_acc_50_300 or co_iii_50_300 or co_nvi_50_300 or co_pvi_50_300 or co_obv_50_300 or co_pvt_50_300 or co_trr_50_300 //or co_vwap_50_300 
    positive_value := positive_value + 6
else if co_rsi_100_200 or co_mfi_100_200 or co_cmo_100_200 or co_mom_100_200 or co_cog_100_200 or co_dmi_100_200 or co_bop_100_200 or co_sto_100_200 or co_swma_100_200 or co_tsi_100_200 or co_wpr_100_200 or co_acc_100_200 or co_iii_100_200 or co_nvi_100_200 or co_pvi_100_200 or co_obv_100_200 or co_pvt_100_200 or co_trr_100_200 //or co_vwap_100_200 
    positive_value := positive_value + 4.5
else if co_rsi_100_300 or co_mfi_100_300 or co_cmo_100_300 or co_mom_100_300 or co_cog_100_300 or co_dmi_100_300 or co_bop_100_300 or co_sto_100_300 or co_swma_100_300 or co_tsi_100_300 or co_wpr_100_300 or co_acc_100_300 or co_iii_100_300 or co_nvi_100_300 or co_pvi_100_300 or co_obv_100_300 or co_pvt_100_300 or co_trr_100_300 //or co_vwap_100_300 
    positive_value := positive_value + 3
else if co_rsi_200_300 or co_mfi_200_300 or co_cmo_200_300 or co_mom_200_300 or co_cog_200_300 or co_dmi_200_300 or co_bop_200_300 or co_sto_200_300 or co_swma_200_300 or co_tsi_200_300 or co_wpr_200_300 or co_acc_200_300 or co_iii_200_300 or co_nvi_200_300 or co_pvi_200_300 or co_obv_200_300 or co_pvt_200_300 or co_trr_200_300 //or co_vwap_200_300 
    positive_value := positive_value + 1.5
else if cu_rsi_10_50 or cu_mfi_10_50 or cu_cmo_10_50 or cu_mom_10_50 or cu_cog_10_50 or cu_dmi_10_50 or cu_bop_10_50 or cu_sto_10_50 or cu_swma_10_50 or cu_tsi_10_50 or cu_wpr_10_50 or cu_acc_10_50 or cu_iii_10_50 or cu_nvi_10_50 or cu_pvi_10_50 or cu_obv_10_50 or cu_pvt_10_50 or cu_trr_10_50 //or cu_vwap_10_50 
    positive_value := positive_value - 180
else if cu_rsi_10_100 or cu_mfi_10_100 or cu_cmo_10_100 or cu_mom_10_100 or cu_cog_10_100 or cu_dmi_10_100 or cu_bop_10_100 or cu_sto_10_100 or cu_swma_10_100 or cu_tsi_10_100 or cu_wpr_10_100 or cu_acc_10_100 or cu_iii_10_100 or cu_nvi_10_100 or cu_pvi_10_100 or cu_obv_10_100 or cu_pvt_10_100 or cu_trr_10_100 //or cu_vwap_10_100 
    positive_value := positive_value - 90
else if cu_rsi_10_200 or cu_mfi_10_200 or cu_cmo_10_200 or cu_mom_10_200 or cu_cog_10_200 or cu_dmi_10_200 or cu_bop_10_200 or cu_sto_10_200 or cu_swma_10_200 or cu_tsi_10_200 or cu_wpr_10_200 or cu_acc_10_200 or cu_iii_10_200 or cu_nvi_10_200 or cu_pvi_10_200 or cu_obv_10_200 or cu_pvt_10_200 or cu_trr_10_200 //or cu_vwap_10_200 
    positive_value := positive_value - 45
else if cu_rsi_10_300 or cu_mfi_10_300 or cu_cmo_10_300 or cu_mom_10_300 or cu_cog_10_300 or cu_dmi_10_300 or cu_bop_10_300 or cu_sto_10_300 or cu_swma_10_300 or cu_tsi_10_300 or cu_wpr_10_300 or cu_acc_10_300 or cu_iii_10_300 or cu_nvi_10_300 or cu_pvi_10_300 or cu_obv_10_300 or cu_pvt_10_300 or cu_trr_10_300 //or cu_vwap_10_300 
    positive_value := positive_value - 30
else if cu_rsi_50_100 or cu_mfi_50_100 or cu_cmo_50_100 or cu_mom_50_100 or cu_cog_50_100 or cu_dmi_50_100 or cu_bop_50_100 or cu_sto_50_100 or cu_swma_50_100 or cu_tsi_50_100 or cu_wpr_50_100 or cu_acc_50_100 or cu_iii_50_100 or cu_nvi_50_100 or cu_pvi_50_100 or cu_obv_50_100 or cu_pvt_50_100 or cu_trr_50_100 //or cu_vwap_50_100 
    positive_value := positive_value - 18
else if cu_rsi_50_200 or cu_mfi_50_200 or cu_cmo_50_200 or cu_mom_50_200 or cu_cog_50_200 or cu_dmi_50_200 or cu_bop_50_200 or cu_sto_50_200 or cu_swma_50_200 or cu_tsi_50_200 or cu_wpr_50_200 or cu_acc_50_200 or cu_iii_50_200 or cu_nvi_50_200 or cu_pvi_50_200 or cu_obv_50_200 or cu_pvt_50_200 or cu_trr_50_200 //or cu_vwap_50_200 
    positive_value := positive_value - 9
else if cu_rsi_50_300 or cu_mfi_50_300 or cu_cmo_50_300 or cu_mom_50_300 or cu_cog_50_300 or cu_dmi_50_300 or cu_bop_50_300 or cu_sto_50_300 or cu_swma_50_300 or cu_tsi_50_300 or cu_wpr_50_300 or cu_acc_50_300 or cu_iii_50_300 or cu_nvi_50_300 or cu_pvi_50_300 or cu_obv_50_300 or cu_pvt_50_300 or cu_trr_50_300 //or cu_vwap_50_300 
    positive_value := positive_value - 6
else if cu_rsi_100_200 or cu_mfi_100_200 or cu_cmo_100_200 or cu_mom_100_200 or cu_cog_100_200 or cu_dmi_100_200 or cu_bop_100_200 or cu_sto_100_200 or cu_swma_100_200 or cu_tsi_100_200 or cu_wpr_100_200 or cu_acc_100_200 or cu_iii_100_200 or cu_nvi_100_200 or cu_pvi_100_200 or cu_obv_100_200 or cu_pvt_100_200 //or cu_trr_100_200 or cu_vwap_100_200
    positive_value := positive_value - 4.5
else if cu_rsi_100_300 or cu_mfi_100_300 or cu_cmo_100_300 or cu_mom_100_300 or cu_cog_100_300 or cu_dmi_100_300 or cu_bop_100_300 or cu_sto_100_300 or cu_swma_100_300 or cu_tsi_100_300 or cu_wpr_100_300 or cu_acc_100_300 or cu_iii_100_300 or cu_nvi_100_300 or cu_pvi_100_300 or cu_obv_100_300 or cu_pvt_100_300 //or cu_trr_100_300 or cu_vwap_100_300 
    positive_value := positive_value - 3
else if cu_rsi_200_300 or cu_mfi_200_300 or cu_cmo_200_300 or cu_mom_200_300 or cu_cog_200_300 or cu_dmi_200_300 or cu_bop_200_300 or cu_sto_200_300 or cu_swma_200_300 or cu_tsi_200_300 or cu_wpr_200_300 or cu_acc_200_300 or cu_iii_200_300 or cu_nvi_200_300 or cu_pvi_200_300 or cu_obv_200_300 or cu_pvt_200_300 //or cu_trr_200_300 or cu_vwap_200_300
    positive_value := positive_value - 1.5
final_graph =  trr_gap_prc_correlation * trr_gap_vol_correlation * mt_corelation_gap_prc_vol_trr + pvt_gap_prc_correlation * pvt_gap_vol_correlation * mt_corelation_gap_prc_vol_pvt + obv_gap_prc_correlation * obv_gap_vol_correlation * mt_corelation_gap_prc_vol_obv + pvi_gap_prc_correlation * pvi_gap_vol_correlation * mt_corelation_gap_prc_vol_pvi + nvi_gap_prc_correlation * nvi_gap_vol_correlation * mt_corelation_gap_prc_vol_nvi + iii_gap_prc_correlation * iii_gap_vol_correlation * mt_corelation_gap_prc_vol_iii + acc_gap_prc_correlation * acc_gap_vol_correlation * mt_corelation_gap_prc_vol_acc + wpr_gap_prc_correlation * wpr_gap_vol_correlation * mt_corelation_gap_prc_vol_wpr + tsi_gap_prc_correlation * tsi_gap_vol_correlation * mt_corelation_gap_prc_vol_tsi + sto_gap_prc_correlation * sto_gap_vol_correlation * mt_corelation_gap_prc_vol_sto + bop_gap_prc_correlation * bop_gap_vol_correlation * mt_corelation_gap_prc_vol_bop + dmi_gap_prc_correlation * dmi_gap_vol_correlation * mt_corelation_gap_prc_vol_dmi + cog_gap_prc_correlation * cog_gap_vol_correlation * mt_corelation_gap_prc_vol_cog + mom_gap_prc_correlation * mom_gap_vol_correlation * mt_corelation_gap_prc_vol_mom + cmo_gap_prc_correlation * cmo_gap_vol_correlation * mt_corelation_gap_prc_vol_cmo + mfi_gap_prc_correlation * mfi_gap_vol_correlation * mt_corelation_gap_prc_vol_mfi + rsi_gap_prc_correlation * rsi_gap_vol_correlation * mt_corelation_gap_prc_vol_rsi + swma_gap_prc_correlation * swma_gap_vol_correlation * mt_corelation_gap_prc_vol_swma //+ vwap_gap_prc_correlation * vwap_gap_vol_correlation * mt_corelation_gap_prc_vol_vwap //+ wvad_gap_prc_correlation * wvad_gap_vol_correlation * mt_corelation_gap_prc_vol_wvad
positivesignal_price_corelation = (ta.stdev((positive_value - positive_value[1]),look_back_period)) * mt_stdev_gap_prc_10 * ta.correlation(mt_stdev_gap_prc_10,(ta.stdev((positive_value - positive_value[1]),look_back_period)),look_back_period)
positivesignal_volume_corelation = (ta.stdev((positive_value - positive_value[1]),look_back_period)) * mt_stdev_gap_vol_10 * ta.correlation(mt_stdev_gap_vol_10,(ta.stdev((positive_value - positive_value[1]),look_back_period)),look_back_period)
positivesignal_cumilative_corelation = ta.correlation(positivesignal_volume_corelation,positivesignal_price_corelation,look_back_period)
positivesignal_finalgraph_2 = positivesignal_price_corelation * positivesignal_volume_corelation * positivesignal_cumilative_corelation
[mt_middle_fg, mt_upper_fg, mt_lower_fg] = ta.bb(final_graph, 5, 4)
[mt_middle_ps, mt_upper_ps, mt_lower_ps] = ta.bb(positivesignal_finalgraph_2, 5, 4)
stdev_finalgraph = ta.stdev((final_graph - mt_middle_fg),look_back_period)
stdev_signal = ta.stdev((positivesignal_finalgraph_2 - mt_middle_ps),look_back_period)
cor_signalgraph_volume = ta.correlation(stdev_finalgraph,stdev_signal,look_back_period)
final_graph_3 = stdev_finalgraph*stdev_signal*cor_signalgraph_volume
change_ema_final_graph = final_graph_3 - final_graph_3[1]
ema_change_ema_final_graph_1 = final_graph - final_graph[1]
ema_change_ema_final_graph_2 = ema_change_ema_final_graph_1 - ema_change_ema_final_graph_1[1]
ema_change_ema_final_graph_3 = ema_change_ema_final_graph_2 - ema_change_ema_final_graph_2[1]
ema_change_ema_final_graph_4 = ema_change_ema_final_graph_3 - ema_change_ema_final_graph_3[1]
ema_change_ema_final_graph_5 = ema_change_ema_final_graph_4 - ema_change_ema_final_graph_4[1]
buy_1 = ta.cross(change_ema_final_graph,0) and ta.falling(ma_9,6)
buy_2 = ta.cross(ema_change_ema_final_graph_1,0)
buy_3 = ta.cross(ema_change_ema_final_graph_2,0)
buy_4 = ta.cross(ema_change_ema_final_graph_3,0)
buy_5 = ta.cross(ema_change_ema_final_graph_4,0)
buy_6 = ta.cross(ema_change_ema_final_graph_5,0)
// Trading Arrangement
//Buy and Sell range
hi_high = ta.highest(buy_comand_high_value,buy_or_sell_lookback)
lowerlowest = ta.lowest(buy_comand_low_value,buy_or_sell_lookback)
var  float hi_point = na
var  float low_point = na
for i = 1 to 0 by 1
    if hi_high[i] < hi_high[i+1]
        hi_point := hi_high[i+1]
    
    else if lowerlowest [i] > lowerlowest [i+1]
        low_point := lowerlowest [i+1]
//Trading Arrangement
// Generate sell signal
var bool sell_comand = false
[pinesupertrend, pinedirection] = ta.supertrend(factor_of_supertrend_to_determine_sell_comand, artperiod_of_supertrend_to_determine_sell_comand)
if pinedirection[1] < 0 and pinedirection > 0
    sell_comand := true
else if pinedirection > 0 and (buy_1 or buy_2 or buy_3 or buy_4 or buy_5 or buy_6)
    sell_comand := true
else
    sell_comand := false
//Intermediate selling count & Count of open trades
var int open_trades = 0
var int x = 0
if strategy.position_size == 0
    open_trades := 0
else if strategy.position_size[1] == 0 and strategy.position_size > 0
    open_trades := 1
else if strategy.position_size[1] < strategy.position_size
    open_trades := open_trades + 1
else if strategy.position_size[1] > strategy.position_size and strategy.position_size > 0
    open_trades := open_trades - 1
else
    open_trades := open_trades
// Max count of open trades
var float max_open_trades = 0
if strategy.opentrades > max_open_trades
    max_open_trades := strategy.opentrades
else
    max_open_trades := max_open_trades
// Contrall Selling 
var bool int_selling = false
if strategy.opentrades == strategy.opentrades [1] and intermidiate_selling == true
    int_selling := true
else if strategy.opentrades  == strategy.opentrades [1] - 1 or intermidiate_selling == false
    int_selling := false
// Calculation of profit precentage
var float cal_profit_precentage = 0
if strategy.position_size == 0
    cal_profit_precentage := na
else if strategy.position_size > 0
    cal_profit_precentage := (profit_precentage/100) + 1
else 
    cal_profit_precentage := cal_profit_precentage
//Open trades entry price
var float result = 0
for i = 0 to strategy.opentrades-1
    result := strategy.opentrades.entry_price(i) 
var int y = 0
if strategy.position_size[1] > 0 and strategy.position_size == 0
    y := 0
else if strategy.position_size[1] == 0 and strategy.position_size > 0
    y := 1
else if strategy.position_size[1] > strategy.position_size and strategy.position_size[1] > 0 and strategy.position_size > 0
    y := y - 1
else if strategy.position_size[1] < strategy.position_size and strategy.position_size[1] > 0 and strategy.position_size > 0
    y := y + 1
    
m = result
// Fund management - r value calculation
var float int_val_3 = 0
var float installment_2 = 0
var float installment_3 = 0
var float installment_4 = 0
var float r_f = 0
var float int_val = 0
if int_cap * int_val_prc/100 <= 15 and int_val_allocation != "USDT"
    int_val := 15
if int_val_prc <= 15 and int_val_allocation == "USDT"
    int_val := 15
if int_cap * int_val_prc/100 > 15 and int_val_allocation != "USDT"
    int_val := int_cap * int_val_prc/100
if int_val_prc > 15 and int_val_allocation == "USDT"
    int_val := int_val_prc
    
var float r_change = 0
if r_finetune == false
    r_change := r_change_input
else if r_finetune == true
    r_change := 0.001
    
for i = 0 to piramiding+2 by 1
    if i == 0
        int_val_3 := int_val
    if i <= piramiding
        installment_2 := int_val_3*math.pow((1 + r/100),i)
    if i >= 0 and i < piramiding+1
        installment_3 := installment_3 + installment_2
    if i == piramiding+1
        installment_4 := installment_3 - installment_3[1]
if installment_4 < int_cap
    r := r + r_change
else if installment_4 > int_cap
    r := r - r_change
else 
    r := r
    
if r[1] < r
    r_f := r[1] 
//Fund Management
var float total_investment = int_cap
if strategy.position_size[1] >0 and strategy.position_size == 0
    total_investment := int_cap + strategy.netprofit
else 
    total_investment := total_investment
    
// Stratergy possition size
var float last_purchase = 0
if strategy.position_size[1] < strategy.position_size and strategy.position_size[1] == 0
    last_purchase := strategy.position_size
else if strategy.position_size[1] < strategy.position_size and strategy.position_size[1] > 0
    last_purchase := (strategy.position_size - strategy.position_size[1])
else if strategy.position_size == 0
    last_purchase :=  0
else
    last_purchase := last_purchase
//Quantity Calculation
var float value_of_purchase = 0
var float initial_quantity = 0
if purchaseing_method == 'Equal amounts' and dev_of_equal_amounts == 'Equal amounts with fixed entries'
    value_of_purchase := (total_investment/(piramiding + 1))
else if purchaseing_method == 'Equal amounts' and dev_of_equal_amounts == 'Equal amounts with fixed USDT'
    value_of_purchase := int_val_prc
if purchaseing_method == 'Incremental amounts' and int_val_allocation == '% of cumilative investment' 
    value_of_purchase := (total_investment * (int_val_prc/100))* math.pow((1+(r_value/100)),y)
else if purchaseing_method == 'Incremental amounts' and int_val_allocation == 'USDT' 
    value_of_purchase := (int_val_prc)* math.pow((1 + (r_value/100)),y)
    
var float final_value_of_purchase = 0
if value_of_purchase <= 21
    final_value_of_purchase := 21
else 
    final_value_of_purchase := value_of_purchase
    
quantity = final_value_of_purchase/low
var float r_ff = 0
if purchaseing_method == 'Equal amounts'
    r_ff := na
else 
    r_ff := r_f
    
//current expenditure
currentexpenditure() =>
    result_v2 = 0.
    for i = 0 to strategy.opentrades-1
        result_v2 += strategy.opentrades.entry_price(i) * strategy.opentrades.size(i)
    strategy.opentrades > 0 ? result_v2  : na
//cash in hand
var float cash_in_hand = 0
if currentexpenditure() > 0
    cash_in_hand := total_investment  - currentexpenditure()
else
    cash_in_hand := total_investment
//unrealised profit
unrealised_profit = (high+low)/2*strategy.position_size - currentexpenditure()
//last entry price
lastentryprice() =>
    result_v3 = 0.
    for i = 0 to strategy.opentrades-1
        result_v3 := strategy.opentrades.entry_price(i)
    strategy.opentrades > 0 ? result_v3  : na
    
//Swing trade and identify lower point to sell
var float last_entry_price = 0
var index_of_array_maxval = 0
var index_of_array_minval = 0
var entryprice = array.new_float(500)
if currentexpenditure() [1] < currentexpenditure()
    last_entry_price := lastentryprice()
    array.push(entryprice, last_entry_price)
else if strategy.opentrades [1] == 0 and strategy.opentrades > 0
    last_entry_price := lastentryprice()
    array.push(entryprice, last_entry_price)
else if strategy.position_size == 0
    last_entry_price := 0
    array.clear(entryprice)
array_maxval = array.max(entryprice)
array_minval = array.min(entryprice)
if ta.sma(close,9)> array_minval*(1 + profit_precentage_intermidiate/100)
    array.clear(entryprice)
    
// Identify higher entry values to sell off
var high_enrty_price = array.new_float(500)
var float last_entry_high_price = 0
var int index_change = 0
var float current_high_val = 0
if (strategy.opentrades [1] == 0 and strategy.opentrades > 0) or (strategy.opentrades [1] < strategy.opentrades)
    last_entry_high_price := lastentryprice()
    array.push(high_enrty_price, last_entry_high_price)
    array.sort(high_enrty_price, order.descending)
else if strategy.position_size == 0 and strategy.position_size[1] > 0
    array.clear(high_enrty_price)
    
if strategy.opentrades > 0 and strategy.opentrades[1] == 0
    index_change := index_change
else if strategy.position_size[1] > strategy.position_size
    index_change := index_change + 1
else if strategy.position_size == 0 
    index_change := 0
if index_change >= 0 and strategy.opentrades > 0
    current_high_val := array.get(high_enrty_price, index_change)
else 
    current_high_val := na
//Calculation of profit line
var float profit_line = 0
profit_line_nf = strategy.position_avg_price * cal_profit_precentage
//strategy.position_avg_price * cal_profit_precentage
if strategy.position_size[1] == 0 and strategy.position_size > 0
    profit_line := profit_line_nf
else if strategy.position_size [1] < strategy.position_size
    profit_line := profit_line - profit_line_nf[1] + profit_line_nf
else if strategy.position_size [1] > strategy.position_size
    profit_line := profit_line [1]
else if strategy.opentrades == 0
    profit_line := na
    
if ajust_profit_line == true
    profit_line := profit_line
else
    profit_line := profit_line_nf
    
// count of max trade count
var int max_trade_count = 0
if purchaseing_method == 'Incremental amounts'
    max_trade_count := piramiding - 1
else if purchaseing_method == 'Equal amounts' and dev_of_equal_amounts == 'Equal amounts with fixed USDT'
    max_trade_count := math.floor(total_investment / int_val_prc) - 1
else if purchaseing_method == 'Equal amounts' and dev_of_equal_amounts == 'Equal amounts with fixed entries'
    max_trade_count := piramiding - 1
//Strategy short deu to downfall
st_short_point = ta.crossunder(ta.sma(source_of_downfall_deviation,period_of_downfall_deviation), current_high_val*100/(100 + downfall_deviation))
st_long_point = ta.crossover(ta.sma(source_of_downfall_deviation,period_of_downfall_deviation), current_high_val*100/(100 + 2*downfall_deviation))
buy_crossover_1 = ta.crossover(al_smma1,smma2)
compulsary_sell = (ta.crossunder(al_smma1,smma1) and profit_line < ma_9 and smma1 > hi_point)
//Trading
if ta.crossover(al_smma1,smma1) and smma3 <= smma2 
    strategy.entry("long", strategy.long, comment = strategy_long_buy_comment, qty = quantity)
else if ((buy_5 or buy_6) or buy_crossover_1) and window and strategy.position_size == 0 and source_of_lower_point < low_point
    strategy.entry("long", strategy.long, comment = strategy_long_buy_comment, qty = quantity)
else if ((buy_1 or buy_3 or buy_5 or buy_6 )  and window and ma_9 < strategy.position_avg_price *.99 and  strategy.position_size > 0 ) and strategy.opentrades <= (max_trade_count * 0.75) and source_of_lower_point < low_point //and ta.falling(close,2)
    strategy.entry("long", strategy.long, comment = strategy_short_buy_comment, qty = quantity)
else if ((buy_1)  and ma_9 < strategy.position_avg_price and window and  strategy.position_size > 0 ) and strategy.opentrades > (max_trade_count * 0.75) and strategy.opentrades <= max_trade_count and source_of_lower_point < low_point //and ta.falling(close,2)
    strategy.entry("long", strategy.long, comment = strategy_short_buy_comment, qty = quantity)
//intermediate selling
if ta.sma(source_of_intermidiate_sell_determination_sma,period_of_intermidiate_sell_determination_sma)> array_minval*(1 + profit_precentage_intermidiate/100) and int_selling == true and hi_point[1] and low_point and strategy.position_avg_price > ma_9
    strategy.close("long", qty = last_purchase[x], comment = strategy_short_sell_comment)
    
//Downtrend down trading
if (ta.rising(source_of_downtrend_sell_price_ricing_determination,period_of_downtrend_sell_price_ricing_determination) ) and ta.sma(source_of_downtrend_sell_determination_sma,period_of_downtrend_sell_determination_sma) < current_high_val*100/(down_trend_threshhold + 100) and down_trend_selling == true and ma_9 < strategy.position_avg_price *.99
    strategy.close("long", qty = last_purchase[x], comment = strategy_short_sell_comment)
//strategy close comand
if ((sell_comand==true) and profit_line < ma_9 and (hi_point[1] and (buy_2 or buy_3 or buy_4 or buy_6)) and al_smma1 < smma2) or compulsary_sell
    strategy.close_all(comment = strategy_long_sell_comment)
//Graphs
//color change
plot(r_ff,                                      title = "Calculated R value",       color = color.new(color.white,100))
plot(strategy.position_avg_price,               title = "AVG",                      color = color.green,                    style = plot.style_circles)
plot(profit_line,                               title = "Adj.Profit",               color = color.yellow,                   style = plot.style_circles)
plot(strategy.opentrades,                       title = "Numbers of open trades",   color = color.new(color.white,100))
plot(max_open_trades,                           title = "Max Opentrades",           color = color.new(color.red,100))
plot(strategy.netprofit,                        title = "Cumilative Profit",        color = color.new(color.white,100))
plot(unrealised_profit,                         title = "Unrealised Profit",        color = color.new(color.blue,100))
plot(currentexpenditure(),                      title = "Current Expenditure",      color = color.new(color.blue,100))
plot(cash_in_hand,                              title = "Cash in Hand",             color = color.new(color.blue,100))
plot(total_investment,                          title = "Total Investment",         color = color.new(color.white,100))
plot(last_purchase,                             title = "Quantity Last purchase",   color = color.new(color.white,100))
plot(final_value_of_purchase,                   title = "Value of Purchase",        color = color.new(color.white,100))
plot(array_minval,                              title = "Low value",                color = color.new(color.white,50),      style = plot.style_circles)
plot(current_high_val,                          title = "High Value",               color = color.new(color.orange,50),     style = plot.style_circles)
Expand (1550 lines)