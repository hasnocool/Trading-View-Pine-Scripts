Script Name: BEST Strategy Template w- Custom SL-TP Size - Educational
Author: Daveatt
Description: Hello traders

I'm getting this question at least once per week: "how to define a custom exit quantity for my stop loss and a different one for my take profit"
Instead of answering every day the same question in my DMs, I've decided to publish an educational strategy template script using this

 Features 

- Select to use or not the SL and/or TP
- Define how many...
PineScript code:

Pine Script™ strategy
BEST Strategy Template w/ Custom SL/TP Size - Educational
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
//@version=5
VERSION = "V1"
SCRIPT_NAME = "BEST Strategy Template Custom SL/TP Qty " + VERSION
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
// These values are used both in the strategy() header and in the script's relevant inputs as default values so they match.
// Unless these values match in the script's Inputs and the TV backtesting Properties, results between them cannot be compared.
InitCapital = 1000000
InitPosition = 100.0
InitCommission = 0.075
InitPyramidMax = 1
CalcOnorderFills = false
ProcessOrdersOnClose = true
CalcOnEveryTick = false
CloseEntriesRule = "FIFO"
strategy(title=SCRIPT_NAME, shorttitle=SCRIPT_NAME, 
 overlay=true, pyramiding=InitPyramidMax, initial_capital=InitCapital, default_qty_type=strategy.fixed, process_orders_on_close=ProcessOrdersOnClose,
 default_qty_value=InitPosition, commission_type=strategy.commission.percent, commission_value=InitCommission, calc_on_order_fills=CalcOnorderFills, 
 calc_on_every_tick=CalcOnEveryTick, close_entries_rule = CloseEntriesRule,
 precision=6, max_lines_count=500, max_labels_count=500)
// # ========================================================================= #
// # ========================================================================= #
// #                   |   Input fields |
// # ========================================================================= #
// # ========================================================================= #
// # ========================================================================= #
// # ========================================================================= #
// #                   ||   Alerts  ||
// # ========================================================================= #
// # ========================================================================= #
i_alert_txt_entry_long = input.text_area(defval = "", title = "Long Entry Message", group = "Alerts")
i_alert_txt_entry_short = input.text_area(defval = "", title = "Short Entry Message", group = "Alerts")
i_alert_txt_exit_long = input.text_area(defval = "", title = "Long Exit Message", group = "Alerts")
i_alert_txt_exit_short = input.text_area(defval = "", title = "Short Exit Message", group = "Alerts")
// # ========================================================================= #
// # ========================================================================= #
// #                   ||   Dates Range Filtering  ||
// # ========================================================================= #
// # ========================================================================= #
DateFilter = input(false, "Date Range Filtering", group="Date")
// ————— Syntax coming from https://www.tradingview.com/blog/en/new-parameter-for-date-input-added-to-pine-21812/
i_startTime = input.time(defval = timestamp("01 Jan 2019 13:30 +0000"), title = "Start Time", group="Date")
i_endTime = input.time(defval = timestamp("30 Dec 2021 23:30 +0000"), title = "End Time", group="Date")
TradeDateIsAllowed() => DateFilter ? time >= i_startTime and time <= i_endTime : true
// # ========================================================================= #
// #                   |   General  |
// # ========================================================================= #
show_consecutive = input.bool(defval = true , title = "Show consecutive signals?", group="General")
OpenDirection    = input.string(defval="ALL", title="Direction", options=["ALL", "LONG", "SHORT"], group="General")
clrBars          = input.bool(true, title="Colour Candles to Trade Order state", group="General")
nb_contracts     = input.int(100, title = "Default Nb Contracts per Trade", group="General")
// # ========================================================================= #
// #                   |  Donchian Trend Ribbon |
// # ========================================================================= #
dlen = input.int(defval = 20, title = "Period", minval = 10, group = "Donchian Channel")
// # ========================================================================= #
// #                   | Stop Loss |
// # ========================================================================= #
use_sl         = input.bool(false, title = "Use Stop Loss?", group = "Initial Stop Loss")
sl_input_pips = input.float(30, minval = 0, title = "Stop Loss (pips)", group = "Initial Stop Loss")
sl_qty        = input.float(100, minval = 0, maxval = 100, title = "Close X% at SL", group = "Initial Stop Loss") 
// # ========================================================================= #
// #                   | Take Profit |
// # ========================================================================= #
use_tp         = input.bool(false, title = "Use Take Profit?", group = "Take Profit")
tp_input_pips = input.float(30, minval = 0, title = "Take Profit (pips)", group = "Take Profit")
tp_qty        = input.float(50, minval = 0, maxval = 100, title = "Close X% at TP", group = "Take Profit") 
// # ========================================================================= #
// #                   | Stop Loss / Take Profit |
// # ========================================================================= #
//sl_tp_qty        = input.float(50, minval = 0, maxval = 100, title = "Close X% at SL/TP", group = "SL/TP Exit Size")
// # ========================================================================= #
// #                   | Trailing Stop Loss |
// # ========================================================================= #
use_trailing  = input.bool(false, title = "Use Trailing Stop Loss?", group = "Trailing Stop Loss")
tsl_input_pips = input.float(10, minval = 0, title = "Trailing Stop Loss (pips)", group = "Trailing Stop Loss")
// # ========================================================================= #
// #                   |  Donchian Trend Ribbon |
// # ========================================================================= #
dchannel(len)=>
    float hh = ta.highest(len)
    float ll = ta.lowest(len)
    
    int trend = 0
    trend := close > hh[1] ? 1 : close < ll[1] ? -1 : nz(trend[1])
    
dchannelalt(len, maintrend)=>
    float hh = ta.highest(len)
    float ll = ta.lowest(len)
    
    int trend = 0
    trend := close > hh[1] ? 1 : close < ll[1] ? -1 : nz(trend[1])
    maintrend == 1  ? trend == 1  ? #00FF00ff :  #00FF009f :
     maintrend == -1 ? trend == -1 ? #FF0000ff :  #FF00009f :
     na
dc_maintrend = dchannel(dlen)
bull_dc = dc_maintrend == 1
bear_dc = dc_maintrend == -1
plotshape(
 series     = bull_dc and not bull_dc[1],
 title      = "Bull Donchian Channel",
 style      =  shape.diamond,
 location   =  location.bottom,
 color      = color.new(color = color.purple, transp = 0),
 size       = size.normal
 )
plotshape(
 series     = bear_dc and not bear_dc[1],
 title      = "Bear Donchian Channel",
 style      =  shape.diamond,
 location   =  location.top,
 color      = color.new(color = color.orange, transp = 0),
 size       = size.normal
 )
// # ========================================================================= #
// #                   | Consolidated Signals |
// # ========================================================================= #
T1_posUp = bull_dc
T1_posDn = bear_dc
var float count_signals = 1.
T1_conditionUP = bull_dc
T1_conditionDN = bear_dc
// # ========================================================================= #
// #                   ||   Global Trend Variables ||
// # ========================================================================= #
T1_sinceUP = ta.barssince(T1_conditionUP)
T1_sinceDN = ta.barssince(T1_conditionDN)
bull = show_consecutive ? T1_conditionUP : ta.crossunder(T1_sinceUP,T1_sinceDN)
bear = show_consecutive ? T1_conditionDN : ta.crossover(T1_sinceUP,T1_sinceDN)
T1_sinceNUP = ta.barssince(bull)
T1_sinceNDN = ta.barssince(bear)
T1_BuyTrend = T1_sinceNDN > T1_sinceNUP
T1_SellTrend = T1_sinceNDN < T1_sinceNUP
T1_SellToBuy = T1_BuyTrend and T1_SellTrend[1]
T1_BuyToSell = T1_SellTrend and T1_BuyTrend[1]
T1_ChangeTrend = T1_BuyToSell or T1_SellToBuy
if T1_ChangeTrend or strategy.position_size == 0
    count_signals := 1
plotshape(
 series     = bull and not bull[1],
 title      = "Buy Signal",
 style      = shape.triangleup,
 location   = location.bottom,
 color      = color.new(color = color.green, transp = 0),
 size       = size.normal,
 display    =  display.none 
 )
plotshape(
 series     = bear and not bear[1],
 title      = "Sell Signal",
 style      = shape.triangledown,
 location   = location.top,
 color      = color.new(color = color.red, transp = 0),
 size       = size.normal,
 display    =  display.none 
 )
// # ========================================================================= #
// #       |   Entry Price |
// # ========================================================================= #
entry_long_price  = ta.valuewhen(condition=bull and strategy.position_size[1] <= 0, source=close, occurrence=0)
entry_short_price = ta.valuewhen(condition=bear and strategy.position_size[1] >= 0, source=close, occurrence=0)
// # ========================================================================= #
// #                   |   Stop Loss |
// # ========================================================================= #
pip() => 1//syminfo.mintick * (syminfo.type == "forex" ? 10 : 1)
var float final_SL_Long  = 0.
var float final_SL_Short = 0.
final_SL_Long  := strategy.position_avg_price - (sl_input_pips * pip())
final_SL_Short := strategy.position_avg_price + (sl_input_pips * pip())
// # ========================================================================= #
// #                   |  Take Profit |
// # ========================================================================= #
var float final_TP_Long  = 0.
var float final_TP_Short = 0.
final_TP_Long  := strategy.position_avg_price + (tp_input_pips * pip())
final_TP_Short := strategy.position_avg_price - (tp_input_pips * pip())
plot(strategy.position_size > 0 and use_tp ? final_TP_Long : na, title = "TP Long", color = color.orange, linewidth=2, style=plot.style_linebr)
plot(strategy.position_size < 0 and use_tp ? final_TP_Short : na, title = "TP Short", color = color.orange, linewidth=2, style=plot.style_linebr)
// # ========================================================================= #
// #                   |   Trailing Stop Loss |
// # ========================================================================= # 
signal_candle = bear or bull
var MaxReached = 0.0  
var bool is_TP1_reached = false
if signal_candle[1]
    MaxReached := strategy.position_size > 0 ? high : low
MaxReached := strategy.position_size > 0
 ? math.max(nz(MaxReached, high), high)
 : strategy.position_size < 0 ? math.min(nz(MaxReached, low), low) : na
if (strategy.position_size > 0 and MaxReached >= final_TP_Long) 
 or (strategy.position_size < 0 and MaxReached <= final_TP_Short)
    is_TP1_reached := true
if use_trailing and is_TP1_reached and use_sl
    if strategy.position_size > 0
        stopValue = MaxReached - (tsl_input_pips * pip())
        final_SL_Long := math.max(stopValue, final_SL_Long[1])
    else if strategy.position_size < 0
        stopValue = MaxReached + (tsl_input_pips * pip())
        final_SL_Short := math.min(stopValue, final_SL_Short[1])
plot(strategy.position_size > 0 and use_sl ? final_SL_Long : na, title = "SL Long", color = color.fuchsia, linewidth=2, style=plot.style_linebr)
plot(strategy.position_size < 0 and use_sl ? final_SL_Short : na, title = "SL Short", color = color.fuchsia, linewidth=2, style=plot.style_linebr)
// # ========================================================================= #
// #                   | Strategy Calls |
// # ========================================================================= #
open_all        = OpenDirection == "ALL"
open_all_longs  = OpenDirection != "SHORT"
open_all_shorts = OpenDirection != "LONG"
//final_sl_qty = nb_contracts * (1 - (1 - sl_qty))
//final_tp_qty = nb_contracts * (1 - (1 - tp_qty))
// Go long
longCondition = bull// and not bull[1]
if (longCondition and open_all_longs and TradeDateIsAllowed())// and not (strategy.position_size[1] > 0))
    strategy.entry("Long", strategy.long, alert_message = i_alert_txt_entry_long, qty = nb_contracts)
    alert(i_alert_txt_entry_long, alert.freq_once_per_bar_close)
        
// Go Short
shortCondition = bear// and not bear[1]
if (shortCondition and open_all_shorts and TradeDateIsAllowed())// and not (strategy.position_size[1] < 0))
    strategy.entry("Short", strategy.short, alert_message = i_alert_txt_entry_short, qty = nb_contracts)
    alert(i_alert_txt_entry_short, alert.freq_once_per_bar_close)
var bool both_sl_tp_100 = false
if use_sl and use_tp and sl_qty == 100 and tp_qty == 100
    both_sl_tp_100 := true
if (strategy.position_size[1] > 0)
    if both_sl_tp_100
        strategy.exit(id = "Exit Long SL",  from_entry = "Long", stop = final_SL_Long, limit = final_TP_Long, comment_loss = "Long Exit SL", alert_loss = "Long Exit SL", comment_profit = "Long Exit TP", alert_profit = "Long Exit TP")
    else
        if use_sl and low <= final_SL_Long
            strategy.exit(id = "Exit Long SL",  from_entry = "Long", stop  = use_sl ? final_SL_Long : na, comment_loss = "Long Exit SL", qty_percent   = sl_qty, alert_loss = "Long Exit SL") 
        if use_tp and high >= final_TP_Long
            strategy.exit(id = "Exit Long TP",  from_entry = "Long", limit = use_tp ? final_TP_Long : na, comment_profit = "Long Exit TP", qty_percent = tp_qty, alert_profit = "Long Exit tp")     
if (strategy.position_size[1] < 0)
    if both_sl_tp_100
        strategy.exit(id = "Exit Short SL",  from_entry = "Short", stop = final_SL_Short, limit = final_TP_Short, comment_loss = "Short Exit SL", alert_loss = "Short Exit SL", comment_profit = "Short Exit TP", alert_profit = "Short Exit TP")
    else
        if use_sl and high >= final_SL_Short
            strategy.exit(id = "Exit Short SL",  from_entry = "Short", stop  = use_sl ? final_SL_Short : na, qty_percent = sl_qty, comment_loss = "Short Exit SL", alert_loss = "Short Exit SL") 
        if use_tp and low <= final_TP_Short
            strategy.exit(id = "Exit Short TP",  from_entry = "Short", limit = use_tp ? final_TP_Short : na, qty_percent = tp_qty, comment_profit = "Short Exit TP", alert_profit = "Short Exit TP")  
// # ========================================================================= #
// #                   |   Bars Coloring |
// # ========================================================================= #
// Colour code the candles
bclr = not clrBars ? na : strategy.position_size == 0 ? #dbd5d5 : 
 T1_BuyTrend  ? color.lime :
 T1_SellTrend ? color.red : color.gray
barcolor(bclr, title="Trade State Bar Colouring")
// # ========================================================================= #
// #                   |   Reset Variables |
// # ========================================================================= #
if strategy.position_size == 0 or T1_ChangeTrend
    is_TP1_reached := false
Expand (339 lines)