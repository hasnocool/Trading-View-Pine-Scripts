Script Name: Template Trailing Strategy
Author: jason5480
Description: This script is meant to be used as a generic template for new strategies. Take Profit, Stop Loss logic is provided out of the box with (or without) their trailing variations while the trailing for entry and exit orders can also be enabled and be configured!
Custom quantity risk management is provided along with the ability to set custom signal messages that can be...
PineScript code:

Pine Script™ strategy
Template Trailing Strategy
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319
1320
1321
1322
1323
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
1336
1337
1338
1339
1340
1341
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1394
1395
1396
1397
1398
1399
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1411
1412
1413
1414
1415
1416
1417
1418
1419
1420
1421
1422
1423
1424
1425
1426
1427
1428
1429
1430
1431
1432
1433
1434
1435
1436
1437
1438
1439
1440
1441
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464
1465
1466
1467
1468
1469
1470
1471
1472
1473
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1535
1536
1537
1538
1539
1540
1541
1542
1543
1544
1545
1546
1547
1548
1549
1550
1551
1552
1553
1554
1555
1556
1557
1558
1559
1560
1561
1562
1563
1564
1565
1566
1567
1568
1569
1570
1571
1572
1573
1574
1575
1576
1577
1578
1579
1580
1581
1582
1583
1584
1585
1586
1587
1588
1589
1590
1591
1592
1593
1594
1595
1596
1597
1598
1599
1600
1601
1602
1603
1604
1605
1606
1607
1608
1609
1610
1611
1612
1613
1614
1615
1616
1617
1618
1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631
1632
1633
1634
1635
1636
1637
1638
1639
1640
1641
1642
1643
1644
1645
1646
1647
1648
1649
1650
1651
1652
1653
1654
1655
1656
1657
1658
1659
1660
1661
1662
1663
1664
1665
1666
1667
1668
1669
1670
1671
1672
1673
1674
1675
1676
1677
1678
1679
1680
1681
1682
1683
1684
1685
1686
1687
1688
1689
1690
1691
1692
1693
1694
1695
1696
1697
1698
1699
1700
1701
1702
1703
1704
1705
1706
1707
1708
1709
1710
1711
1712
1713
1714
1715
1716
1717
1718
1719
1720
1721
1722
1723
1724
1725
1726
1727
1728
1729
1730
1731
1732
1733
1734
1735
1736
1737
1738
1739
1740
1741
1742
1743
1744
1745
1746
1747
1748
1749
1750
1751
1752
1753
1754
1755
1756
1757
1758
1759
1760
1761
1762
1763
1764
1765
1766
1767
1768
1769
1770
1771
1772
1773
1774
1775
1776
1777
1778
1779
1780
1781
1782
1783
1784
1785
1786
1787
1788
1789
1790
1791
1792
1793
1794
1795
1796
1797
1798
1799
1800
1801
1802
1803
1804
1805
1806
1807
1808
1809
1810
1811
1812
1813
1814
1815
1816
1817
1818
1819
1820
1821
1822
1823
1824
1825
1826
1827
1828
1829
1830
1831
1832
1833
1834
1835
1836
1837
1838
1839
1840
1841
1842
1843
1844
1845
1846
1847
1848
1849
1850
1851
1852
1853
1854
1855
1856
1857
1858
1859
1860
1861
1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
1878
1879
1880
1881
1882
1883
1884
1885
1886
1887
1888
1889
1890
1891
1892
1893
1894
1895
1896
1897
1898
1899
1900
1901
1902
1903
1904
1905
1906
1907
1908
1909
1910
1911
1912
1913
1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
1928
1929
1930
1931
1932
1933
1934
1935
1936
1937
1938
1939
1940
1941
1942
1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
1957
1958
1959
1960
1961
1962
1963
1964
1965
1966
1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
1981
1982
1983
1984
1985
1986
1987
1988
1989
1990
1991
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
2024
2025
2026
2027
2028
2029
2030
2031
2032
2033
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
//@version=5
//#region PREAMBLE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//  Copyright © 2022-2023 Iason Nikolas | jason5480
//  The "Template Trailing Strategy" script may be freely distributed under the MIT license.
//  
//  Permission is hereby granted, free of charge,
//  to any person obtaining a copy of this software and associated documentation files (the "Software"),
//  to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
//  publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
//  is furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in ALL COPIES or substantial portions of
//  the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
//  OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
//  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//  
//  Description
//  --------------------------------------------------------------------------------------------------------------------
//  This script is designed to be used as a template for building new strategies.
//  The framework provides you with a configurable implementation of the entry, exit,
//  stop loss and take profit trailing logic. The proposed way to use that script
//  is in combination with a customized signal indicator where you implemented your
//  own logic of start and end deal conditions. See my "Two MA Signal Indicator"
//  and "Template Signal Indicator" in my profile for more. Another way to utilize
//  this script (not recommended) is to copy it and replace the startLongDeal,
//  startShortDeal, endLongDeal, endShortDeal, and optionally if you use limit or stop-
//  limit orders for entry/exit the cnlStartLongDeal, cnlStartShortDeal, cnlEndtLongDeal,
//  cnlEndtShortDeal variables in the STRATEGY 1 module according to your needs!
//  However, doing that way you will have to re-implement your changes every time I
//  release a new update if you want to have those new changes I made in your script.
//  
//  --------------------------------------------------------------------------------------------------------------------
//  Disclaimer:
//    1. I am not licensed financial advisors or broker-dealer. I do not tell you when or what to buy or sell.
//       I developed this software which enables you execute manual or automated trades using TradingView.
//       The software allows you to set the criteria you want for entering and exiting trades.
//    2. Do not trade with money you cannot afford to lose.
//    3. I do not guarantee consistent profits or that anyone can make money with no effort.
//       And I am not selling the holy grail.
//    4. Every system can have winning and losing streaks.
//    5. Money management plays a large role in the results of your trading. For example: lot size, account size,
//       broker leverage, and broker margin call rules all affect on results. Also, your Take Profit and Stop Loss
//       settings for individual pair trades and for overall account equity have a major impact on results.
//       If you are new to trading and do not understand these items, then I recommend you seek educational materials
//       to further your knowledge.
//    
//  YOU NEED TO FIND AND USE THE TRADING SYSTEM THAT WORKS BEST FOR YOU AND YOUR TRADING TOLERANCE.
//  I HAVE PROVIDED NOTHING MORE THAN A TOOL WITH OPTIONS FOR YOU TO TRADE WITH THIS PROGRAM ON TRADINGVIEW.
//  
//  I accept suggestions to improve the script! For any change proposal to the existing functionality,
//  any additional feature you have in mind, or even reporting a defect (bug) you found, you should write it
//  down here docs.google.com/spreadsheets/d/1xwpr2Ut4CmMX6kX9PxflWuvb4mZ6LFKJ1Y6C7LahQ5o/edit?usp=sharing
//  and let me know by sending me a private message on TradingView.
//  If you encounter any problems, I will be happy to share them with me.
//  --------------------------------------------------------------------------------------------------------------------
//#endregion ===========================================================================================================
//#region SETUP
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
strategy(title = 'Template Trailing Strategy',
         shorttitle = 'TTSv47',
         overlay = true,
         pyramiding = 0,
         backtest_fill_limits_assumption = 1,
         default_qty_type = strategy.percent_of_equity,
         default_qty_value = 100,
         initial_capital = 100000,
         slippage = 3,
         commission_type = strategy.commission.percent,
         commission_value = 0.1,
         close_entries_rule = 'ANY',
         max_lines_count = 500,
         max_labels_count = 500)
//#endregion ===========================================================================================================
//#region 📆 FILTERS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for filtering out long and short open signals that do not meet user defined rules
// Dependencies: NONE
// Results: longFiltersApproval, shortFiltersApproval
import jason5480/time_filters/9 as tif
// INPUT ===============================================================================================================
sourceTimezone = input.string(defval = 'Exchange', title = 'Timezones Src->Dst', options = ['Exchange', 'UTC', 'America/Los_Angeles', 'America/Phoenix', 'America/Vancouver', 'America/El_Salvador', 'America/Bogota', 'America/Chicago', 'America/New_York', 'America/Toronto', 'America/Argentina/Buenos_Aires', 'America/Sao_Paulo', 'Etc/UTC', 'Europe/London', 'Europe/Berlin', 'Europe/Madrid', 'Europe/Paris', 'Europe/Warsaw', 'Europe/Athens', 'Europe/Moscow', 'Asia/Tehran', 'Asia/Dubai', 'Asia/Ashkhabad', 'Asia/Kolkata', 'Asia/Almaty', 'Asia/Bangkok', 'Asia/Hong_Kong', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Taipei', 'Asia/Seoul', 'Asia/Tokyo', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Sydney', 'Pacific/Auckland', 'Pacific/Fakaofo', 'Pacific/Chatham', 'Pacific/Honolulu'], inline = 'Timezone', group = '📆 Filters')
destinationTimezone = input.string(defval = 'Exchange', title = '->', options = ['Exchange', 'UTC', 'America/Los_Angeles', 'America/Phoenix', 'America/Vancouver', 'America/El_Salvador', 'America/Bogota', 'America/Chicago', 'America/New_York', 'America/Toronto', 'America/Argentina/Buenos_Aires', 'America/Sao_Paulo', 'Etc/UTC', 'Europe/London', 'Europe/Berlin', 'Europe/Madrid', 'Europe/Paris', 'Europe/Warsaw', 'Europe/Athens', 'Europe/Moscow', 'Asia/Tehran', 'Asia/Dubai', 'Asia/Ashkhabad', 'Asia/Kolkata', 'Asia/Almaty', 'Asia/Bangkok', 'Asia/Hong_Kong', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Taipei', 'Asia/Seoul', 'Asia/Tokyo', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Sydney', 'Pacific/Auckland', 'Pacific/Fakaofo', 'Pacific/Chatham', 'Pacific/Honolulu'], tooltip = 'The Src is the source timezone to be used as a reference for the time settings. The Dst is the destination timezone to convert into (e.g. the charts\' timezone)', inline = 'Timezone', group = '📆 Filters')
var dateTimeWindow = tif.DateTimeWindow.new(
  fromDateTime = input.bool(defval = true, title = 'From', inline = 'From Date', group = '📆 Filters') ? input.time(defval = timestamp('01 Jan 2022 00:00'), title = '​', inline = 'From Date', group = '📆 Filters') : na,
  toDateTime = input.bool(defval = false, title = 'To ', inline = 'To Date', group = '📆 Filters') ? input.time(defval = timestamp('01 Jan 2023 00:00'), title = '​​', inline = 'To Date', group = '📆 Filters') : na)
var marketSession = tif.MarketSession.new( 
  days = input.bool(defval = false, title = 'Session Days', inline = 'Session Days', group = '📆 Filters') ? tif.SessionDays.new(
      mon = input.bool(defval = true, title = 'Mon', inline = 'Session Days', group = '📆 Filters'),
      tue = input.bool(defval = true, title = 'Tue', inline = 'Session Days', group = '📆 Filters'),
      wed = input.bool(defval = true, title = 'Wed', inline = 'Session Days', group = '📆 Filters'),
      thu = input.bool(defval = true, title = 'Thu', inline = 'Session Days', group = '📆 Filters'),
      fri = input.bool(defval = true, title = 'Fri', inline = 'Session Days', group = '📆 Filters'),
      sat = input.bool(defval = false, title = 'Sat', inline = 'Session Days', group = '📆 Filters'),
      sun = input.bool(defval = false, title = 'Sun', inline = 'Session Days', group = '📆 Filters')) : na,
  startTime = input.bool(defval = false, title = 'Session Start', inline = 'Session Start', group = '📆 Filters') ? tif.SessionTime.new(
      hourInDay = input.int(defval = 12, title = '​​​', minval = 0, maxval = 23, step = 1, inline = 'Session Start', group = '📆 Filters'),
      minuteInHour = input.int(defval = 00, title = ':​', minval = 0, maxval = 59, step = 1, tooltip = 'Start time of the session.', inline = 'Session Start', group = '📆 Filters')) : na,
  endTime = input.bool(defval = false, title = 'Session End', inline = 'Session End', group = '📆 Filters') ? tif.SessionTime.new(
      hourInDay = input.int(defval = 20, title = '​​​​', minval = 0, maxval = 23, step = 1, inline = 'Session End', group = '📆 Filters'),
      minuteInHour = input.int(defval = 00, title = ':​​', minval = 0, maxval = 59, step = 1, tooltip = 'End time of the session.', inline = 'Session End', group = '📆 Filters')) : na)
// LOGIC ===============================================================================================================
bool dateFilterApproval = dateTimeWindow.is_in_range(srcTimezone = sourceTimezone, dstTimezone = destinationTimezone)
bool sessionFilterApproval = marketSession.is_in_range(srcTimezone = sourceTimezone, dstTimezone = destinationTimezone)
bool timeFilterApproval = dateFilterApproval and sessionFilterApproval
// PLOT ================================================================================================================
bgcolor(color = timeFilterApproval ? na : color.new(color.gray, 90), offset = 1, title = 'Time Window')
//#endregion ===========================================================================================================
//#region 🛤️ TRACK POSITION
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for general-purpose variable that needed for several other modules
// Dependencies: NONE
// Results: isLongPosition, isShortPosition, isFlatPosition, enteredLongTrade, enteredShortTrade, lastLongEntryBarIndex, lastShortEntryBarIndex, lastLongExitBarIndex, lastShortExitBarIndex, completedLongTrade, completedShortTrade
// LOGIC ===============================================================================================================
// numeric limits
var float maxLimitFloat = 999999.9
var float minLimitFloat = 0.0
var int maxLimitInt = 999999
var int minLimitInt = 0
// The current and previous position sizes
float currentPositionSize = strategy.opentrades.size(strategy.opentrades - 1)
bool isLongPosition = currentPositionSize > 0
bool isShortPosition = currentPositionSize < 0
bool isFlatPosition = currentPositionSize == 0
// fixed order Id names
var string longOrderIdPrefix = 'Long'
var string shortOrderIdPrefix = 'Short'
var string entryOrderIdPostfix = 'Entry'
var string longOrderIdEntry = str.format('{0} {1}', longOrderIdPrefix, entryOrderIdPostfix)
var string shortOrderIdEntry = str.format('{0} {1}', shortOrderIdPrefix, entryOrderIdPostfix)
var string longOrderIdClose = str.format('Close entry(s) order {0}', longOrderIdEntry)
var string shortOrderIdClose = str.format('Close entry(s) order {0}', shortOrderIdEntry)
var string exitOrderIdPattern1 = '{0} Take Profit {1, number, integer} / Stop Loss / Limit Exit'
var string exitOrderIdPattern2 = '{0} Stop Loss / Limit Exit'
// last exit helper functions
closedTradesExitId(int n) =>
    strategy.closedtrades.exit_id(strategy.closedtrades - n)
closedTradeExitIdContains(simple string prefix, int n = 1) =>
    strategy.closedtrades >= n ? str.contains(closedTradesExitId(n), prefix) : false
closedTradeExitIdIs(simple string exitId, int n = 1) =>
    strategy.closedtrades >= n ? closedTradesExitId(n) == exitId : false
closedTradesExitBarIndex(int n) =>
    strategy.closedtrades.exit_bar_index(strategy.closedtrades - n)
closedTradesExitPrice(int n) =>
    strategy.closedtrades.exit_price(strategy.closedtrades - n)
lastTwoClosedTradesExitedInTheSameBar() =>
    strategy.closedtrades >= 2 ? closedTradesExitBarIndex(2) == closedTradesExitBarIndex(1) : false
openTradeEntryIdStartsWith(simple string prefix, int n = 1) =>
    str.startswith(strategy.opentrades.entry_id(strategy.opentrades - n), prefix)
// last exit bar id and price
var int lastLongExitBarIndex = na
var float lastLongExitPrice = na
if ((closedTradeExitIdContains(longOrderIdPrefix) or closedTradeExitIdIs(shortOrderIdEntry)) and not isLongPosition)
    lastLongExitBarIndex := closedTradesExitBarIndex(1)
    lastLongExitPrice := closedTradesExitPrice(1)
else if ((closedTradeExitIdContains(longOrderIdPrefix, 2) or closedTradeExitIdIs(shortOrderIdEntry, 2)) and lastTwoClosedTradesExitedInTheSameBar() and not isLongPosition)
    lastLongExitBarIndex := closedTradesExitBarIndex(2)
    lastLongExitPrice := closedTradesExitPrice(2)
var int lastShortExitBarIndex = na
var float lastShortExitPrice = na
if ((closedTradeExitIdContains(shortOrderIdPrefix) or closedTradeExitIdIs(longOrderIdEntry)) and not isShortPosition)
    lastShortExitBarIndex := closedTradesExitBarIndex(1)
    lastShortExitPrice := closedTradesExitPrice(1)
else if ((closedTradeExitIdContains(shortOrderIdPrefix, 2) or closedTradeExitIdIs(longOrderIdEntry, 2)) and lastTwoClosedTradesExitedInTheSameBar() and not isShortPosition)
    lastShortExitBarIndex := closedTradesExitBarIndex(2)
    lastShortExitPrice := closedTradesExitPrice(2)
// flags that are true when already entered a long or short trade
bool enteredLongTrade = strategy.opentrades > 0 ? bar_index == strategy.opentrades.entry_bar_index(strategy.opentrades - 1) and openTradeEntryIdStartsWith(longOrderIdPrefix) : false
bool enteredShortTrade = strategy.opentrades > 0 ? bar_index == strategy.opentrades.entry_bar_index(strategy.opentrades - 1) and openTradeEntryIdStartsWith(shortOrderIdPrefix) : false
// flags that are true when completed a long or short trade
bool completedLongTrade = strategy.closedtrades > 0 ? bar_index == lastLongExitBarIndex : false
bool completedShortTrade = strategy.closedtrades > 0 ? bar_index == lastShortExitBarIndex : false
//#endregion ===========================================================================================================
//#region 🛠️ STRATEGY 1
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the open position logic. This is implemented based on deal conditions defined internally (in this script) or externaly (based on conditions that take as input other indicator)
// Dependencies: FILTERS, TRACK POSITION
// Results: commissionRatio, openLongPosition, openShortPosition, cnlOpenLongPosition, cnlOpenShortPosition, endLongDeal, endShortDeal, cnlEndLongDeal, cnlEndShortDeal, validOpenLongPosition, validOpenShortPosition, validOpenPosition
import jason5480/external_input_utils/6 as exiu
import HeWhoMustNotBeNamed/ta/1 as eta
// INPUT ===============================================================================================================
showOpenLabels = input.bool(defval = true, title = '​​​​​', inline = 'Open', group = '🛠️ Strategy')
longOpenColor = input.color(defval = color.new(#2962FF, 0), title = '🎨️ Open Color Long/Short    ', inline = 'Open', group = '🛠️ Strategy')
shortOpenColor = input.color(defval = color.new(#FF1744, 0), title = '​​​​​​', tooltip = 'The color of the open long/short labels.', inline = 'Open', group = '🛠️ Strategy')
showCnlOpenLabels = input.bool(defval = true, title = '​​​​​​​', inline = 'Cancel Open', group = '🛠️ Strategy')
longCnlOpenColor = input.color(defval = color.new(#3179F5, 0), title = '🎨️ Cancel Open Color Long/Short ', inline = 'Cancel Open', group = '🛠️ Strategy')
shortCnlOpenColor = input.color(defval = color.new(#F7525F, 0), title = '​​​​​​​​', tooltip = 'The color of the cancel open long/short labels.', inline = 'Cancel Open', group = '🛠️ Strategy')
showCloseLabels = input.bool(defval = true, title = '​​​​​​​​​', inline = 'Close', group = '🛠️ Strategy')
longCloseColor = input.color(defval = color.new(#D500F9, 0), title = '🎨️ Close Color Long/Short    ', inline = 'Close', group = '🛠️ Strategy')
shortCloseColor = input.color(defval = color.new(#D500F9, 0), title = '​​​​​​​​​​', tooltip = 'The color of the close long/short labels.', inline = 'Close', group = '🛠️ Strategy')
showCnlCloseLabels = input.bool(defval = true, title = '​​​​​​​​​​​', inline = 'Cancel Close', group = '🛠️ Strategy')
longCnlCloseColor = input.color(defval = color.new(#AB47BC, 0), title = '🎨️ Cancel Close Color Long/Short ', inline = 'Cancel Close', group = '🛠️ Strategy')
shortCnlCloseColor = input.color(defval = color.new(#AB47BC, 0), title = '​​​​​​​​​​​​', tooltip = 'The color of the cancel close long/short labels.', inline = 'Cancel Close', group = '🛠️ Strategy')
commissionRatio = input.float(defval = 0.1, title = 'Commission % 🛈➡', minval = 0.0, maxval = 100.0, step = 0.05, tooltip = 'Fees paid for each transaction entry, exit, take profit and stop loss (percentagewise). INFORMATION! This value should match the commission value in the "Settings/Properties" tab and the commission type should be set to "%" for accurate results.', group = '🛠️ Strategy') / 100.0
dealMode = input.string(defval = '🔧Internal', title = 'Deal Conditions Mode', options = ['🔨External', '🔧Internal'], tooltip = 'Use the "Internal" MA cross over/under logic to start and end your deals. Or use an "External" indicator to construct your own start and end deal conditions.', group = '🛠️ Strategy')
reverseOrdersEnabled = input.bool(defval = true, title = 'Reverse Orders', tooltip = 'Enable reverse orders. If you are already in a position when a new start deal condition is met and it is pointing out to the other direction then, if this setting is enabled, an entry signal to the opposite direction will be emitted causing the existing position to exit with a market order and a new entry will be placed to the direction of the signal according to the "Order Type" that is defined in the ENTRY section. If this setting is disabled, the start deal condition will be ignored and a new start deal condition will be needed when you are not in a position.', group = '🛠️ Strategy')
cooldownEnabled = input.bool(defval = false, title = 'Cooldown # of bars   ', inline = 'Cooldown', group = '🛠️ Strategy')
cooldownBars = input.int(defval = 7, title = '​​​​​​​​​​​​​', minval = 1, tooltip = 'Do NOT emit open position signal if no more than the given number of bars have passed since the previous position exit. A new start deal condition has to be met after that period to open a new position.', inline = 'Cooldown', group = '🛠️ Strategy')
externalInput = input.source(defval = close, title = 'External Input 🛈➡', tooltip = 'Select input from an external indicator. INFORMATION! The indicator should be added to the same chart with this strategy and the desired value that will take part in the conditions below should be plotted in the chart.', group = '🔨 Strategy - External')
startLongDealOperator = input.string(defval = '/10==', title = 'Start Long Deal when input   ', options = ['==', '<', '>', '<=', '>=', '!=', 'crossover', 'crossunder', 'mod2==', 'mod3==', 'mod10==', 'mod100==', '/10==', 'noop'], inline = 'Start Long Deal', group = '🔨 Strategy - External')
startLongDealValue = input.float(defval = 2.0, title = '​​​​​​​​​​​​​​', tooltip = 'Condition to start a Long Deal based on external input.', inline = 'Start Long Deal', group = '🔨 Strategy - External')
endLongDealOperator = input.string(defval = '/10==', title = 'End Long Deal when input    ', options = ['==', '<', '>', '<=', '>=', '!=', 'crossover', 'crossunder', 'mod2==', 'mod3==', 'mod10==', 'mod100==', '/10==', 'noop'], inline = 'End Long Deal', group = '🔨 Strategy - External')
endLongDealValue = input.float(defval = 1.0, title = '​​​​​​​​​​​​​​​', tooltip = 'Condition to end a Long Deal based on external input.', inline = 'End Long Deal', group = '🔨 Strategy - External')
cnlStartLongDealOperator = input.string(defval = '/10==', title = 'Cancel Start Long Deal when input', options = ['==', '<', '>', '<=', '>=', '!=', 'crossover', 'crossunder', 'mod2==', 'mod3==', 'mod10==', 'mod100==', '/10==', 'noop'], inline = 'Cnl Start Long Deal', group = '🔨 Strategy - External')
cnlStartLongDealValue = input.float(defval = 4.0, title = '​​​​​​​​​​​​​​​​', tooltip = 'Condition to cancel the start Long Deal if not already entered the position based on external input.', inline = 'Cnl Start Long Deal', group = '🔨 Strategy - External')
cnlEndLongDealOperator = input.string(defval = '/10==', title = 'Cancel End Long Deal when input ', options = ['==', '<', '>', '<=', '>=', '!=', 'crossover', 'crossunder', 'mod2==', 'mod3==', 'mod10==', 'mod100==', '/10==', 'noop'], inline = 'Cnl End Long Deal', group = '🔨 Strategy - External')
cnlEndLongDealValue = input.float(defval = 3.0, title = '​​​​​​​​​​​​​​​​​', tooltip = 'Condition to cancel the end Long Deal if not already exited the position based on external input.', inline = 'Cnl End Long Deal', group = '🔨 Strategy - External')
startShortDealOperator = input.string(defval = 'mod10==', title = 'Start Short Deal when input   ', options = ['==', '<', '>', '<=', '>=', '!=', 'crossover', 'crossunder', 'mod2==', 'mod3==', 'mod10==', 'mod100==', '/10==', 'noop'], inline = 'Start Short Deal', group = '🔨 Strategy - External')
startShortDealValue = input.float(defval = 2.0, title = '​​​​​​​​​​​​​​​​​​', tooltip = 'Condition to start a Short Deal based on external input.', inline = 'Start Short Deal', group = '🔨 Strategy - External')
endShortDealOperator = input.string(defval = 'mod10==', title = 'End Short Deal when input    ', options = ['==', '<', '>', '<=', '>=', '!=', 'crossover', 'crossunder', 'mod2==', 'mod3==', 'mod10==', 'mod100==', '/10==', 'noop'], inline = 'End Short Deal', group = '🔨 Strategy - External')
endShortDealValue = input.float(defval = 1.0, title = '​​​​​​​​​​​​​​​​​​​', tooltip = 'Condition to end a Short Deal based on external input.', inline = 'End Short Deal', group = '🔨 Strategy - External')
cnlStartShortDealOperator = input.string(defval = 'mod10==', title = 'Cancel Start Short Deal when input', options = ['==', '<', '>', '<=', '>=', '!=', 'crossover', 'crossunder', 'mod2==', 'mod3==', 'mod10==', 'mod100==', '/10==', 'noop'], inline = 'Cnl Start Short Deal', group = '🔨 Strategy - External')
cnlStartShortDealValue = input.float(defval = 4.0, title = '​​​​​​​​​​​​​​​​​​​​', tooltip = 'Condition to cancel the start Short Deal if not already entered the position based on external input.', inline = 'Cnl Start Short Deal', group = '🔨 Strategy - External')
cnlEndShortDealOperator = input.string(defval = 'mod10==', title = 'Cancel End Short Deal when input ', options = ['==', '<', '>', '<=', '>=', '!=', 'crossover', 'crossunder', 'mod2==', 'mod3==', 'mod10==', 'mod100==', '/10==', 'noop'], inline = 'Cnl End Short Deal', group = '🔨 Strategy - External')
cnlEndShortDealValue = input.float(defval = 3.0, title = '​​​​​​​​​​​​​​​​​​​​​', tooltip = 'Condition to cancel the end Short Deal if not already exited the position based on external input.', inline = 'Cnl End Short Deal', group = '🔨 Strategy - External')
longDealsEnabled = input.bool(defval = true, title = 'Long Deals', inline = 'Long/Short Deals', group = '🔧 Strategy - Internal')
shortDealsEnabled = input.bool(defval = true, title = 'Short Deals', tooltip = 'Enable long/short start/end/cancel deals. An open signal will be emitted when the long/short start deal conditions are met. If this option is unchecked you will not enter into long/short positions.', inline = 'Long/Short Deals', group = '🔧 Strategy - Internal')
endDealsEnabled = input.bool(defval = false, title = 'End Deals', tooltip = 'Enable end deals. A close signal will be emitted when the end deal conditions are met. If this option is unchecked you will not exit your existing position based on the strategy logic. You will exit only when the stop loss or the take profit targets are reached.', group = '🔧 Strategy - Internal')
cnlStartDealsEnabled = input.bool(defval = true, title = 'Cancel Start Deals', inline = 'Start/End Deals', group = '🔧 Strategy - Internal')
cnlEndDealsEnabled = input.bool(defval = true, title = 'Cancel End Deals', tooltip = 'Enable cancel start/end deals. A cancel start/close signal will be emitted when the cancel start/end deal conditions are met. If this option is unchecked you will not cancel your entry/exit order based on the strategy logic when use limit, stop or stop-limit orders.', inline = 'Start/End Deals', group = '🔧 Strategy - Internal')
emaFilterEnabled = input.bool(defval = true, title = 'EMA Filter', tooltip = 'Enable long/short trades based on EMA.', group = '🔧 Strategy - Internal')
emaTimeframe = input.timeframe(defval = '', title = '  EMA Res/Len/Src', inline = 'EMA Filter', group = '🔧 Strategy - Internal')
emaLength = input.int(defval = 200, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 1, inline = 'EMA Filter', group = '🔧 Strategy - Internal')
emaSrc = exiu.str_to_src(input.string(defval = 'close', title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', options = ['open', 'high', 'low', 'close', 'hl2', 'hlc3', 'ohlc4', 'hlcc4'], tooltip = 'The timeframe, period and source for the EMA calculation.', inline = 'EMA Filter', group = '🔧 Strategy - Internal'))
emaAtrBandEnabled = input.bool(defval = true, title = 'EMA ATR Band', tooltip = 'Enable ATR band for EMA filter.', group = '🔧 Strategy - Internal')
filterAtrMul = input.float(defval = 1.0, title = '  EMA ATR Mul/Len', minval = 0.1, step = 0.1, inline = 'EMA ATR', group = '🔧 Strategy - Internal')
filterAtrLength = input.int(defval = 5, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 1, tooltip = 'ATR multiplier and length to be used for the ATR calculation that will be added on top of the EMA filter.', inline = 'EMA ATR', group = '🔧 Strategy - Internal')
adxFilterEnabled = input.bool(defval = false, title = 'ADX Filter', tooltip = 'Enable long/short trades based on ADX.', group = '🔧 Strategy - Internal')
adxSmoothing = input.int(defval = 14, title = '  Smooth/DI Len', minval = 1, inline = 'ADX Filter', group = '🔧 Strategy - Internal')
diLength = input.int(defval = 14, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 1, tooltip = 'ADX Smoothing length and Direction Length.', inline = 'ADX Filter', group = '🔧 Strategy - Internal')
adxThreshold = input.float(defval = 20.0, title = '  Threshold', minval = 0.1, maxval = 100.0, step = 5.0, tooltip = 'ADX lower threshold.', group = '🔧 Strategy - Internal')
fastMAType = str.lower(input.string(defval = 'SMA', title = 'Fast MA Type/Len', options = ['SMA', 'EMA', 'RMA', 'WMA', 'HMA', 'VWMA', 'SWMA', 'LINREG', 'MEDIAN'], inline = 'Fast MA', group = '🔧 Strategy - Internal'))
fastMALen = input.int(defval = 21, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 1, tooltip = 'The type and the length of the fast MA.', inline = 'Fast MA', group = '🔧 Strategy - Internal')
slowMAType = str.lower(input.string(defval = 'SMA', title = 'Slow MA Type/Len', options = ['SMA', 'EMA', 'RMA', 'WMA', 'HMA', 'VWMA', 'SWMA', 'LINREG', 'MEDIAN'], inline = 'Slow MA', group = '🔧 Strategy - Internal'))
slowMALen = input.int(defval = 49, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 1, tooltip = 'The type and the length of the slow MA.', inline = 'Slow MA', group = '🔧 Strategy - Internal') // Last empty title 56
// LOGIC ===============================================================================================================
var bool startLongDealInternal = false
var bool startShortDealInternal = false
var bool endLongDealInternal = false
var bool endShortDealInternal = false
var bool cnlStartLongDealInternal = false
var bool cnlStartShortDealInternal = false
var bool cnlEndLongDealInternal = false
var bool cnlEndShortDealInternal = false
var float fastMA = na
var float slowMA = na
var float emaUpperBand = na
var float emaLowerBand = na
float emaLine = dealMode == '🔧Internal' and emaFilterEnabled ? request.security(symbol = syminfo.tickerid, timeframe = emaTimeframe, expression = ta.ema(emaSrc, emaLength)[1]) : na
if (dealMode == '🔧Internal')
    // The EMA filter
    var bool emaLongApproval = true
    var bool emaShortApproval = true
    if (emaFilterEnabled)
        float emaAtr = ta.atr(filterAtrLength)
        emaUpperBand := emaLine + filterAtrMul * emaAtr
        emaLowerBand := emaLine - filterAtrMul * emaAtr
        float emaLongLine = emaAtrBandEnabled ? emaUpperBand : emaLine
        float emaShortLine = emaAtrBandEnabled ? emaLowerBand : emaLine
        emaLongApproval := close > emaLongLine and open > emaLongLine
        emaShortApproval := close < emaShortLine and open < emaShortLine
    
    // The ADX filter
    [_, _, adx] = ta.dmi(diLength, adxSmoothing)
    bool adxApproval = adxFilterEnabled ? adx > adxThreshold : true
    
    // The overall filter approvals for each direction
    bool longFiltersApproval = emaLongApproval and adxApproval
    bool shortFiltersApproval = emaShortApproval and adxApproval
    
    // The fast and slow moving averages
    fastMA := eta.ma(close, fastMAType, fastMALen)
    slowMA := eta.ma(close, slowMAType, slowMALen)
    
    // Then main logic for starting and ending deals is based on crossover/crossunder conditions
    bool crossover = exiu.eval_cond(fastMA, 'crossover', slowMA)
    bool crossunder = exiu.eval_cond(fastMA, 'crossunder', slowMA)
    
    // The internal start end cancel signals. Those should match with the "Two MA Signal Indicator" deal conditions
    startLongDealInternal := longDealsEnabled ? crossover and longFiltersApproval : false
    startShortDealInternal := shortDealsEnabled ? crossunder and shortFiltersApproval : false
    endLongDealInternal := endDealsEnabled and longDealsEnabled ? crossunder : false
    endShortDealInternal := endDealsEnabled and shortDealsEnabled ? crossover : false
    cnlStartLongDealInternal := cnlStartDealsEnabled and longDealsEnabled ? not longFiltersApproval and longFiltersApproval[1] : false
    cnlStartShortDealInternal := cnlStartDealsEnabled and shortDealsEnabled ? not shortFiltersApproval and shortFiltersApproval[1] : false
    cnlEndLongDealInternal := cnlEndDealsEnabled and endDealsEnabled and longDealsEnabled ? longFiltersApproval and not longFiltersApproval[1] : false
    cnlEndShortDealInternal := cnlEndDealsEnabled and endDealsEnabled and shortDealsEnabled ? shortFiltersApproval and not shortFiltersApproval[1] : false
// Start deals should happen when the main logic applies and the filters for that direction are approved
bool startLongDeal = dealMode == '🔧Internal' ? startLongDealInternal : exiu.eval_cond(externalInput, startLongDealOperator, startLongDealValue)
bool startShortDeal = dealMode == '🔧Internal' ? startShortDealInternal : exiu.eval_cond(externalInput, startShortDealOperator, startShortDealValue)
// End deals should happen when the main logic applies
bool endLongDeal = dealMode == '🔧Internal' ? endLongDealInternal : exiu.eval_cond(externalInput, endLongDealOperator, endLongDealValue)
bool endShortDeal = dealMode == '🔧Internal' ? endShortDealInternal : exiu.eval_cond(externalInput, endShortDealOperator, endShortDealValue)
// If you using limit, stop or stop-limit orders for the entry and not entered yet you may want to cancel if the conditions are not still favorable to the initial direction
bool cnlStartLongDeal = dealMode == '🔧Internal' ? cnlStartLongDealInternal : exiu.eval_cond(externalInput, cnlStartLongDealOperator, cnlStartLongDealValue)
bool cnlStartShortDeal = dealMode == '🔧Internal' ? cnlStartShortDealInternal : exiu.eval_cond(externalInput, cnlStartShortDealOperator, cnlStartShortDealValue)
// If you using limit, stop or stop-limit orders for exit and not exited yet you may want to cancel if the conditions turned favorable again to the initial direction
bool cnlEndLongDeal = dealMode == '🔧Internal' ? cnlEndLongDealInternal : exiu.eval_cond(externalInput, cnlEndLongDealOperator, cnlEndLongDealValue)
bool cnlEndShortDeal = dealMode == '🔧Internal' ? cnlEndShortDealInternal : exiu.eval_cond(externalInput, cnlEndShortDealOperator, cnlEndShortDealValue)
// Check if there is no current position and the reverse orders are enabled
bool reverseOrderApproval = reverseOrdersEnabled ? true : isFlatPosition
// Check the bars since last trade completion with the given number of cooldown bars
int barsSinceCompletedLong = nz(ta.barssince(completedLongTrade), maxLimitInt)
int barsSinceCompletedShort = nz(ta.barssince(completedShortTrade), maxLimitInt)
bool cooldownApproval = cooldownEnabled ? math.min(barsSinceCompletedLong, barsSinceCompletedShort) >= cooldownBars : true
// Open new position if all conditions are met
bool openLongPosition = timeFilterApproval and startLongDeal and cooldownApproval and reverseOrderApproval
bool openShortPosition = timeFilterApproval and startShortDeal and cooldownApproval and reverseOrderApproval
// If there is a new end deal condition this will also cancel the previous start deal (if posible)
bool cnlOpenLongPosition = (timeFilterApproval and cnlStartLongDeal) or (not timeFilterApproval and timeFilterApproval[1])
bool cnlOpenShortPosition = (timeFilterApproval and cnlStartShortDeal) or (not timeFilterApproval and timeFilterApproval[1])
// The open signals when not already into a position
bool validOpenLongPosition = openLongPosition and not isLongPosition
bool validOpenShortPosition = openShortPosition and not isShortPosition
bool validOpenPosition = validOpenLongPosition or validOpenShortPosition
// PLOT ================================================================================================================
plot(series = externalInput, title = 'External Input', color = color.olive, display = dealMode == '🔨External' ? display.data_window : display.none)
var color emaLineColor = color.new(color.silver, 0)
plot(series = emaLine, color = emaLineColor, style = plot.style_linebr, linewidth = 2, title = 'EMA Line', display = dealMode == '🔧Internal' and emaFilterEnabled ? display.all - display.status_line : display.none)
var color emaBandFillColor = dealMode == '🔧Internal' and emaFilterEnabled and emaAtrBandEnabled ? color.new(emaLineColor, 90) : na
emaUpperBandPlot = plot(series = emaUpperBand, color = emaBandFillColor, style = plot.style_linebr, title = 'EMA Upper Band', display = display.data_window)
emaLowerBandPlot = plot(series = emaLowerBand, color = emaBandFillColor, style = plot.style_linebr, title = 'EMA Lower Band', display = display.data_window)
fill(plot1 = emaUpperBandPlot, plot2 = emaLowerBandPlot, color = emaBandFillColor, title = 'EMA Band')
var color fastColor = color.new(color.yellow, 0)
plot(series = fastMA, title = 'Fast MA', color = fastColor, linewidth = 1, style = plot.style_line, display = dealMode == '🔧Internal' ? display.all - display.status_line : display.none)
var color slowColor = color.new(color.orange, 0)
plot(series = slowMA, title = 'Slow MA', color = slowColor, linewidth = 1, style = plot.style_line, display = dealMode == '🔧Internal' ? display.all - display.status_line : display.none)
//#endregion ===========================================================================================================
//#region 🎢 VOLATILITY
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for general purpose volatility variable that needed for several other modules
// Dependencies: NONE
// Results: negAtr, posAtr, negStDev, posStDev
import HeWhoMustNotBeNamed/arraymethods/1 as arraymethods
import HeWhoMustNotBeNamed/arrayutils/22 as pa
// INPUT ===============================================================================================================
atrMethod = input.string(defval = 'STATIC', title = 'ATR Method', options = ['STATIC', 'DYNAMIC', 'LADDER'], tooltip = 'The method to calculate the ATR used for the trailing. Use the ATR value at the time of open signal throughout the whole trade (STATIC), or use the current ATR value (DYNAMIC), or the ATR only of the green/red bars when try to enter/exit the trade (LADDER).', group = '🎢 Volatility')
atrMaType = str.lower(input.string(defval = 'RMA', title = '  ATR Smooth Type/Len   ', options = ['SMA', 'EMA', 'RMA', 'WMA', 'HMA'], inline = 'ATR', group = '🎢 Volatility'))
atrLength = input.int(defval = 14, title = '​​​​​​​​​​​​​​​​​​​​​​', minval = 1, tooltip = 'The smoothing type and the length to be used for the ATR calculation.', inline = 'ATR', group = '🎢 Volatility')
stdevMethod = input.string(defval = 'STATIC', title = 'StDev Method', options = ['STATIC', 'DYNAMIC', 'LADDER'], tooltip = 'The method to calculate the standard deviation used for the trailing. Use the StDev value at the time of open signal throughout the whole trade (STATIC), or use the current StDev value (DYNAMIC), or the StDev only of the green/red bars when try to enter/exit the trade (LADDER).', group = '🎢 Volatility')
stdevMode = input.string(defval = 'PRICE', title = '  StDev Mode', options = ['PRICE', 'RETURN'], tooltip = 'Use the "PRICE" as source for the standard deviation calculations. Or use "RETURN" to use the log returns of the price as source for the standard deviation.', group = '🎢 Volatility')
stdevPriceSrc = exiu.str_to_src(input.string(defval = 'close', title = '  StDev Src/Len      ​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', options = ['open', 'high', 'low', 'close', 'hl2', 'hlc3', 'ohlc4', 'hlcc4'], inline = 'StDev', group = '🎢 Volatility'))
stdevLength = input.int(defval = 20, title = '​​​​​​​​​​​​​​​​​​​​​​​', minval = 1, tooltip = 'The source and the length to be used for the StDev calculation.', inline = 'StDev', group = '🎢 Volatility')
// LOGIC ===============================================================================================================
// Calculate atr and StDev based on method selected, static atr when last open signal was emitted, dynamic is the current atr/stdev that change over time, ladder atr/stdev for positive and negative bars
var float[] positiveTrs = array.new<float>()
var float[] negativeTrs = array.new<float>()
var float[] positiveStDevs = array.new<float>()
var float[] negativeStDevs = array.new<float>()
if (atrMethod == 'LADDER')
    if(close > open)
        positiveTrs.push(ta.tr(true), atrLength)
    else
        negativeTrs.push(ta.tr(true), atrLength)
if (stdevMethod == 'LADDER')
    float stdevSrc = stdevMode == 'PRICE' ? stdevPriceSrc : math.log(stdevPriceSrc/stdevPriceSrc[1])
    if(close > open)
        positiveStDevs.push(stdevSrc, stdevLength)
    else
        negativeStDevs.push(stdevSrc, stdevLength)
float dynamicAtr = eta.ma(ta.tr(true), atrMaType, atrLength)
float staticAtr = ta.valuewhen(validOpenPosition, dynamicAtr, 0)
float dynamicStDev = ta.stdev(stdevPriceSrc, stdevLength)
float staticStDev = ta.valuewhen(validOpenPosition, dynamicStDev, 0)
float negAtr = switch atrMethod
    'STATIC' => staticAtr
    'DYNAMIC' => dynamicAtr
    'LADDER' => pa.ma(negativeTrs, atrMaType, atrLength)
    => na
float posAtr = switch atrMethod
    'STATIC' => staticAtr
    'DYNAMIC' => dynamicAtr
    'LADDER' => pa.ma(positiveTrs, atrMaType, atrLength)
    => na
float negStDev = switch stdevMethod
    'STATIC' => staticStDev
    'DYNAMIC' => dynamicStDev
    'LADDER' => stdevMode == 'PRICE' ? negativeStDevs.stdev(false) : stdevPriceSrc * (math.exp(negativeStDevs.stdev(false)) - 1.0)
    => na
float posStDev = switch stdevMethod
    'STATIC' => staticStDev
    'DYNAMIC' => dynamicStDev
    'LADDER' => stdevMode == 'PRICE' ? positiveStDevs.stdev(false) : stdevPriceSrc * (math.exp(positiveStDevs.stdev(false)) - 1.0)
    => na
//#endregion ===========================================================================================================
//#region 📏 DISTANCE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for general purpose distance calculations used by other modules
// Dependencies: NONE
// Results: NONE
import jason5480/distance_ratio/11 as dr
import jason5480/biased_price_target/2 as biased_price_target
// LOGIC ===============================================================================================================
getUpwardsMovingBarrierPrice(simple string barrier) =>
    barrier == 'FRONT' ? high : low
getDownwardsMovingBarrierPrice(simple string barrier) =>
    barrier == 'FRONT' ? low : high
longBiasedAuxData = dr.AuxData.new(atr = posAtr, stdev = posStDev)
shortBiasedAuxData = dr.AuxData.new(atr = negAtr, stdev = negStDev)
//#endregion ===========================================================================================================
//#region 🔷 ENTRY
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the entry logic implementation based on order type
// Dependencies: TRACK POSITION, STRATEGY 1, VOLATILITY, DISTANCE
// Results: longIsActive, validCnlOpenLongPosition, longLimitOrStopEntryIsActive, shortIsActive, validCnlOpenShortPosition, shortLimitOrStopEntryIsActive, longEntryPrice, shortEntryPrice
// INPUT ===============================================================================================================
longEntryColor = input.color(defval = color.new(#2962FF, 0), title = '🎨️ Entry Color Long/Short ', inline = 'Entry', group = '🔷 Entry')
shortEntryColor = input.color(defval = color.new(#FF1744, 0), title = '​​​​​​​​​​​​​​​​​​​​​​​​', tooltip = 'The color of the long/short limit, stop and stop-limit entry prices.', inline = 'Entry', group = '🔷 Entry')
posColor = input.color(defval = color.new(color.gray, 0), title = '🎨️ Position Entry Price Color', tooltip = 'The color of the position entry price.', group = '🔷 Entry')
entryOrderType = input.string(defval = 'MARKET', title = 'Order Type​', options = ['MARKET', 'LIMIT', 'STOP', 'STOP-LIMIT'], tooltip = 'Use market order to enter at the open of the next bar (MARKET), or use limit order to enter at a "better" price defined by the distance from the close price and the limit mode (LIMIT), or use stop market order to enter at a "worst" price defined by the distance from the close price and the limit mode (STOP), or use stop-limit order to enter at a "worst" price defined by the distance from the close price and the limit mode (STOP-LIMIT).', group = '🔷 Entry')
entryStopLimitMarginMethod = input.string(defval = 'ATR', title = '  Stop-Limit Mar Method', options = ['ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the margin used for the entry stop-limit orders. Offset the limit price target by a multiple of the ATR value (ATR), or by a multiple of the StDev value (STDEV), or by a number of ticks (TICKS)', group = '🔷 Entry')
entryStopLimitMarMul = input.float(defval = 0.5, title = '  Stop-Limit Mar Mul', step = 0.1, tooltip = 'The acceptable margin for the entry stop-limit orders is defined by this multiplier and it is applied either as percentage or atr multiplier or ticks, based on the "Stop-Limit Margin Method".', group = '🔷 Entry')
entryLimitMode = input.string(defval = 'FIXED', title = 'Limit Mode​', options = ['FIXED', 'TRAIL'], tooltip = 'When you use limit, stop or stop-limit orders to enter, use a fixed price defined by the distance and the close price when the open signal occurs (FIXED), or trail by following the price to the direction of the entry for limit orders or the other direction of the entry for stop and stop-limit orders (TRAIL).', group = '🔷 Entry')
entryTrailBarrier = input.string(defval = 'FRONT', title = '  Trail Barrier​​', options = ['FRONT', 'REAR'], tooltip = 'The price reference that will be used for the entry trailing logic. For entering into a position with a LIMIT order, follow the high for long and low for short (FRONT), or follow the low for long and high for short (REAR). For the STOP and STOP-LIMIT orders the logic is reversed.', group = '🔷 Entry')
var entryDistSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'ATR', title = 'Distance Method​', options = ['PERC', 'ATR', 'STDEV', 'TICKS', 'HHLL'], tooltip = 'The method to calculate the distance of the limit, stop and stop-limit entry. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS) or Highest high/Lowest low (HHLL).', group = '🔷 Entry'),
  distMul = input.float(defval = 1.0, title = '  Dist Mul|Len​', minval = 0.01, step = 0.05, tooltip = 'The distance multiplier or length to define the entry price from close when the open signal occurs or from the barrier price when trailing. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the HHLL method is used, then the length will define the window for the highest high and lowest low calculations.', group = '🔷 Entry'))
var entryMarSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'TICKS', title = 'Margin Distance Method​', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the margin to offset the distance of the limit, stop and stop-limit entry price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🔷 Entry'),
  distMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Distance Entry Margin', group = '🔷 Entry') ?
             input.float(defval = 5.0, title = 'Mar Dist Mul       ​', step = 0.5, tooltip = 'The margin multiplier to define the entry distance offset.', inline = 'Distance Entry Margin', group = '🔷 Entry') : na)
var entryRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.string(defval = 'PERC', title = 'Restrict Distance Method​', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the maximum/minimum distance of the entry price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🔷 Entry'),
  minDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Entry Min Distance', group = '🔷 Entry') ?
               input.float(defval = 1.0, title = 'Min Dist Mul       ​', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the entry will not be placed too close from the reference price. Otherwise, a tight entry price would make the entry to easily be reached during volatile market conditions.', inline = 'Entry Min Distance', group = '🔷 Entry') : na,
  maxDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Entry Max Distance', group = '🔷 Entry') ?
               input.float(defval = 4.0, title = 'Max Dist Mul       ​', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the entry will not be placed too far from the reference price. Otherwise, a loose entry price would risk to not be reached in a timely manner.', inline = 'Entry Max Distance', group = '🔷 Entry') : na)
treatCloseAsCancel = input.bool(defval = false, title = 'Treat Close as Cancel', tooltip = 'If enabled the invalid close position signals will be treated as cancel open signals to cancel limit, stop and stop-limit entry orders.', group = '🔷 Entry')
// LOGIC ===============================================================================================================
// Mark when long position is active
bool longIsActive = validOpenLongPosition or isLongPosition
// The long cancel open signal
var bool validCnlOpenLongPosition = false
// Count how far are the last long valid cancel open, open, entry and valid open signals
int barsSinceValidOpenLong = nz(ta.barssince(validOpenLongPosition), maxLimitInt)
int barsSinceValidCnlOpenLong = nz(ta.barssince(validCnlOpenLongPosition), maxLimitInt)
int barsSinceEnteredLong = nz(ta.barssince(enteredLongTrade), maxLimitInt)
bool openLongIsActive = barsSinceValidCnlOpenLong > barsSinceValidOpenLong // validCancelOpen -> validOpen
bool enterLongIsPending = barsSinceEnteredLong >= barsSinceValidOpenLong // entered -> validOpen
// Validate the long cancel open signal when not already into a position
validCnlOpenLongPosition := entryOrderType != 'MARKET' ? (cnlOpenLongPosition or validOpenShortPosition or (treatCloseAsCancel ? timeFilterApproval and endLongDeal : false)) and not isLongPosition and openLongIsActive and enterLongIsPending and not validOpenLongPosition : false
float entryHighestHigh = ta.highest(high, math.max(math.floor(entryDistSettings.distMul), 1))
// Calculate the actual entry price from the reference using a long biased distance with a downwards moving potential
getLongEntryHigherPrice(float referencePrice) =>
    entryDistSettings.higher_long_biased_price(referencePrice, longBiasedAuxData, entryRestrictSettings, entryMarSettings, entryHighestHigh)
float entryLowestLow = ta.lowest(low, math.max(math.floor(entryDistSettings.distMul), 1))
// Calculate the actual entry price from the reference using a long biased distance with an upwards moving potential
getLongEntryLowerPrice(float referencePrice) =>
    entryDistSettings.lower_long_biased_price(referencePrice, longBiasedAuxData, entryRestrictSettings, entryMarSettings, entryLowestLow)
var float longLimitOrStopEntryPrice = na
bool isFirstValidOpenLongPosition = entryOrderType != 'MARKET' ? validOpenLongPosition and (na(longLimitOrStopEntryPrice[1]) or completedLongTrade) : false
bool tryEnterLongPosition = entryOrderType != 'MARKET' ? timeFilterApproval and not isLongPosition and not completedLongTrade and not na(longLimitOrStopEntryPrice[1]) and not validCnlOpenLongPosition : false
longLimitOrStopEntryPrice := if (isFirstValidOpenLongPosition)
    if (entryOrderType == 'LIMIT')
        getLongEntryLowerPrice(close)
    else if (entryOrderType == 'STOP' or entryOrderType == 'STOP-LIMIT')
        getLongEntryHigherPrice(close)
else if (tryEnterLongPosition)
    if (entryLimitMode == 'TRAIL' or (entryLimitMode == 'FIXED' and validOpenLongPosition))
        if (entryOrderType == 'LIMIT')
            math.max(getLongEntryLowerPrice(getUpwardsMovingBarrierPrice(entryTrailBarrier)), nz(longLimitOrStopEntryPrice[1], minLimitFloat))
        else if (entryOrderType == 'STOP' or entryOrderType == 'STOP-LIMIT')
            math.min(getLongEntryHigherPrice(getDownwardsMovingBarrierPrice(entryTrailBarrier)), nz(longLimitOrStopEntryPrice[1], maxLimitFloat))
    else
        nz(longLimitOrStopEntryPrice[1], maxLimitFloat)
float longStopLimitEntryPrice = entryOrderType == 'STOP-LIMIT' ? longLimitOrStopEntryPrice + entryStopLimitMarMul * (entryStopLimitMarginMethod == 'ATR' ? posAtr : entryStopLimitMarginMethod == 'STDEV' ? posStDev : syminfo.mintick) : na
var bool longStopLimitStopEntryExecuted = false
if (ta.crossover(high, longLimitOrStopEntryPrice) and entryOrderType == 'STOP-LIMIT')
    longStopLimitStopEntryExecuted := true
else if (enteredLongTrade)
    longStopLimitStopEntryExecuted := false
bool longLimitOrStopEntryIsActive = not na(longLimitOrStopEntryPrice)
// Mark when short position is active
bool shortIsActive = validOpenShortPosition or isShortPosition
// The short cancel open signal
var bool validCnlOpenShortPosition = false
// Count how far are the last short valid cancel open, open, entry and valid open signals
int barsSinceValidOpenShort = nz(ta.barssince(validOpenShortPosition), maxLimitInt)
int barsSinceValidCnlOpenShort = nz(ta.barssince(validCnlOpenShortPosition), maxLimitInt)
int barsSinceEnteredShort = nz(ta.barssince(enteredShortTrade), maxLimitInt)
bool openShortIsActive = barsSinceValidCnlOpenShort > barsSinceValidOpenShort // validCancelOpen -> validOpen
bool enterShortIsPending = barsSinceEnteredShort >= barsSinceValidOpenShort // entered -> validOpen
// Validate the short cancel open signal when not already into a position
validCnlOpenShortPosition := entryOrderType != 'MARKET' ? (cnlOpenShortPosition or validOpenLongPosition or (treatCloseAsCancel ? timeFilterApproval and endShortDeal : false)) and not isShortPosition and openShortIsActive and enterShortIsPending and not validOpenShortPosition : false
// Calculate the actual entry price from the reference using a short biased distance with a downwards moving potential
getShortEntryHigherPrice(float referencePrice) =>
    entryDistSettings.higher_short_biased_price(referencePrice, shortBiasedAuxData, entryRestrictSettings, entryMarSettings, entryHighestHigh)
// Calculate the actual entry price from the reference using a short biased distance with an upwards moving potential
getShortEntryLowerPrice(float referencePrice) =>
    entryDistSettings.lower_short_biased_price(referencePrice, shortBiasedAuxData, entryRestrictSettings, entryMarSettings, entryLowestLow)
var float shortLimitOrStopEntryPrice = na
bool isFirstValidOpenShortPosition = entryOrderType != 'MARKET' ? validOpenShortPosition and (na(shortLimitOrStopEntryPrice[1]) or completedShortTrade) : false
bool tryEnterShortPosition = entryOrderType != 'MARKET' ? timeFilterApproval and not isShortPosition and not completedShortTrade and not na(shortLimitOrStopEntryPrice[1]) and not validCnlOpenShortPosition : false
shortLimitOrStopEntryPrice := if (isFirstValidOpenShortPosition)
    if (entryOrderType == 'LIMIT')
        getShortEntryHigherPrice(close)
    else if (entryOrderType == 'STOP' or entryOrderType == 'STOP-LIMIT')
        getShortEntryLowerPrice(close)
else if (tryEnterShortPosition)
    if (entryLimitMode == 'TRAIL' or (entryLimitMode == 'FIXED' and validOpenShortPosition))
        if (entryOrderType == 'LIMIT')
            math.min(getShortEntryHigherPrice(getDownwardsMovingBarrierPrice(entryTrailBarrier)), nz(shortLimitOrStopEntryPrice[1], maxLimitFloat))
        else if (entryOrderType == 'STOP' or entryOrderType == 'STOP-LIMIT')
            math.max(getShortEntryLowerPrice(getUpwardsMovingBarrierPrice(entryTrailBarrier)), nz(shortLimitOrStopEntryPrice[1], minLimitFloat))
    else
        nz(shortLimitOrStopEntryPrice[1], minLimitFloat)
float shortStopLimitEntryPrice = entryOrderType == 'STOP-LIMIT' ? shortLimitOrStopEntryPrice - entryStopLimitMarMul * (entryStopLimitMarginMethod == 'ATR' ? negAtr : entryStopLimitMarginMethod == 'STDEV' ? negStDev : syminfo.mintick) : na
var bool shortStopLimitStopEntryExecuted = false
if (ta.crossunder(low, shortLimitOrStopEntryPrice) and entryOrderType == 'STOP-LIMIT')
    shortStopLimitStopEntryExecuted := true
else if (enteredShortTrade)
    shortStopLimitStopEntryExecuted := false
bool shortLimitOrStopEntryIsActive = not na(shortLimitOrStopEntryPrice)
// Bar index when the entered the last long and short trades
int longEntryBarId = ta.valuewhen(enteredLongTrade, entryOrderType == 'MARKET' ? bar_index[1] : bar_index, 0)
int shortEntryBarId = ta.valuewhen(enteredShortTrade, entryOrderType == 'MARKET' ? bar_index[1] : bar_index, 0)
// Current entry position price
float posPrice = strategy.opentrades.entry_price(strategy.opentrades - 1)
// Price when entered a position or potential entry price in case of limit, stop and stop-limit orders
float longEntryPrice = not na(posPrice) and isLongPosition and not validOpenLongPosition ? posPrice
                     : longLimitOrStopEntryIsActive ? longStopLimitStopEntryExecuted ? longStopLimitEntryPrice : longLimitOrStopEntryPrice
                     : validOpenLongPosition and entryOrderType == 'MARKET' ? close
                     : na
float shortEntryPrice = not na(posPrice) and isShortPosition and not validOpenShortPosition ? posPrice
                     : shortLimitOrStopEntryIsActive ? shortStopLimitStopEntryExecuted ? shortStopLimitEntryPrice : shortLimitOrStopEntryPrice
                     : validOpenShortPosition and entryOrderType == 'MARKET' ? close
                     : na
// PLOT ================================================================================================================
var color textColor = color.new(color.white, 0)
if (validCnlOpenLongPosition and showCnlOpenLabels and barstate.isconfirmed)
    label.new(x = bar_index, y = nz(longLimitOrStopEntryPrice[1], close), text = 'Cancel', yloc = yloc.price, color = longCnlOpenColor, style = entryOrderType == 'LIMIT' ? label.style_label_up : label.style_label_down, textcolor = textColor)
if (validCnlOpenShortPosition and showCnlOpenLabels and barstate.isconfirmed)
    label.new(x = bar_index, y = nz(shortLimitOrStopEntryPrice[1], close), text = 'Cancel', yloc = yloc.price, color = shortCnlOpenColor, style = entryOrderType == 'LIMIT' ? label.style_label_down : label.style_label_up, textcolor = textColor)
longLimitOrStopEntryPlot = plot(series = longLimitOrStopEntryPrice, title = 'Long Limit or Stop Entry Price', color = longStopLimitStopEntryExecuted ? na : longEntryColor, linewidth = 1, style = plot.style_linebr, offset = 1)
longStopLimitEntryPlot = plot(series = longStopLimitEntryPrice, title = 'Long Stop-Limit Entry Price', color = longStopLimitStopEntryExecuted ? longEntryColor : na, linewidth = 1, style = plot.style_linebr, offset = 1, display = display.pane + display.data_window)
var color longEntryFillColor = entryOrderType == 'STOP-LIMIT' and entryStopLimitMarMul > 0.0 ? color.new(longEntryColor, 90) : na
fill(plot1 = longLimitOrStopEntryPlot, plot2 = longStopLimitEntryPlot, color = longEntryFillColor, title = 'Long Stop-Limit Margin')
shortLimitOrStopEntryPlot = plot(series = shortLimitOrStopEntryPrice, title = 'Short Limit or Stop Entry Price', color = shortStopLimitStopEntryExecuted ? na : shortEntryColor, linewidth = 1, style = plot.style_linebr, offset = 1)
shortStopLimitEntryPlot = plot(series = shortStopLimitEntryPrice, title = 'Short Stop-Limit Entry Price', color = shortStopLimitStopEntryExecuted ? shortEntryColor : na, linewidth = 1, style = plot.style_linebr, offset = 1, display = display.pane + display.data_window)
var color shortEntryFillColor = entryOrderType == 'STOP-LIMIT' and entryStopLimitMarMul > 0.0 ? color.new(shortEntryColor, 90) : na
fill(plot1 = shortLimitOrStopEntryPlot, plot2 = shortStopLimitEntryPlot, color = shortEntryFillColor, title = 'Short Stop-Limit Margin')
//#endregion ===========================================================================================================
//#region 🎯 TAKE PROFIT 1
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the take profit logic implementation based on the method and the number of step take profit targets and the trailing distance
// Dependencies: TRACK POSITION
// Results: takeProfitTargetsSize, longTrailTakeProfitExecuted, shortTrailTakeProfitExecuted, longIthTrailTakeProfitExecuted, shortIthTrailTakeProfitExecuted, highestHighSinceLongEntry, lowestLowSinceShortEntry
// INPUT ===============================================================================================================
takeProfitColor = input.color(defval = color.new(color.teal, 0), title = '🎨️ Take Profit Color', tooltip = 'The color of the take profit price target lines.', group = '🎯 Take Profit')
numOfTakeProfitTargets = input.int(defval = 1, title = 'Take Profit Targets', minval = 0, maxval = 5, tooltip = 'The number of take profit targets to be set for each entry. The first target is the initial target and every additional target is a step target.', group = '🎯 Take Profit')
// LOGIC ===============================================================================================================
// Arrays with the updated take Profit Prices
var float[] longTakeProfitPrices = array.new<float>(numOfTakeProfitTargets, na)
var float[] shortTakeProfitPrices = array.new<float>(numOfTakeProfitTargets, na)
// Arrays with the trailing take profit ticks
var int[] longTrailTakeProfitOffsetTicks = array.new<int>(numOfTakeProfitTargets, na)
var int[] shortTrailTakeProfitOffsetTicks = array.new<int>(numOfTakeProfitTargets, na)
// Take profit has to communicate the execution of take profit targets with the stop loss logic when 'TP' mode is selected
var bool[] longTrailTakeProfitExecuted = array.new<bool>(numOfTakeProfitTargets, false)
var bool[] shortTrailTakeProfitExecuted = array.new<bool>(numOfTakeProfitTargets, false)
// Take profit related tables size used for for...to loops
var int takeProfitTargetsSize = numOfTakeProfitTargets - 1 >= 0 ? numOfTakeProfitTargets - 1 : na
// Count the Take Profit targets that executed
int longTrailTakeProfitExecutedCount = 0
int shortTrailTakeProfitExecutedCount = 0
// Calculate the highest high since the long entry
var float highestHighSinceLongEntry = na
if (enteredLongTrade)
    highestHighSinceLongEntry := high
else if (isLongPosition or completedLongTrade)
    highestHighSinceLongEntry := math.max(high, nz(highestHighSinceLongEntry[1], high))
for [i, longTakeProfitPrice] in longTakeProfitPrices
    bool justExecuted = false
    for j = 0 to takeProfitTargetsSize + 1
        justExecuted := justExecuted or (strategy.closedtrades > j ? bar_index == strategy.closedtrades.exit_bar_index(strategy.closedtrades - 1 - j) and strategy.closedtrades.exit_id(strategy.closedtrades - 1 - j) == str.format(exitOrderIdPattern1, longOrderIdPrefix, i + 1) and strategy.closedtrades.profit(strategy.closedtrades - 1 - j) > 0.0 : false)
    bool executed = isLongPosition or completedLongTrade ? (longTrailTakeProfitExecuted.get(i) or (justExecuted and highestHighSinceLongEntry >= longTakeProfitPrice)) : false
    longTrailTakeProfitExecuted.set(i, executed)
    if (executed)
        longTrailTakeProfitExecutedCount := longTrailTakeProfitExecutedCount + 1
// Calculate the lowest low since the short entry
var float lowestLowSinceShortEntry = na
if (enteredShortTrade)
    lowestLowSinceShortEntry := low
else if (isShortPosition or completedShortTrade)
    lowestLowSinceShortEntry := math.min(low, nz(lowestLowSinceShortEntry[1], low))
for [i, shortTakeProfitPrice] in shortTakeProfitPrices
    bool justExecuted = false
    for j = 0 to takeProfitTargetsSize + 1
        justExecuted := justExecuted or (strategy.closedtrades > j ? bar_index == strategy.closedtrades.exit_bar_index(strategy.closedtrades - 1 - j) and strategy.closedtrades.exit_id(strategy.closedtrades - 1 - j) == str.format(exitOrderIdPattern1, shortOrderIdPrefix, i + 1) and strategy.closedtrades.profit(strategy.closedtrades - 1 - j) > 0.0 : false)
    bool executed = isShortPosition or completedShortTrade ? (shortTrailTakeProfitExecuted.get(i) or (justExecuted and lowestLowSinceShortEntry <= shortTakeProfitPrice)) : false
    shortTrailTakeProfitExecuted.set(i, executed)
    if (executed)
        shortTrailTakeProfitExecutedCount := shortTrailTakeProfitExecutedCount + 1
// Check if the i-th Take Profit target was executed
longIthTrailTakeProfitExecuted(int i) =>
    numOfTakeProfitTargets >= i ? longTrailTakeProfitExecuted.get(i - 1) : false
shortIthTrailTakeProfitExecuted(int i) =>
    numOfTakeProfitTargets >= i ? shortTrailTakeProfitExecuted.get(i - 1) : false
//#endregion ===========================================================================================================
//#region 🛑 STOP LOSS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the stop loss logic implementation based on the method and the trailing mode
// Dependencies: VOLATILITY, DISTANCE, ENTRY, TAKE PROFIT 1
// Results: longStopLossPrice, shortStopLossPrice, longStopLossRatio, shortStopLossRatio, longEntryStopLossRatio, shortEntryStopLossPerc
// INPUT ===============================================================================================================
stopLossColor = input.color(defval = color.new(color.maroon, 0), title = '🎨️ Stop Loss Color', tooltip = 'The color of the stop loss price.', group = '🛑 Stop Loss')
var longStopLossDistSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'ATR', title = 'Stop Loss Distance Method', options = ['PERC', 'ATR', 'STDEV', 'TICKS', 'HHLL'], tooltip = 'The method to calculate the distance of the stop loss price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS) or Highest high/Lowest low (HHLL).', group = '🛑 Stop Loss'),
  distMul = input.float(defval = 3.0, title = '  Dist Mul|Len Long/Short  ', minval = 0.05, step = 0.05, inline = 'Stop Loss Distance Perc', group = '🛑 Stop Loss'))
var stopLossMarSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'ATR', title = 'Margin Distance Method​​', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the margin to offset the distance of the stop loss price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🛑 Stop Loss'),
  distMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Stop Loss Distance Margin', group = '🛑 Stop Loss') ?
             input.float(defval = 0.5, title = 'Mar Dist Mul       ​​', step = 0.5, tooltip = 'The margin multiplier to define the stop loss distance offset.', inline = 'Stop Loss Distance Margin', group = '🛑 Stop Loss') : na)
var stopLossRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.string(defval = 'PERC', title = 'Restrict Distance Method​​', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the maximum/minimum distance of the stop loss price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🛑 Stop Loss'),
  minDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Stop Loss Min Distance', group = '🛑 Stop Loss') ?
               input.float(defval = 1.0, title = 'Min Dist Mul       ​​', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the stop loss will not be placed too close from the entry price. Otherwise, a tight stop loss price would make the stop loss to easily be reached during volatile market conditions.', inline = 'Stop Loss Min Distance', group = '🛑 Stop Loss') : na,
  maxDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Stop Loss Max Distance', group = '🛑 Stop Loss') ?
               input.float(defval = 10.0, title = 'Max Dist Mul       ​​', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the stop loss will not be placed too far from the entry price. Otherwise, a loose stop loss price would increase the max drawdown and losses when it is reached.', inline = 'Stop Loss Max Distance', group = '🛑 Stop Loss') : na)
var shortStopLossDistSettings = dr.DistSettings.new(
  distMethod = longStopLossDistSettings.distMethod,
  distMul = input.float(defval = 3.0, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 0.05, step = 0.05, tooltip = 'The distance multiplier to define the long/short stop loss price from the close price when the open signal occurs or from the barrier price when trailing. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the HHLL method is used, then the length will define the window for the highest high and lowest low calculations.', inline = 'Stop Loss Distance Perc', group = '🛑 Stop Loss'))
stopLossMoveActMode = input.string(defval = 'OFF', title = 'Move Activation Mode', options = ['OFF', 'ONCETP', 'ONCEPRICE', 'MULTITP', 'MULTIPRICE'], tooltip = 'Move the stop loss to the entry price (a.k.a breakeven) when the activation take profit price target is reached (ONCETP), or move the stop loss to the entry price (a.k.a breakeven) when the current price moves away from the entry by a distance (ONCEPRICE), or move the stop loss to the previous take profit price target every time a new take profit is reached (MULTITP), or move the stop loss to the previous distance from entry price every time the price moves away from the entry by a distance (MULTIPRICE). Thus, more than one take profit price target is needed to see a difference between the ONCETP and MULTITP modes! If both move and trailing are activated the stop loss is defined by the more strict price at any given time.', group = '🛑 Stop Loss')
stopLossMoveTPActNum = input.int(defval = 1, title = '  Act Take Profit #​', minval = 1, tooltip = 'The Take Profit number (up to the "Take Profit Targets" number set in TAKE PROFIT section) that will activate the movement of the stop loss to the entry price after it is reached. The Move Activation should be set to "ONCE".', group = '🛑 Stop Loss')
var stopLossMoveDistSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'PERC', title = '  Act Price Distance Method', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the distance of the current price from entry. Percentage based (PERC), ATR based (ATR) or Standard deviation based (STDEV) or Tick based (TICKS).', group = '🛑 Stop Loss'),
  distMul = input.float(defval = 2.0, title = '    Price Dist Mul', minval = 0.01, step = 0.05, tooltip = 'The distance multiplier to define the activation price from the entry in order to move the stop loss to breakeven. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the HHLL method is used, then the length will define the window for the highest high and lowest low calculations.', group = '🛑 Stop Loss'))
stopLossTrailActMode = input.string(defval = 'OFF', title = 'Trail Activation Mode', options = ['OFF', 'START', 'TP'], tooltip = 'Enables the trailing for the stop loss from the very beginning of the entry order (START), or when the activation take profit price target is reached (TP) or not at all (OFF).', group = '🛑 Stop Loss')
stopLossTrailTPActNum = input.int(defval = 1, title = '  Act Take Profit #​​', minval = 1, tooltip = 'The Take Profit number (up to the "Take Profit Targets" number set in TAKE PROFIT section) that will activate the trailing of the stop loss after it is reached. The Trailing Activation should be set to "TP".', group = '🛑 Stop Loss')
stopLossTrailBarrier = input.string(defval = 'REAR', title = '  Trail Barrier​​​', options = ['FRONT', 'REAR'], tooltip = 'The price reference that will be used for the stop loss trailing logic. For exiting from a position, follow the high for long and low for short (FRONT), or follow the low for long and the high for short (REAR).', group = '🛑 Stop Loss')
var longStopLossStepTrailDistSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'OFF', title = 'Trail Step Mode', options = ['ON', 'OFF'], tooltip = 'When stop loss trailining is activated the distance will trail the price according to the stop loss method so it maintains its maximum value from the current high/low (OFF), or the distance will change every time a new take profit is reached and will add the corresponding step value to the previous (ON). Thus, more than one take profit price target is needed to see a difference between two modes! If both move and trailing are activated the stop loss is defined by the more strict price at any given time.', group = '🛑 Stop Loss'),
  distMul = input.float(defval = 2.0, title = '  Step Dist Mul|Len Long/Short​', step = 0.05, inline = 'Step Distance Perc', group = '🛑 Stop Loss'))
var shortStopLossStepTrailDistSettings = dr.DistSettings.new(
  distMethod = longStopLossStepTrailDistSettings.distMethod,
  distMul = input.float(defval = 2.0, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', step = 0.05, tooltip = 'The distance multiplier or length to be added on top of the long/short stop loss distance multiplier or length after a take profit target is reached, to define the new long/short stop loss price target. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the HHLL method is used, then the step length will be added to the existing length of the window for the highest high and lowest low calculations.', inline = 'Step Distance Perc', group = '🛑 Stop Loss'))
stopLossWaitCloseConfirm = input.bool(defval = false, title = 'Wait close confirmation', tooltip = 'When this option is enabled, the stop loss will not be executed immediately but will wait for the bar close confirmation. This might cause the strategy to have greater losses than the expected. A "Close Market" alert will be triggered instead.', group = '🛑 Stop Loss')
// LOGIC ===============================================================================================================
float stopLossLowestLow = ta.lowest(low, math.max(longStopLossStepTrailDistSettings.distMethod == 'ON' ? math.floor(longStopLossDistSettings.distMul) + longTrailTakeProfitExecutedCount * math.floor(longStopLossStepTrailDistSettings.distMul) : math.floor(longStopLossDistSettings.distMul), 1))
// Calculate the actual long stop loss price that is lower from the reference using a short biased distance with an upwards moving potential
getLongStopLossPrice(float referencePrice) =>
    longStopLossSteppedDist = longStopLossDistSettings.stepped_dist(step = longStopLossStepTrailDistSettings, count = longTrailTakeProfitExecutedCount)
    longStopLossSteppedDist.lower_short_biased_price(referencePrice, shortBiasedAuxData, stopLossRestrictSettings, stopLossMarSettings, stopLossLowestLow)
// Calculate the actual long move distance price that is higher from the long entry
getLongStopLossMoveDistPrice() =>
    stopLossMoveDistSettings.price(longEntryPrice, shortBiasedAuxData)
float longStopLossMoveDistPrice = stopLossMoveActMode == 'ONCEPRICE' or stopLossMoveActMode == 'MULTIPRICE' ? getLongStopLossMoveDistPrice() : na
int longDistMovePriceCount = stopLossMoveActMode == 'MULTIPRICE' ? math.floor((highestHighSinceLongEntry - longEntryPrice) / longStopLossMoveDistPrice) : na
int chgLongDistMovePriceCount = ta.change(longDistMovePriceCount)
var bool stopLossAdjustmentIsNeeded = (entryOrderType == 'MARKET' or entryOrderType == 'STOP') and longStopLossDistSettings.distMethod != 'HHLL' and stopLossTrailActMode != 'START'
// Calculate the stop loss price when enter long position and peserve its value until the position closes
var float longStopLossPrice = na
if (longLimitOrStopEntryIsActive or validOpenLongPosition)
    longStopLossPrice := getLongStopLossPrice(longEntryPrice)
else if (enteredLongTrade and stopLossAdjustmentIsNeeded)
    longStopLossPrice := longStopLossPrice + (longEntryPrice - nz(longEntryPrice[1], longEntryPrice))
else if (isLongPosition)
    // Trailing starts when the selected take profit price is reached if 'TP' mode is set or from the very begining if 'START' mode is selected
    bool longStopLossTrailEnabled = stopLossTrailActMode == 'START' or (stopLossTrailActMode == 'TP' and longIthTrailTakeProfitExecuted(stopLossTrailTPActNum))
    float stopPrice = longStopLossTrailEnabled ? getLongStopLossPrice(getUpwardsMovingBarrierPrice(stopLossTrailBarrier)) : longStopLossPrice[1]
    stopPrice := (stopLossMoveActMode == 'ONCETP' and longTrailTakeProfitExecutedCount >= stopLossMoveTPActNum) or (stopLossMoveActMode == 'ONCEPRICE' and (highestHighSinceLongEntry - longEntryPrice) >= longStopLossMoveDistPrice) or (stopLossMoveActMode == 'MULTITP' and longTrailTakeProfitExecutedCount == 1) ? math.max(stopPrice, longEntryPrice)
               : stopLossMoveActMode == 'MULTITP' and longTrailTakeProfitExecutedCount > 1 ? math.max(stopPrice, longTakeProfitPrices.get(longTrailTakeProfitExecutedCount - 2))
               : stopLossMoveActMode == 'MULTIPRICE' and chgLongDistMovePriceCount > 0 ? math.max(stopPrice, stopPrice + longDistMovePriceCount * longStopLossMoveDistPrice)
               : stopPrice
    longStopLossPrice := math.max(stopPrice, nz(longStopLossPrice[1], minLimitFloat))
float longStopLossRatio = (longEntryPrice - longStopLossPrice) / longEntryPrice
float longEntryStopLossRatio = ta.valuewhen(enteredLongTrade, longStopLossRatio[1], 0)
float stopLossHighestHigh = ta.highest(high, math.max(shortStopLossStepTrailDistSettings.distMethod == 'ON' ? math.floor(shortStopLossDistSettings.distMul) + shortTrailTakeProfitExecutedCount * math.floor(shortStopLossStepTrailDistSettings.distMul) : math.floor(shortStopLossDistSettings.distMul), 1))
// Calculate the actual short stop loss price that is higher from the reference using a long biased distance with a downwards moving potential
getShortStopLossPrice(float referencePrice) =>
    shortStopLossSteppedDist = shortStopLossDistSettings.stepped_dist(step = shortStopLossStepTrailDistSettings, count = shortTrailTakeProfitExecutedCount)
    shortStopLossSteppedDist.higher_long_biased_price(referencePrice, longBiasedAuxData, stopLossRestrictSettings, stopLossMarSettings, stopLossHighestHigh)
// Calculate the actual short move distance that is lower from the short entry
getShortStopLossMoveDistPrice() =>
    stopLossMoveDistSettings.price(shortEntryPrice, longBiasedAuxData)
float shortStopLossMoveDistPrice = stopLossMoveActMode == 'ONCEPRICE' or stopLossMoveActMode == 'MULTIPRICE' ? getShortStopLossMoveDistPrice() : na
int shortDistMovePriceCount = stopLossMoveActMode == 'MULTIPRICE' ? math.floor((shortEntryPrice - lowestLowSinceShortEntry) / shortStopLossMoveDistPrice) : na
int chgShortDistMovePriceCount = ta.change(shortDistMovePriceCount)
// Calculate the stop loss price when enter short position and peserve its value until the position closes
var float shortStopLossPrice = na
if (shortLimitOrStopEntryIsActive or validOpenShortPosition)
    shortStopLossPrice := getShortStopLossPrice(shortEntryPrice)
else if (enteredShortTrade and stopLossAdjustmentIsNeeded)
    shortStopLossPrice := shortStopLossPrice + (shortEntryPrice - nz(shortEntryPrice[1], shortEntryPrice))
else if (isShortPosition)
    // Trailing starts when the selected take profit price is reached if 'TP' mode is set or from the very begining if 'START' mode is selected
    bool shortStopLossTrailEnabled = stopLossTrailActMode == 'START' or (stopLossTrailActMode == 'TP' and shortIthTrailTakeProfitExecuted(stopLossTrailTPActNum))
    float stopPrice = shortStopLossTrailEnabled ? getShortStopLossPrice(getDownwardsMovingBarrierPrice(stopLossTrailBarrier)) : shortStopLossPrice[1]
    stopPrice := (stopLossMoveActMode == 'ONCETP' and shortTrailTakeProfitExecutedCount >= stopLossMoveTPActNum) or (stopLossMoveActMode == 'ONCEPRICE' and (shortEntryPrice - lowestLowSinceShortEntry) >= shortStopLossMoveDistPrice) or (stopLossMoveActMode == 'MULTITP' and shortTrailTakeProfitExecutedCount == 1) ? math.min(stopPrice, shortEntryPrice)
               : stopLossMoveActMode == 'MULTITP' and shortTrailTakeProfitExecutedCount > 1 ? math.min(stopPrice, shortTakeProfitPrices.get(shortTrailTakeProfitExecutedCount - 2))
               : stopLossMoveActMode == 'MULTIPRICE' and chgShortDistMovePriceCount > 0 ? math.min(stopPrice, stopPrice - chgShortDistMovePriceCount * shortStopLossMoveDistPrice)
               : stopPrice
    shortStopLossPrice := math.min(stopPrice, nz(shortStopLossPrice[1], maxLimitFloat))
float shortStopLossRatio = (shortStopLossPrice - shortEntryPrice) / shortEntryPrice
float shortEntryStopLossRatio = ta.valuewhen(enteredShortTrade, shortStopLossRatio[1], 0)
//#endregion ===========================================================================================================
//#region 🛠️ STRATEGY 2
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the close position logic. This is implemented based on deal conditions defined internally (in this script) or externaly (based on conditions that take as input other indicator)
// Dependencies: FILTERS, STRATEGY 1, ENTRY
// Results: validCloseLongPosition, validCloseShortPosition
// INPUT ===============================================================================================================
closeEarlyEnabled = input.bool(defval = false, title = 'Close Early # of bars   ', inline = 'Close Early', group = '🛠️ Strategy')
closeEarlyBars = input.int(defval = 7, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 1, tooltip = 'Emit close position signal if the given number of bars have passed since the entry and the activation take profit price target has not been reached yet.', inline = 'Close Early', group = '🛠️ Strategy')
closeEarlyTPActNum = input.int(defval = 1, title = '  Act Take Profit #​​​', minval = 1, tooltip = 'The Take Profit number (up to the "Take Profit Targets" number set in TAKE PROFIT section) that will activate the close early if it is not reached within the given number of bars from the entry.', group = '🛠️ Strategy')
closeAtSessionEnd = input.bool(defval = false, title = 'Close at Session End', tooltip = 'Close all positions at the market price at the end of each session or the end of time window.', group = '🛠️ Strategy')
// LOGIC ===============================================================================================================
bool closeLongPosition = endLongDeal or (closeEarlyEnabled ? bar_index - longEntryBarId == closeEarlyBars and not longIthTrailTakeProfitExecuted(closeEarlyTPActNum) : false)
bool closeShortPosition = endShortDeal or (closeEarlyEnabled ? bar_index - shortEntryBarId == closeEarlyBars and not shortIthTrailTakeProfitExecuted(closeEarlyTPActNum) : false)
bool closeAllPositions = closeAtSessionEnd and not timeFilterApproval
// Cancel the previous end deal condition when using limit or stop for exit (if not already exited the position)
bool cnlCloseLongPosition = (timeFilterApproval and cnlEndLongDeal) or (not timeFilterApproval and timeFilterApproval[1])
bool cnlCloseShortPosition = (timeFilterApproval and cnlEndShortDeal) or (not timeFilterApproval and timeFilterApproval[1])
// The close signals when already into a position to that direction or if you want to start a position to the other direction
bool validCloseLongPosition = closeLongPosition and isLongPosition
bool validCloseShortPosition = closeShortPosition and isShortPosition
//#endregion ===========================================================================================================
//#region 🟪 EXIT
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the exit logic implementation based on the order type
// Dependencies: TRACK POSITION, VOLATILITY, DISTANCE, STRATEGY 2
// Results: longLimitOrStopExitPrice, shortLimitOrStopExitPrice, longLimitExitIsActive, shortLimitExitIsActive, longExitPrice, shortExitPrice
// INPUT ===============================================================================================================
longExitColor = input.color(defval = color.new(#D500F9, 0), title = '🎨️ Exit Color Long/Short    ', inline = 'Exit', group = '🟪 Exit')
shortExitColor = input.color(defval = color.new(#D500F9, 0), title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', tooltip = 'The color of the long/short limit and stop exit prices.', inline = 'Exit', group = '🟪 Exit')
exitOrderType = input.string(defval = 'MARKET', title = 'Order Type​​', options = ['MARKET', 'LIMIT', 'STOP'], tooltip = 'Use market order to exit at the open of the next bar (MARKET), or use limit order to exit at a "better" price defined by the distance from the close price and the limit mode (LIMIT), or use stop market order to exit at a "worst" price defined by the distance from the close price and the limit mode (STOP). Limit and stop orders last until they are filled or canceled.', group = '🟪 Exit')
exitLimitMode = input.string(defval = 'FIXED', title = 'Limit Mode​​', options = ['FIXED', 'TRAIL'], tooltip = 'When you use limit or stop orders to exit, use a fixed price defined by the distance and the close price when the open signal s (FIXED), or trail by following the price to the direction of the exit for limit orders or the other direction of the exit for stop orders (TRAIL).', group = '🟪 Exit')
exitTrailBarrier = input.string(defval = 'FRONT', title = '  Trail Barrier​​​​', options = ['FRONT', 'REAR'], tooltip = 'The price reference that will be used for the exit trailing logic. For exiting from a position with a LIMIT order, follow the low for long and high for short (FRONT), or follow the high for long and the low for short (REAR). For the STOP orders the logic is reversed.', group = '🟪 Exit')
var exitDistSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'ATR', title = 'Distance Method​​', options = ['PERC', 'ATR', 'STDEV', 'TICKS', 'HHLL'], tooltip = 'The method to calculate the distance of the limit and stop exit. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS) or Highest high/Lowest low (HHLL).', group = '🟪 Exit'),
  distMul = input.float(defval = 1.0, title = '  Dist Mul|Len​​', minval = 0.01, step = 0.05, tooltip = 'The distance multiplier to define the exit price from the close price when the close signal occurs or from the barrier price when trailing. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the HHLL method is used, then the length will define the window for the highest high and lowest low calculations.', group = '🟪 Exit'))
var exitMarSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'TICKS', title = 'Margin Distance Method​​​', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the margin to offset the distance of the exit price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🟪 Exit'),
  distMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Distance Exit Margin', group = '🟪 Exit') ?
             input.float(defval = 5.0, title = 'Mar Dist Mul       ​​​', step = 0.5, tooltip = 'The margin multiplier to define the exit distance offset.', inline = 'Distance Exit Margin', group = '🟪 Exit') : na)
var exitRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.string(defval = 'PERC', title = 'Restrict Distance Method​​​', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the maximum/minimum distance of the exit price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🟪 Exit'),
  minDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Exit Min Distance', group = '🟪 Exit') ?
               input.float(defval = 1.0, title = 'Min Dist Mul       ​​​', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the exit will not be placed too close from the reference price. Otherwise, a tight exit price would make the exit to easily be reached during volatile market conditions.', inline = 'Exit Min Distance', group = '🟪 Exit') : na,
  maxDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Exit Max Distance', group = '🟪 Exit') ?
               input.float(defval = 4.0, title = 'Max Dist Mul       ​​​', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the exit will not be placed too far from the reference price. Otherwise, a loose exit price would risk to not be reached in a timely manner.', inline = 'Exit Max Distance', group = '🟪 Exit') : na)
treatOpenAsCancel = input.bool(defval = false, title = 'Treat Open as Cancel', tooltip = 'If enabled the invalid open position signals will be treated as cancel close signals to cancel stop exit orders.', group = '🟪 Exit')
// LOGIC ===============================================================================================================
// The long cancel close signal
var bool validCnlCloseLongPosition = false
// Count how far are the last long valid close and exit signals
int barsSinceValidCloseLong = nz(ta.barssince(validCloseLongPosition or validOpenShortPosition), maxLimitInt)
int barsSinceValidCnlCloseLong = nz(ta.barssince(validCnlCloseLongPosition), maxLimitInt)
bool closeLongIsActive = barsSinceValidCnlCloseLong > barsSinceValidCloseLong // validCancelClose -> validClose
bool exitLongIsPending = barsSinceCompletedLong >= barsSinceValidCloseLong // completed -> validClose
// Validate the long cancel close signal when already into a position
validCnlCloseLongPosition := exitOrderType != 'MARKET' ? (cnlCloseLongPosition or (treatOpenAsCancel ? timeFilterApproval and startLongDeal : false)) and isLongPosition and closeLongIsActive and exitLongIsPending and not validCloseLongPosition : false
float exitLowestLow = ta.lowest(low, math.max(math.floor(exitDistSettings.distMul), 1))
// Calculate the actual long exit price from the reference using a short biased distance with an upwards moving potential
getLongExitLowerPrice(float referencePrice) =>
    exitDistSettings.lower_short_biased_price(referencePrice, shortBiasedAuxData, exitRestrictSettings, exitMarSettings, exitLowestLow)
float exitHighestHigh = ta.highest(high, math.max(math.floor(exitDistSettings.distMul), 1))
// Calculate the actual long exit price from the reference using a short biased distance with a downwards moving potential
getLongExitHigherPrice(float referencePrice) =>
    exitDistSettings.higher_short_biased_price(referencePrice, shortBiasedAuxData, exitRestrictSettings, exitMarSettings, exitHighestHigh)
var float longLimitOrStopExitPrice = na
bool isFirstValidCloseLongPosition = exitOrderType != 'MARKET' ? validCloseLongPosition and isLongPosition and na(longLimitOrStopExitPrice[1]) and not (validOpenShortPosition and entryOrderType == 'MARKET') : false
bool tryExitLongPosition = exitOrderType != 'MARKET' ? isLongPosition and not na(longLimitOrStopExitPrice[1]) and not validCnlCloseLongPosition : false
longLimitOrStopExitPrice := if (isFirstValidCloseLongPosition)
    if (exitOrderType == 'LIMIT')
        getLongExitHigherPrice(close)
    else if (exitOrderType == 'STOP')
        getLongExitLowerPrice(close)
else if (tryExitLongPosition)
    if (exitLimitMode == 'TRAIL' or (exitLimitMode == 'FIXED' and validCloseLongPosition))
        if (exitOrderType == 'LIMIT')
            math.min(getLongExitHigherPrice(getDownwardsMovingBarrierPrice(exitTrailBarrier)), nz(longLimitOrStopExitPrice[1], maxLimitFloat))
        else if (exitOrderType == 'STOP')
            math.max(getLongExitLowerPrice(getUpwardsMovingBarrierPrice(exitTrailBarrier)), nz(longLimitOrStopExitPrice[1], minLimitFloat))
    else
        nz(longLimitOrStopExitPrice[1], minLimitFloat)
bool longLimitExitIsActive = not na(longLimitOrStopExitPrice)
// The short cancel close signal
var bool validCnlCloseShortPosition = false
// Count how far are the last short valid close and exit signals
int barsSinceValidCloseShort = nz(ta.barssince(validCloseShortPosition or validOpenLongPosition), maxLimitInt)
int barsSinceValidCnlCloseShort = nz(ta.barssince(validCnlCloseShortPosition), maxLimitInt)
bool closeShortIsActive = barsSinceValidCnlCloseShort > barsSinceValidCloseShort // validCancelClose -> validClose
bool exitShortIsPending = barsSinceCompletedShort >= barsSinceValidCloseShort // completed -> validClose
// Validate the short cancel close signal when already into a position
validCnlCloseShortPosition := exitOrderType != 'MARKET' ? (cnlCloseShortPosition or (treatOpenAsCancel ? timeFilterApproval and startShortDeal : false)) and isShortPosition and closeShortIsActive and exitShortIsPending and not validCloseShortPosition : false
// Calculate the actual short exit price from the reference using a long biased distance with an upwards moving potential
getShortExitLowerPrice(float referencePrice) =>
    exitDistSettings.lower_long_biased_price(referencePrice, longBiasedAuxData, exitRestrictSettings, exitMarSettings, exitLowestLow)
// Calculate the actual short exit price from the reference using a long biased distance with a downwards moving potential
getShortExitHigherPrice(float referencePrice) =>
    exitDistSettings.higher_long_biased_price(referencePrice, longBiasedAuxData, exitRestrictSettings, exitMarSettings, exitHighestHigh)
var float shortLimitOrStopExitPrice = na
bool isFirstValidCloseShortPosition = exitOrderType != 'MARKET' ? validCloseShortPosition and isShortPosition and na(shortLimitOrStopExitPrice[1]) and not (validOpenLongPosition and entryOrderType == 'MARKET') : false
bool tryExitShortPosition = exitOrderType != 'MARKET' ? isShortPosition and not na(shortLimitOrStopExitPrice[1]) and not validCnlCloseShortPosition : false
shortLimitOrStopExitPrice := if (isFirstValidCloseShortPosition)
    if (exitOrderType == 'LIMIT')
        getShortExitLowerPrice(close)
    else if (exitOrderType == 'STOP')
        getShortExitHigherPrice(close)
else if (tryExitShortPosition)
    if (exitLimitMode == 'TRAIL' or (exitLimitMode == 'FIXED' and validCloseShortPosition))
        if (exitOrderType == 'LIMIT')
            math.max(getShortExitLowerPrice(getUpwardsMovingBarrierPrice(exitTrailBarrier)), nz(shortLimitOrStopExitPrice[1], minLimitFloat))
        else if (exitOrderType == 'STOP')
            math.min(getShortExitHigherPrice(getDownwardsMovingBarrierPrice(exitTrailBarrier)), nz(shortLimitOrStopExitPrice[1], maxLimitFloat))
    else
        nz(shortLimitOrStopExitPrice[1], maxLimitFloat)
bool shortLimitExitIsActive = not na(shortLimitOrStopExitPrice)
// Price when exited a position or potential exit price in case of limit or stop orders
float longExitPrice = (validOpenShortPosition and (isLongPosition or exitOrderType == 'MARKET')) or (stopLossWaitCloseConfirm and close < longStopLossPrice) ? close
                     : longLimitExitIsActive ? longLimitOrStopExitPrice
                     : na
float shortExitPrice = (validOpenLongPosition and (isShortPosition or exitOrderType == 'MARKET')) or (stopLossWaitCloseConfirm and close > shortStopLossPrice) ? close
                     : shortLimitExitIsActive ? shortLimitOrStopExitPrice
                     : na
// PLOT ================================================================================================================
if (validCloseLongPosition and showCloseLabels and barstate.isconfirmed)
    label.new(x = bar_index, y = exitOrderType == 'LIMIT' ? longLimitOrStopExitPrice : na, text = 'Close', yloc = exitOrderType == 'LIMIT' ? yloc.price : yloc.abovebar, color = longCloseColor, style = label.style_label_down, textcolor = textColor)
if (validCloseShortPosition and showCloseLabels and barstate.isconfirmed)
    label.new(x = bar_index, y = exitOrderType == 'LIMIT' ? shortLimitOrStopExitPrice : na, text = 'Close', yloc = exitOrderType == 'LIMIT' ? yloc.price : yloc.belowbar, color = shortCloseColor, style = label.style_label_up, textcolor = textColor)
if (validCnlCloseLongPosition and showCnlCloseLabels and barstate.isconfirmed)
    label.new(x = bar_index, y = longLimitOrStopExitPrice[1], text = 'Cancel', yloc = yloc.price, color = longCnlCloseColor, style = exitOrderType == 'LIMIT' ? label.style_label_down : label.style_label_up, textcolor = textColor)
if (validCnlCloseShortPosition and showCnlCloseLabels and barstate.isconfirmed)
    label.new(x = bar_index, y = shortLimitOrStopExitPrice[1], text = 'Cancel', yloc = yloc.price, color = shortCnlCloseColor, style = exitOrderType == 'LIMIT' ? label.style_label_up : label.style_label_down, textcolor = textColor)
plot(series = longLimitOrStopExitPrice, title = 'Long Limit or Stop Exit Price', color = longExitColor, linewidth = 1, style = plot.style_linebr, offset = 1)
plot(series = shortLimitOrStopExitPrice, title = 'Short Limit or Stop Exit Price', color = shortExitColor, linewidth = 1, style = plot.style_linebr, offset = 1)
//#endregion ===========================================================================================================
//#region 💰 QUANTITY/RISK MANAGEMENT
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the calculation of the quantity percentage that will be used on each entry
// Dependencies: ENTRY, STRATEGY 2, EXIT
// Results: longEntryBaseQuantity, shortEntryBaseQuantity, longTakeProfitQuantity, shortTakeProfitQuantity, longRemainingQuantity, shortRemainingQuantity, longRemainingQuantityRatio, shortRemainingQuantityRatio
import jason5480/math_utils/8 as math_utils
// INPUT ===============================================================================================================
quantityMethod = input.string(defval = 'RISK', title = 'Quantity Method', options = ['RISK', 'EQUITY', 'SIZE', 'CONTR'], tooltip = 'The method to calculate the quantity to enter each new position. Use an amount so that if the stop loss is reached no more than a percent of equity is lost (RISK), or use a fixed percent of equity (EQUITY), or use a fixed amount in quote currency e.g. USD (SIZE), or use a fixed amount of contracts (CONTR).', group = '💰 Quantity/Risk Management')
capitalRiskRatio = input.float(defval = 1.0, title = '  Capital Risk %', minval = 0.1, maxval = 10.0, step = 0.5, tooltip = 'The maximum percentage of the total equity to risk in every trade when no leverage is used.', group = '💰 Quantity/Risk Management') / 100.0
equityRatio = input.float(defval = 10.0, title = '  Equity %        ', minval = 1.0, maxval = 100.0, step = 0.5, tooltip = 'The percentage of the equity to enter in every trade when no leverage is used.', group = '💰 Quantity/Risk Management') / 100.0
orderSize = input.float(defval = 10000.0, title = '  Order Size    ', minval = 1.0, tooltip = 'The fixed trade size in quote currency used to enter in every trade when no leverage is used.', group = '💰 Quantity/Risk Management')
contracts = input.int(defval = 1, title = '  Contracts     ', minval = 1, tooltip = 'The fixed number of contracts to enter in every trade when no leverage is used.', group = '💰 Quantity/Risk Management')
minOrderSize = input.float(defval = 10.0, title = 'Minimum Order Size', minval = 0.0, step = 1.0, tooltip = 'The minimum trade size in quote currency that is allowed in the exchange for a valid new position (e.g. in Binance you cannot trade amounts that are equal or less than 10 USD).', group = '💰 Quantity/Risk Management')
longLeverage = input.int(defval = 1, title = 'Leverage Long/Short 🛈➡   ', minval = 1, inline = 'Leverage', group = '💰 Quantity/Risk Management')
shortLeverage = input.int(defval = 1, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 1, tooltip = 'Leverage factor used to multiply the initial risk quantity of each trade (by borrowing the remaining amount). Thus, the profits and losses are multiplied respectively. INFORMATION! The margin for long/short positions value in the "Settings/Properties" should be adjusted accoridngly to correctly trigger margin calls.', inline = 'Leverage', group = '💰 Quantity/Risk Management')
moonbagQuantityRatio = input.float(defval = 0.0, title = 'Moonbag Quantity %', minval = 0.0, maxval = 99.9, step = 0.5, tooltip = 'The percentage of the position that will NOT be exited when ALL the take profit price targets are reached. If more than one take profit price target is set, then ALL targets will share equally the remaining amount and exit when take profit targets are reached. The moonbag amount will exit only when stop loss is reached or a close signal is received.', group = '💰 Quantity/Risk Management') / 100.0 
maxDrawdownEnabled = input.bool(defval = false, title = 'Max Drawdown %    ', inline = 'Drawdown', group = '💰 Quantity/Risk Management')
maxDrawdownPerc = input.float(defval = 25.0, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 1.0, maxval = 100.0, step = 0.5, tooltip = 'The maximum drawdown to stop trading.', inline = 'Drawdown', group = '💰 Quantity/Risk Management')
// LOGIC ===============================================================================================================
var float takeProfitAproxQuantityRatio = 0.0005 + (1.0 - moonbagQuantityRatio) / numOfTakeProfitTargets
var float takeProfitQuantityRatio = numOfTakeProfitTargets == 0 ? 0 : takeProfitAproxQuantityRatio.clamp_up(0.0, 1.0, 3)
var int quoteDecimalDigits = (syminfo.mintick * syminfo.pointvalue).num_of_decimal_digits() + 1
getEntryQuantityDecimalDigits(float entryPrice) =>
    (minOrderSize / entryPrice).num_of_decimal_digits() + 1
getExitQuantityDecimalDigits(float entryPrice) =>
    getEntryQuantityDecimalDigits(entryPrice) + 1
var int numOfExitsPerTrade = math.max(moonbagQuantityRatio == 0.0 ? numOfTakeProfitTargets : numOfTakeProfitTargets + 1, 1)
var float minEntrySize = minOrderSize * numOfExitsPerTrade
getRiskQuoteQuantity(simple int leverage, float stopLossRatio) =>
    (strategy.equity * capitalRiskRatio * leverage / stopLossRatio).clamp_down(minEntrySize, strategy.equity * leverage, quoteDecimalDigits)
getEquityQuoteQuantity(simple int leverage) =>
    (strategy.equity * equityRatio * leverage).clamp_down(minEntrySize, strategy.equity * leverage, quoteDecimalDigits)
getSizeQuoteQuantity(simple int leverage) =>
    (orderSize * leverage).clamp_down(minEntrySize, strategy.equity * leverage, quoteDecimalDigits)
getContractsQuoteQuantity(simple int leverage, float entryPrice) =>
    (contracts * entryPrice * leverage).clamp_down(minEntrySize, strategy.equity * leverage, quoteDecimalDigits)
getBaseQuantity(float quoteQuantity, float entryPrice) =>
    (quoteQuantity / entryPrice).floor(getEntryQuantityDecimalDigits(entryPrice))
getQuoteQuantity(simple int leverage, float stopLossRatio, float entryPrice) =>
    switch quantityMethod
        'RISK' => getRiskQuoteQuantity(leverage, stopLossRatio)
        'EQUITY' => getEquityQuoteQuantity(leverage)
        'SIZE' => getSizeQuoteQuantity(leverage)
        'CONTR' => getContractsQuoteQuantity(leverage, entryPrice)
        => na
getCapitalRisk(float stopLossRatio, float entryPrice) =>
    switch quantityMethod
        'RISK' => capitalRiskRatio
        'EQUITY' => equityRatio * stopLossRatio
        'SIZE' => (orderSize / strategy.equity) * stopLossRatio
        'CONTR' => (contracts * entryPrice / strategy.equity) * stopLossRatio
        => na
float longRemainingQuantityRatio = math.max(0.0, 1.0 - longTrailTakeProfitExecutedCount * takeProfitQuantityRatio)
var float longEntryQuoteQuantity = na
var float longEntryQuoteQuantityRatio = na
var float longEntryBaseQuantity = na
var float longTakeProfitQuantity = na
var float longCapitalRiskRatio = na
if (longLimitOrStopEntryIsActive or validOpenLongPosition)
    longEntryQuoteQuantity := getQuoteQuantity(longLeverage, longStopLossRatio, longEntryPrice)
    longEntryQuoteQuantityRatio := longEntryQuoteQuantity / strategy.equity
    longEntryBaseQuantity := getBaseQuantity(longEntryQuoteQuantity, longEntryPrice)
    longTakeProfitQuantity := (longEntryBaseQuantity * takeProfitQuantityRatio).ceil(getExitQuantityDecimalDigits(longEntryPrice))
    longCapitalRiskRatio := getCapitalRisk(longStopLossRatio, longEntryPrice)
var float longRemainingQuantity = na
if (validOpenLongPosition or enteredLongTrade or isLongPosition or completedLongTrade)
    longRemainingQuantity := (longEntryBaseQuantity * longRemainingQuantityRatio).ceil(getExitQuantityDecimalDigits(longEntryPrice))
float shortRemainingQuantityRatio = math.max(0.0, 1.0 - shortTrailTakeProfitExecutedCount * takeProfitQuantityRatio)
var float shortEntryQuoteQuantity = na
var float shortEntryQuoteQuantityRatio = na
var float shortEntryBaseQuantity = na
var float shortTakeProfitQuantity = na
var float shortCapitalRiskRatio = na
if (shortLimitOrStopEntryIsActive or validOpenShortPosition)
    shortEntryQuoteQuantity := getQuoteQuantity(shortLeverage, shortStopLossRatio, shortEntryPrice)
    shortEntryQuoteQuantityRatio := shortEntryQuoteQuantity / strategy.equity
    shortEntryBaseQuantity := getBaseQuantity(shortEntryQuoteQuantity, shortEntryPrice)
    shortTakeProfitQuantity := (shortEntryBaseQuantity * takeProfitQuantityRatio).ceil(getExitQuantityDecimalDigits(shortEntryPrice))
    shortCapitalRiskRatio := getCapitalRisk(shortStopLossRatio, shortEntryPrice)
var float shortRemainingQuantity = na
if (validOpenShortPosition or enteredShortTrade or isShortPosition or completedShortTrade)
    shortRemainingQuantity := (shortEntryBaseQuantity * shortRemainingQuantityRatio).ceil(getExitQuantityDecimalDigits(shortEntryPrice))
//#endregion ===========================================================================================================
//#region 🎯 TAKE PROFIT 2
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the take profit logic implementation based on the method and the number of step take profit targets and the trailing distance
// Dependencies: VOLATILITY, DISTANCE, ENTRY, TAKE PROFIT 1
// Results: longTakeProfitPrices, shortTakeProfitPrices, longTrailTakeProfitOffsetTicks, shortTrailTakeProfitOffsetTicks, takeProfitTrailEnabled
// INPUT ===============================================================================================================
var longTakeProfitDistInitSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'ATR', title = 'Init TP Distance Method', options = ['PERC', 'ATR', 'STDEV', 'TICKS', 'PROF', 'RR', 'HHLL'], tooltip = 'The method to calculate the distance of the first take profit price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), Fixed Profit (PROF), Risk-Reward based (RR) or Highest high/Lowest low (HHLL).', group = '🎯 Take Profit'),
  distMul = input.float(defval = 5.0, title = '  Init Dist Mul|Len Long/Short', minval = 0.05, step = 0.05, inline = 'Init Take Profit Perc', group = '🎯 Take Profit'),
  commissionRatio = commissionRatio)
var takeProfitInitMarSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'TICKS', title = 'Init Margin Distance Method', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the margin to offset the distance of the take profit price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🎯 Take Profit'),
  distMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Init Take Profit Margin', group = '🎯 Take Profit') ?
             input.float(defval = 5.0, title = 'Init Mar Dist Mul     ', step = 0.5, tooltip = 'The margin multiplier to define the initial take profit distance offset.', inline = 'Init Take Profit Margin', group = '🎯 Take Profit') : na)
var takeProfitInitRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.string(defval = 'PERC', title = 'Init Restrict Distance Method', options = ['PERC', 'ATR', 'STDEV', 'TICKS', 'PROF', 'RR'], tooltip = 'The method to calculate the maximum/minimum distance of the initial take profit price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), Profit based (PROF) or Risk-Reward based (RR).', group = '🎯 Take Profit'),
  minDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Init Take Profit Min Distance', group = '🎯 Take Profit') ?
               input.float(defval = 0.1, title = 'Min Dist Mul       ​​​​', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. The minimum can be used to make sure that you will compensate for (at least) the commission rates, especially when you are trading on lower time frames.', inline = 'Init Take Profit Min Distance', group = '🎯 Take Profit') : na,
  maxDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Init Take Profit Max Distance', group = '🎯 Take Profit') ?
               input.float(defval = 10.0, title = 'Max Dist Mul       ​​​​', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. The maximum can be used to make sure that you get some profits when the price moves in the desired direction.', inline = 'Init Take Profit Max Distance', group = '🎯 Take Profit') : na,
  commissionRatio = commissionRatio)
var shortTakeProfitInitDistSettings = dr.DistSettings.new(
  distMethod = longTakeProfitDistInitSettings.distMethod,
  distMul = input.float(defval = 5.0, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 0.05, step = 0.05, tooltip = 'The distance multiplier to define the long/short first take profit price from the open price. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the HHLL method is used, then the length will define the window for the highest high and lowest low calculations.', inline = 'Init Take Profit Perc', group = '🎯 Take Profit'),
  commissionRatio = commissionRatio)
var longTakeProfitStepDistSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'PERC', title = 'Step TP Distance Method', options = ['PERC', 'ATR', 'STDEV', 'TICKS', 'PROF', 'RR'], tooltip = 'The method to calculate the distance of additional step take profit price targets. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), Fixed Profit (PROF) or Risk-Reward based (RR).', group = '🎯 Take Profit'),
  distMul = input.float(defval = 5.0, title = '  Step Dist Mul Long/Short  ​​', minval = 0.05, step = 0.05, inline = 'Step Take Profit Perc', group = '🎯 Take Profit'),
  commissionRatio = commissionRatio)
var takeProfitStepRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.string(defval = 'PERC', title = 'Step Restrict Distance Method', options = ['PERC', 'ATR', 'STDEV', 'TICKS', 'PROF', 'RR'], tooltip = 'The method to calculate the maximum/minimum distance of the step take profit price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), Profit based (PROF) or Risk-Reward based (RR).', group = '🎯 Take Profit'),
  minDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Step Take Profit Min Distance', group = '🎯 Take Profit') ?
               input.float(defval = 0.1, title = 'Min Dist Mul       ​​​​​', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. The minimum can be used to make sure that you will compensate for (at least) the commission rates, especially when you are trading on lower time frames.', inline = 'Step Take Profit Min Distance', group = '🎯 Take Profit') : na,
  maxDistMul = input.bool(defval = false, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', inline = 'Step Take Profit Max Distance', group = '🎯 Take Profit') ?
               input.float(defval = 5.0, title = 'Max Dist Mul       ​​​​​', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. The maximum can be used to make sure that you get some profits when the price moves in the desired direction.', inline = 'Step Take Profit Max Distance', group = '🎯 Take Profit') : na,
  commissionRatio = commissionRatio)
var shortTakeProfitStepDistSettings = dr.DistSettings.new(
  distMethod = longTakeProfitStepDistSettings.distMethod,
  distMul = input.float(defval = 5.0, title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', minval = 0.05, step = 0.05, tooltip = 'The distance multiplier to be added on top of the first long/short take profit distance multiplier to define the long/short step take profit price target. The multiplier will be applied to the unit price that is defined by the distance method that is used.', inline = 'Step Take Profit Perc', group = '🎯 Take Profit'),
  commissionRatio = commissionRatio)
takeProfitTrailEnabled = input.bool(defval = false, title = 'Enable Trail⚠️💹', tooltip = 'Enable or disable the trailing for take profit. WARNING! This feature will repaint. Make sure you use it along with "Bar Magnifier" and "Deep Backtesting" for realistic backtest results.', group = '🎯 Take Profit')
var takeProfitTrailDistSettings = dr.DistSettings.new(
  distMethod = input.string(defval = 'PERC', title = '  Trail TP Distance Method', options = ['PERC', 'ATR', 'STDEV', 'TICKS'], tooltip = 'The method to calculate the distance of the trailing take profit. Percentage based (PERC), ATR based (ATR) or Standard deviation based (STDEV) or Tick based (TICKS).', group = '🎯 Take Profit'),
  distMul = input.float(defval = 2.0, title = '    Trail Dist Mul', minval = 0.01, step = 0.05, tooltip = 'The distance multiplier to define the take profit price offset from the high/low price after the target is reached when trailing. The multiplier will be applied to the unit price that is defined by the distance method that is used.', group = '🎯 Take Profit'))
// LOGIC ===============================================================================================================
float takeProfitHighestHigh = ta.highest(high, math.max(math.floor(longTakeProfitDistInitSettings.distMul), 1))
// Calculate the actual long take profit price and ticks that is higher from the reference using the distance
getLongTakeProfitPrice(dr.DistSettings dist, float reference, dr.AuxData shortBiasedAuxData, dr.RestrictSettings restrict, dr.DistSettings mar = na) =>
    dist.higher_short_biased_price(reference, shortBiasedAuxData, restrict, mar, takeProfitHighestHigh)
getlongTakeProfitTicks(dr.DistSettings distSettings, float referencePrice, dr.AuxData shortBiasedAuxData) =>
    distSettings.ticks(referencePrice, shortBiasedAuxData)
var bool takeProfitAdjustmentIsNeeded = (entryOrderType == 'MARKET' or entryOrderType == 'STOP') and longTakeProfitDistInitSettings.distMethod != 'HHLL'
if (longLimitOrStopEntryIsActive or validOpenLongPosition)
    longTakeProfitShortBiasedAuxData = dr.AuxData.new(atr = negAtr, stdev = negStDev, baseQuantity = longTakeProfitQuantity, stopLossRatio = longStopLossRatio)
    float currentLongTakeProfitPrice = getLongTakeProfitPrice(longTakeProfitDistInitSettings, longEntryPrice, longTakeProfitShortBiasedAuxData, takeProfitInitRestrictSettings, takeProfitInitMarSettings)
    for i = 0 to takeProfitTargetsSize
        longTakeProfitPrices.set(i, currentLongTakeProfitPrice)
        longTrailTakeProfitOffsetTicks.set(i, getlongTakeProfitTicks(takeProfitTrailDistSettings, currentLongTakeProfitPrice, longTakeProfitShortBiasedAuxData))
        if (i < takeProfitTargetsSize)
            currentLongTakeProfitPrice := getLongTakeProfitPrice(longTakeProfitStepDistSettings, currentLongTakeProfitPrice, longTakeProfitShortBiasedAuxData, takeProfitStepRestrictSettings)
else if (enteredLongTrade and takeProfitAdjustmentIsNeeded)
    float longEntryPriceOffset = longEntryPrice - nz(longEntryPrice[1], longEntryPrice)
    for i = 0 to takeProfitTargetsSize
        longTakeProfitPrices.set(i, longTakeProfitPrices.get(i) + longEntryPriceOffset)
        longTrailTakeProfitOffsetTicks.set(i, longTrailTakeProfitOffsetTicks.get(i) + math.floor(longEntryPriceOffset / syminfo.mintick))
float takeProfitLowestLow = ta.lowest(low, math.max(math.floor(shortTakeProfitInitDistSettings.distMul), 1))
// Calculate the actual short take price and ticks that is lower from the reference using the distance
getShortTakeProfitPrice(dr.DistSettings dist, float reference, dr.AuxData longBiasedAuxData, dr.RestrictSettings restrict, dr.DistSettings mar = na) =>
    dist.lower_long_biased_price(reference, longBiasedAuxData, restrict, mar, takeProfitLowestLow)
getShortTakeProfitTicks(dr.DistSettings distSettings, float referencePrice, dr.AuxData longBiasedAuxData) =>
    distSettings.ticks(referencePrice, longBiasedAuxData)
if (shortLimitOrStopEntryIsActive or validOpenShortPosition)
    shortTakeProfitLongBiasedAuxData = dr.AuxData.new(atr = posAtr, stdev = posStDev, baseQuantity = shortTakeProfitQuantity, stopLossRatio = shortStopLossRatio)
    float currentShortTakeProfitPrice = getShortTakeProfitPrice(shortTakeProfitInitDistSettings, shortEntryPrice, shortTakeProfitLongBiasedAuxData, takeProfitInitRestrictSettings, takeProfitInitMarSettings)
    for i = 0 to takeProfitTargetsSize
        shortTakeProfitPrices.set(i, currentShortTakeProfitPrice)
        shortTrailTakeProfitOffsetTicks.set(i, getShortTakeProfitTicks(takeProfitTrailDistSettings, currentShortTakeProfitPrice, shortTakeProfitLongBiasedAuxData))
        if (i < takeProfitTargetsSize)
            currentShortTakeProfitPrice := getShortTakeProfitPrice(shortTakeProfitStepDistSettings, currentShortTakeProfitPrice, shortTakeProfitLongBiasedAuxData, takeProfitStepRestrictSettings)
else if (enteredShortTrade and takeProfitAdjustmentIsNeeded)
    float shortEntryPriceOffset = shortEntryPrice - nz(shortEntryPrice[1], shortEntryPrice)
    for i = 0 to takeProfitTargetsSize
        shortTakeProfitPrices.set(i, shortTakeProfitPrices.get(i) + shortEntryPriceOffset)
        shortTrailTakeProfitOffsetTicks.set(i, shortTrailTakeProfitOffsetTicks.get(i) + math.floor(shortEntryPriceOffset / syminfo.mintick))
// PLOT ================================================================================================================
if (validOpenLongPosition and showOpenLabels and barstate.isconfirmed)
    string longOpenTooltip = str.format('Quantity: {0, number, percent}\nCapital Risk: {1, number, percent}\nEntry Price: {2, number, currency}\nSL: {3, number, currency}', longEntryQuoteQuantityRatio, longCapitalRiskRatio, longEntryPrice, longStopLossPrice)
    for [i, longTakeProfitPrice] in longTakeProfitPrices
        longOpenTooltip := longOpenTooltip + str.format('\nTP{0, number, integer}: {1, number, currency}', i + 1, longTakeProfitPrice)
    label.new(x = bar_index, y = entryOrderType == 'LIMIT' ? nz(longLimitOrStopEntryPrice, close) : na, text = 'Open', yloc = entryOrderType == 'LIMIT' ? yloc.price : yloc.belowbar, color = longOpenColor, style = label.style_label_up, textcolor = textColor, tooltip = longOpenTooltip)
if (validOpenShortPosition and showOpenLabels and barstate.isconfirmed)
    string shortOpenTooltip = str.format('Quantity: {0, number, percent}\nCapital Risk: {1, number, percent}\nEntry Price: {2, number, currency}\nSL: {3, number, currency}', shortEntryQuoteQuantityRatio, shortCapitalRiskRatio, shortEntryPrice, shortStopLossPrice)
    for [i, shortTakeProfitPrice] in shortTakeProfitPrices
        shortOpenTooltip := shortOpenTooltip + str.format('\nTP{0, number, integer}: {1, number, currency}', i + 1, shortTakeProfitPrice)
    label.new(x = bar_index, y = entryOrderType == 'LIMIT' ? nz(shortLimitOrStopEntryPrice, close) : na, text = 'Open', yloc = entryOrderType == 'LIMIT' ? yloc.price : yloc.abovebar, color = shortOpenColor, style = label.style_label_down, textcolor = textColor, tooltip = shortOpenTooltip)
//#endregion ===========================================================================================================
//#region 📊 ANALYTICS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for plotting additional information for statistics and backtesting purposes
// Dependencies: TRACK POSITION, ENTRY, TAKE PROFIT 1, TAKE PROFIT 2
// Results: NONE
// INPUT ===============================================================================================================
winColor = input.color(defval = color.new(color.green, 0), title = '🎨️ Win/Loss Color      ', inline = 'Entry', group = '📊 Analytics')
lossColor = input.color(defval = color.new(color.red, 0), title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', tooltip = 'The color of the win/loss labels and the mark trade lines.', inline = 'Entry', group = '📊 Analytics')
showTradeStats = input.bool(defval = false, title = 'Show Trade Stats⚠️🐌', tooltip = 'Show the winning/losing trade stats when complete. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '📊 Analytics')
showStatsTable = input.bool(defval = false, title = 'Show Stats Table⚠️🐌 ', inline = 'Stats Table', group = '📊 Analytics')
statsTablePos = input.string(defval = 'TOPRIGHT', title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', options = ['TOPRIGHT', 'TOPLEFT', 'BOTRIGHT', 'BOTLEFT'], tooltip = 'Show the table with the overall trade statistics on the selected corner. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', inline = 'Stats Table', group = '📊 Analytics')
showMetricsTable = input.bool(defval = false, title = 'Show Metrics Table⚠️🐌', inline = 'Metrics Table', group = '📊 Analytics')
metricsTablePos = input.string(defval = 'BOTLEFT', title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', options = ['TOPRIGHT', 'TOPLEFT', 'BOTRIGHT', 'BOTLEFT'], tooltip = 'Show the table with the trade metrics on the selected corner. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', inline = 'Metrics Table', group = '📊 Analytics')
// LOGIC ===============================================================================================================
var bool showTable = showStatsTable or showMetricsTable
var bool showStats = showTable or showTradeStats
getTablePosition(simple string pos) =>
    switch pos
        'BOTCENTER' => position.bottom_center
        'BOTLEFT' => position.bottom_left
        'BOTRIGHT' => position.bottom_right
        'MIDCENTER' => position.middle_center
        'MIDLEFT' => position.middle_left
        'MIDRIGHT' => position.middle_right
        'TOPCENTER' => position.top_center
        'TOPLEFT' => position.top_left
        'TOPRIGHT' => position.top_right
        => position.middle_center
// Count winning/losing streaks
var int maxWinningStreak = 0
var int maxLosingStreak = 0
var int currentWinningStreak = 0
var int currentLosingStreak = 0
var int numOfInconclusiveExits = 0
// Store the free winning/losing profit percentages
var float[] winTradeFreeProfitsPerc = array.new<float>()
var float[] lossTradeFreeProfitsPerc = array.new<float>()
// Store the winning/losing profit percentages
var float[] winTradeProfitsPerc = array.new<float>()
var float[] lossTradeProfitsPerc = array.new<float>()
// Store the gains on account
var float[] winTradeGainsPerc = array.new<float>()
var float[] lossTradeGainsPerc = array.new<float>()
// Take Profits executed counts
var float winSumTakeProfitExecutedCount = 0.0
var float lossSumTakeProfitExecutedCount = 0.0
// Quantity sums
var float winSumQuantityPerc = 0.0
var float lossSumQuantityPerc = 0.0
// Risks
var float[] winRisksPerc = array.new<float>()
var float[] lossRisksPerc = array.new<float>()
// Risk/Reaward ratios
var float[] winRiskRewardRatios = array.new<float>()
var float[] lossRiskRewardRatios = array.new<float>()
closedTradesEntryBarIndex(int n) =>
    strategy.closedtrades.entry_bar_index(strategy.closedtrades - n)
closedTradesEntryPrice(int n) =>
    strategy.closedtrades.entry_price(strategy.closedtrades - n)
closedTradeEntryIdStartsWith(simple string prefix, int n = 1) =>
    strategy.closedtrades >= n ? str.startswith(strategy.closedtrades.entry_id(strategy.closedtrades - n), prefix) : false
lastTwoClosedTradesEnteredInTheSameBar() =>
    strategy.closedtrades >= 2 ? closedTradesEntryBarIndex(2) == closedTradesEntryBarIndex(1) : false
getNumOfExits(simple string orderIdClose, int takeProfitCount) =>
    strategy.closedtrades.exit_id(strategy.closedtrades - 1) == orderIdClose ? takeProfitCount + 1 : moonbagQuantityRatio == 0.0 and numOfTakeProfitTargets > 0 ? numOfTakeProfitTargets : numOfTakeProfitTargets + 1
if (completedLongTrade and showStats)
    // Long entry bar id and price
    var int lastLongEntryBarIndex = na
    var float lastLongEntryPrice = na
    if (closedTradeEntryIdStartsWith(longOrderIdPrefix) or (closedTradeEntryIdStartsWith(longOrderIdPrefix, 2) and lastTwoClosedTradesEnteredInTheSameBar()))
        lastLongEntryBarIndex := closedTradesEntryBarIndex(1)
        lastLongEntryPrice := closedTradesEntryPrice(1)
    else if (strategy.closedtrades > 1 ? closedTradeEntryIdStartsWith(longOrderIdPrefix, 2) and lastTwoClosedTradesExitedInTheSameBar() : false)
        lastLongEntryBarIndex := closedTradesEntryBarIndex(2)
        lastLongEntryPrice := closedTradesEntryPrice(2)
    float exRatio = lastLongExitPrice / lastLongEntryPrice
    float longFreeProfitRatio = exRatio - 1.0 - exRatio * commissionRatio - commissionRatio
    float longProfitRatio = - commissionRatio
    bool longInconclusiveExit = false
    int histId = longLimitOrStopEntryIsActive or validOpenLongPosition or enteredLongTrade ? 1 : 0
    int numOfExits = getNumOfExits(longOrderIdClose, longTrailTakeProfitExecutedCount)
    for i = strategy.closedtrades - 1 to strategy.closedtrades - numOfExits
        float ithExPrice = closedTradeExitIdContains(longOrderIdPrefix) ? strategy.closedtrades.exit_price(i) : strategy.closedtrades.exit_price(i - 1)
        float ithExRatio = ithExPrice / lastLongEntryPrice
        float quantityRatio = str.startswith(strategy.closedtrades.exit_id(i), str.format('{0} Take Profit', longOrderIdPrefix)) ? takeProfitQuantityRatio : longRemainingQuantityRatio
        longProfitRatio += (ithExRatio - 1.0 - ithExRatio * commissionRatio) * quantityRatio
        int tpId = moonbagQuantityRatio == 0.0 ? numOfTakeProfitTargets + i - strategy.closedtrades : numOfTakeProfitTargets + i - strategy.closedtrades - 1
        longInconclusiveStopLoss = tpId < numOfTakeProfitTargets and tpId >= 0 and low < longStopLossPrice ? highestHighSinceLongEntry > (longTakeProfitPrices[histId]).get(tpId) and not longTrailTakeProfitExecuted.get(tpId) : false
        longInconclusiveTakeProfit = false
        for j = strategy.closedtrades - 1 to strategy.closedtrades - numOfExits
            longInconclusiveTakeProfit := bar_index == strategy.closedtrades.exit_bar_index(i) and bar_index == strategy.closedtrades.exit_bar_index(j) and strategy.closedtrades.exit_price(i) != strategy.closedtrades.exit_price(j) and low < longStopLossPrice[histId]
        longInconclusiveExit := longInconclusiveExit or longInconclusiveStopLoss or longInconclusiveTakeProfit
    float longGainPerc = longProfitRatio * 100.0 * longEntryQuoteQuantityRatio[histId]
    float longAvgTakeProfitRatio = nz(((longTakeProfitPrices[histId]).avg() - lastLongEntryPrice) / lastLongEntryPrice)
    float longRiskRewardRatio = longAvgTakeProfitRatio / longEntryStopLossRatio
    bool isWin = longProfitRatio >= 0.0
    // Keep stats for later use
    if (showTable)
        if (isWin)
            currentWinningStreak := currentWinningStreak + 1
            winTradeFreeProfitsPerc.push(100.0 * longFreeProfitRatio)
            winTradeProfitsPerc.push(100.0 * longProfitRatio)
            winTradeGainsPerc.push(longGainPerc)
            winSumTakeProfitExecutedCount := winSumTakeProfitExecutedCount + longTrailTakeProfitExecutedCount
            winSumQuantityPerc := winSumQuantityPerc + 100.0 * longEntryQuoteQuantityRatio[histId]
            currentLosingStreak := 0
            if (quantityMethod != 'RISK')
                winRisksPerc.push(100.0 * longCapitalRiskRatio[histId])
            winRiskRewardRatios.push(longRiskRewardRatio)
        else
            currentLosingStreak := currentLosingStreak + 1
            lossTradeFreeProfitsPerc.push(100.0 * longFreeProfitRatio)
            lossTradeProfitsPerc.push(100.0 * longProfitRatio)
            lossTradeGainsPerc.push(longGainPerc)
            lossSumTakeProfitExecutedCount := lossSumTakeProfitExecutedCount + longTrailTakeProfitExecutedCount
            lossSumQuantityPerc := lossSumQuantityPerc + 100.0 * longEntryQuoteQuantityRatio[histId]
            currentWinningStreak := 0
            if (quantityMethod != 'RISK')
                lossRisksPerc.push(100.0 * longCapitalRiskRatio[histId])
            lossRiskRewardRatios.push(longRiskRewardRatio)
        maxWinningStreak := math.max(currentWinningStreak, maxWinningStreak)
        maxLosingStreak := math.max(currentLosingStreak, maxLosingStreak)
        if (longInconclusiveExit)
            numOfInconclusiveExits := numOfInconclusiveExits + 1
    // Plot trades' line and label
    if (showTradeStats)
        string longFreeProfitPercStr = (longFreeProfitRatio >= 0.0 ? '+' : '') + str.tostring(100.0 * longFreeProfitRatio, format.percent)
        string longProfitPercStr = (isWin ? '+' : '') + str.tostring(100.0 * longProfitRatio, format.percent)
        string longGainPercStr = (isWin ? '+' : '') + str.tostring(longGainPerc, format.percent)
        float tradePrice = isWin and longTrailTakeProfitExecutedCount > 0 ? math.max((longTakeProfitPrices[histId]).get(longTrailTakeProfitExecutedCount - 1), longStopLossPrice[histId], lastLongExitPrice) : lastLongExitPrice
        int labelBarId = math.floor((lastLongEntryBarIndex + lastLongExitBarIndex + 1) / 2)
        line.new(x1 = labelBarId, y1 = tradePrice, x2 = lastLongEntryBarIndex, y2 = lastLongEntryPrice, xloc = xloc.bar_index, extend = extend.none, color = isWin ? winColor : lossColor, style = line.style_arrow_right, width = 1)
        line.new(x1 = labelBarId, y1 = tradePrice, x2 = lastLongExitBarIndex, y2 = lastLongExitPrice, xloc = xloc.bar_index, extend = extend.none, color = isWin ? winColor : lossColor, style = line.style_arrow_right, width = 1)
        label.new(x = labelBarId, y = tradePrice, text = (longInconclusiveExit ? '🚨' : '') + (isWin ? 'Win' : 'Loss'), xloc = xloc.bar_index, yloc = yloc.price, color = isWin ? winColor : lossColor, style = isWin ? label.style_label_down : label.style_label_up, textcolor = textColor, size = size.normal,
          tooltip = str.format('Quantity: {0, number, percent}\nCapital Risk: {1, number, percent}\nEntry Price: {2, number, currency}\nExit Price: {3, number, currency}\nFree Profit: {4}\nProfit: {5}\nGain: {6}\nTP Exec #: {7, number, integer}\nRisk Reward: {8, number, #.##}\nInit SL: {9, number, percent}\nAvg TP: {10, number, percent}',
             longEntryQuoteQuantityRatio[histId], longCapitalRiskRatio[histId], lastLongEntryPrice, lastLongExitPrice, longFreeProfitPercStr, longProfitPercStr, longGainPercStr, longTrailTakeProfitExecutedCount, longRiskRewardRatio, longEntryStopLossRatio, longAvgTakeProfitRatio))
if (completedShortTrade and showStats)
    // Short entry bar id and price
    var int lastShortEntryBarIndex = na
    var float lastShortEntryPrice = na
    if (closedTradeEntryIdStartsWith(shortOrderIdPrefix) or (closedTradeEntryIdStartsWith(shortOrderIdPrefix, 2) and lastTwoClosedTradesEnteredInTheSameBar()))
        lastShortEntryBarIndex := closedTradesEntryBarIndex(1)
        lastShortEntryPrice := closedTradesEntryPrice(1)
    else if (strategy.closedtrades > 1 ? closedTradeEntryIdStartsWith(shortOrderIdPrefix, 2) and lastTwoClosedTradesExitedInTheSameBar() : false)
        lastShortEntryBarIndex := closedTradesEntryBarIndex(2)
        lastShortEntryPrice := closedTradesEntryPrice(2)
    float exRatio = lastShortExitPrice / lastShortEntryPrice
    float shortFreeProfitRatio = 1.0 - exRatio - exRatio * commissionRatio - commissionRatio
    float shortProfitRatio = - commissionRatio
    bool shortInconclusiveExit = false
    int histId = shortLimitOrStopEntryIsActive or validOpenShortPosition or enteredShortTrade ? 1 : 0
    int numOfExits = getNumOfExits(shortOrderIdClose, shortTrailTakeProfitExecutedCount)
    for i = strategy.closedtrades - 1 to strategy.closedtrades - numOfExits
        float ithExPrice = closedTradeExitIdContains(shortOrderIdPrefix) ? strategy.closedtrades.exit_price(i) : strategy.closedtrades.exit_price(i - 1)
        float ithExRatio = ithExPrice / lastShortEntryPrice
        float quanityRatio = str.startswith(strategy.closedtrades.exit_id(i), str.format('{0} Take Profit', shortOrderIdPrefix)) ? takeProfitQuantityRatio : shortRemainingQuantityRatio
        shortProfitRatio += (1.0 - ithExRatio - ithExRatio * commissionRatio) * quanityRatio
        int tpId = moonbagQuantityRatio == 0.0 ? numOfTakeProfitTargets + i - strategy.closedtrades : numOfTakeProfitTargets + i - strategy.closedtrades - 1
        shortInconclusiveStopLoss = tpId < numOfTakeProfitTargets and tpId >= 0 and high > shortStopLossPrice ? lowestLowSinceShortEntry < (shortTakeProfitPrices[histId]).get(tpId) and not shortTrailTakeProfitExecuted.get(tpId) : false
        shortInconclusiveTakeProfit = false
        for j = strategy.closedtrades - 1 to strategy.closedtrades - numOfExits
            shortInconclusiveTakeProfit := bar_index == strategy.closedtrades.exit_bar_index(i) and bar_index == strategy.closedtrades.exit_bar_index(j) and strategy.closedtrades.exit_price(i) != strategy.closedtrades.exit_price(j) and high > shortStopLossPrice[histId]
        shortInconclusiveExit := shortInconclusiveExit or shortInconclusiveStopLoss or shortInconclusiveTakeProfit
    float shortGainPerc = shortProfitRatio * 100.0 * shortEntryQuoteQuantityRatio[histId]
    float shortAvgTakeProfitRatio = nz((lastShortEntryPrice - (shortTakeProfitPrices[histId]).avg()) / lastShortEntryPrice)
    float shortRiskRewardRatio = shortAvgTakeProfitRatio / shortEntryStopLossRatio
    bool isWin = shortProfitRatio >= 0.0
    // Keep stats for later use
    if (showTable)
        if (isWin)
            currentWinningStreak := currentWinningStreak + 1
            winTradeFreeProfitsPerc.push(100.0 * shortFreeProfitRatio)
            winTradeProfitsPerc.push(100.0 * shortProfitRatio)
            winTradeGainsPerc.push(shortGainPerc)
            winSumTakeProfitExecutedCount := winSumTakeProfitExecutedCount + shortTrailTakeProfitExecutedCount
            winSumQuantityPerc := winSumQuantityPerc + 100.0 * shortEntryQuoteQuantityRatio[histId]
            currentLosingStreak := 0
            if (quantityMethod != 'RISK')
                winRisksPerc.push(100.0 * shortCapitalRiskRatio[histId])
            winRiskRewardRatios.push(shortRiskRewardRatio)
        else
            currentLosingStreak := currentLosingStreak + 1
            lossTradeFreeProfitsPerc.push(100.0 * shortFreeProfitRatio)
            lossTradeProfitsPerc.push(100.0 * shortProfitRatio)
            lossTradeGainsPerc.push(shortGainPerc)
            lossSumTakeProfitExecutedCount := lossSumTakeProfitExecutedCount + shortTrailTakeProfitExecutedCount
            lossSumQuantityPerc := lossSumQuantityPerc + 100.0 * shortEntryQuoteQuantityRatio[histId]
            currentWinningStreak := 0
            if (quantityMethod != 'RISK')
                lossRisksPerc.push(100.0 * shortCapitalRiskRatio[histId])
            lossRiskRewardRatios.push(shortRiskRewardRatio)
        maxWinningStreak := math.max(currentWinningStreak, maxWinningStreak)
        maxLosingStreak := math.max(currentLosingStreak, maxLosingStreak)
        if (shortInconclusiveExit)
            numOfInconclusiveExits := numOfInconclusiveExits + 1
    // Plot trade stats (line and label)
    if (showTradeStats)
        string shortFreeProfitPercStr = (shortFreeProfitRatio >= 0.0 ? '+' : '') + str.tostring(100.0 * shortFreeProfitRatio, format.percent)
        string shortProfitPercStr = (isWin ? '+' : '') + str.tostring(100.0 * shortProfitRatio, format.percent)
        string shortGainPercStr = (isWin ? '+' : '') + str.tostring(shortGainPerc, format.percent)
        float tradePrice = isWin and shortTrailTakeProfitExecutedCount > 0 ? math.min((shortTakeProfitPrices[histId]).get(shortTrailTakeProfitExecutedCount - 1), shortStopLossPrice[histId], lastShortExitPrice) : lastShortExitPrice
        int labelBarId = math.floor((lastShortEntryBarIndex + lastShortExitBarIndex + 1) / 2)
        line.new(x1 = labelBarId, y1 = tradePrice, x2 = lastShortEntryBarIndex, y2 = lastShortEntryPrice, xloc = xloc.bar_index, extend = extend.none, color = isWin ? winColor : lossColor, style = line.style_arrow_right, width = 1)
        line.new(x1 = labelBarId, y1 = tradePrice, x2 = lastShortExitBarIndex, y2 = lastShortExitPrice, xloc = xloc.bar_index, extend = extend.none, color = isWin ? winColor : lossColor, style = line.style_arrow_right, width = 1)
        label.new(x = labelBarId, y = tradePrice, text = (shortInconclusiveExit ? '🚨' : '') + (isWin ? 'Win' : 'Loss'), xloc = xloc.bar_index, yloc = yloc.price, color = isWin ? winColor : lossColor, style = isWin ? label.style_label_up : label.style_label_down, textcolor = textColor, size = size.normal,
          tooltip = str.format('Quantity: {0, number, percent}\nCapital Risk: {1, number, percent}\nEntry Price: {2, number, currency}\nExit Price: {3, number, currency}\nFree Profit: {4}\nProfit: {5}\nGain: {6}\nTP Exec #: {7, number, integer}\nRisk Reward: {8, number, #.##}\nInit SL: {9, number, percent}\nAvg TP: {10, number, percent}',
             shortEntryQuoteQuantityRatio[histId], shortCapitalRiskRatio[histId], lastShortEntryPrice, lastShortExitPrice, shortFreeProfitPercStr, shortProfitPercStr, shortGainPercStr, shortTrailTakeProfitExecutedCount, shortRiskRewardRatio, shortEntryStopLossRatio, shortAvgTakeProfitRatio))
// Buy&Hold
var float firstEntry = 0.0
var bool firstBuyInit = false
var float buyAndHoldPerc = 0.0
if (showMetricsTable and (not firstBuyInit and (enteredLongTrade or enteredShortTrade)))
    firstEntry := enteredLongTrade ? longEntryPrice : shortEntryPrice
    firstBuyInit := true
if (showMetricsTable and (completedLongTrade or completedShortTrade))
    buyAndHoldPerc := 100.0 * (strategy.closedtrades.exit_price(strategy.closedtrades - 1) - firstEntry) / firstEntry
// PLOT ================================================================================================================
if (showTable and (barstate.islastconfirmedhistory or barstate.islast))
    // Trades
    int numOfWins = winTradeProfitsPerc.size()
    int numOfLosses = lossTradeProfitsPerc.size()
    int numOfTrades = numOfWins + numOfLosses
    // Rate
    float winRate = numOfWins / numOfTrades
    float lossRate = numOfLosses / numOfTrades
    // Avg Free Profit
    var float winSumFreeProfit = nz(winTradeFreeProfitsPerc.sum())
    var float lossSumFreeProfit = nz(lossTradeFreeProfitsPerc.sum())
    float winAvgFreeProfit = nz(winSumFreeProfit / numOfWins)
    float lossAvgFreeProfit = nz(lossSumFreeProfit / numOfLosses)
    float avgFreeProfit = winAvgFreeProfit * winRate + lossAvgFreeProfit * lossRate
    // Free Profit Dev
    float winFreeProfitStDev = nz(winTradeFreeProfitsPerc.stdev())
    float lossFreeProfitStDev = nz(lossTradeFreeProfitsPerc.stdev())
    float freeProfitStDev = winFreeProfitStDev * winRate + lossFreeProfitStDev * lossRate
    // Avg Profit
    float winSumProfit = nz(winTradeProfitsPerc.sum())
    float winAvgProfit = nz(winSumProfit / numOfWins)
    float lossSumProfit = nz(lossTradeProfitsPerc.sum())
    float lossAvgProfit = nz(lossSumProfit / numOfLosses)
    float avgProfit = winAvgProfit * winRate + lossAvgProfit * lossRate
    // Profit Dev
    float winProfitStDev = nz(winTradeProfitsPerc.stdev())
    float lossProfitStDev = nz(lossTradeProfitsPerc.stdev())
    float profitStDev = winProfitStDev * winRate + lossProfitStDev * lossRate
    // Avg Gain
    float winSumGain = nz(winTradeGainsPerc.sum())
    float winAvgGain = nz(winSumGain / numOfWins)
    float lossSumGain = nz(lossTradeGainsPerc.sum())
    float lossAvgGain = nz(lossSumGain / numOfLosses)
    float avgGain = winAvgGain * winRate + lossAvgGain * lossRate
    // Gain Dev
    float winGainStDev = nz(winTradeGainsPerc.stdev())
    float lossGainStDev = nz(lossTradeGainsPerc.stdev())
    float gainStDev = winGainStDev * winRate + lossGainStDev * lossRate
    // Quantity
    float winAvgQuantityPerc = quantityMethod != 'EQUITY' ? nz(winSumQuantityPerc / numOfWins) : 100.0 * equityRatio
    float lossAvgQuantityPerc = quantityMethod != 'EQUITY' ? nz(lossSumQuantityPerc / numOfLosses) : 100.0 * equityRatio
    float avgQuantityPerc = winAvgQuantityPerc * winRate + lossAvgQuantityPerc * lossRate
    // Risk
    float winAvgCapitalRiskPerc = quantityMethod != 'RISK' ? nz(winRisksPerc.avg()) : 100.0 * capitalRiskRatio
    float lossAvgCapitalRiskPerc = quantityMethod != 'RISK' ? nz(lossRisksPerc.avg()) : 100.0 * capitalRiskRatio
    float avgCapitalRiskPerc = winAvgCapitalRiskPerc * winRate + lossAvgCapitalRiskPerc * lossRate
    // TP Exec #
    float winAvgTPExecutedCount = nz(winSumTakeProfitExecutedCount / numOfWins)
    float lossAvgTPExecutedCount = nz(lossSumTakeProfitExecutedCount / numOfLosses)
    float avgTPExecutedCount = winAvgTPExecutedCount * winRate + lossAvgTPExecutedCount * lossRate
    // Risk/Reward
    float winAvgRiskRewardRatio = nz(winRiskRewardRatios.avg())
    float lossAvgRiskRewardRatio = nz(lossRiskRewardRatios.avg())
    float avgRiskRewardRatio = winAvgRiskRewardRatio * winRate + lossAvgRiskRewardRatio * lossRate
    // Stat Strings
    string avgFreeProfitStr = (avgFreeProfit > 0.0 ? '+' : '') + str.tostring(avgFreeProfit, format.percent)
    string freeProfitStDevStr = '±' + str.tostring(freeProfitStDev, format.percent)
    string lossFreeProfitStDevStr = str.tostring(lossFreeProfitStDev, format.percent)
    string avgProfitStr = (avgProfit > 0.0 ? '+' : '') + str.tostring(avgProfit, format.percent)
    string profitStDevStr = '±' + str.tostring(profitStDev, format.percent)
    string lossProfitStDevStr = '±' + str.tostring(lossProfitStDev, format.percent)
    string avgQuantityStr = str.tostring(avgQuantityPerc, format.percent)
    // Table colors
    var color txtColor = color.new(color.silver, 0)
    var color bgColor = color.new(color.black, 95)
    var color borderColor = color.new(color.black, 0)
    var color positiveTxtColor = color.new(takeProfitColor, 0)
    var color negativeTxtColor = color.new(lossColor, 0)
    var color positiveBgColor = color.new(winColor, 95)
    var color negativeBgColor = color.new(stopLossColor, 95)
    // The Stats table
    if (showStatsTable)
        var table statsTable = table.new(position = getTablePosition(statsTablePos), columns = 4, rows = 14, frame_color = borderColor, frame_width = 2, border_color = borderColor, border_width = 1)
        // Horizontal headers
        table.cell(table_id = statsTable, column = 1, row = 0, text = 'All', text_color = txtColor, text_size = size.normal, bgcolor = bgColor, tooltip = 'All trades (winning and losing).')
        table.cell(table_id = statsTable, column = 2, row = 0, text = 'Wins', text_color = positiveTxtColor, text_size = size.normal, bgcolor = positiveBgColor, tooltip = 'The winning trades.')
        table.cell(table_id = statsTable, column = 3, row = 0, text = 'Losses', text_color = negativeTxtColor, text_size = size.normal, bgcolor = negativeBgColor, tooltip = 'The losing trades.')
        // Vertical headers
        table.cell(table_id = statsTable, column = 0, row = 1, text = 'Trades', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The total number of trades and those that had a winning/losing outcome.')
        table.cell(table_id = statsTable, column = 0, row = 2, text = 'Streak', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The maximum consecutive number of wins/losses in a row.')
        table.cell(table_id = statsTable, column = 0, row = 3, text = 'Rate', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The percent of the wins/losses.')
        table.cell(table_id = statsTable, column = 0, row = 4, text = 'Avg Free Profit', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The free average profit (percentagewise) per trade of all/winning/losing trades. This is the profit you would have if you entered and exited all the trades without any stop loss and take profits reached.')
        table.cell(table_id = statsTable, column = 0, row = 5, text = 'Free Profit Dev', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The standard deviation of all/winning/losing trade free profits.')
        table.cell(table_id = statsTable, column = 0, row = 6, text = 'Avg Profit', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The average profit (percentagewise) per trade of all/winning/losing trades.')
        table.cell(table_id = statsTable, column = 0, row = 7, text = 'Profit Dev', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The standard deviation of all/winning/losing trade profits.')
        table.cell(table_id = statsTable, column = 0, row = 8, text = 'Avg Gain', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The average gain on account (percentagewise) per trade of all/winning/losing trades weighted by the entry quantity percentage. Thus the result is non-compounding.')
        table.cell(table_id = statsTable, column = 0, row = 9, text = 'Gain Dev', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The standard deviation of all/winning/losing trade gains.')
        table.cell(table_id = statsTable, column = 0, row = 10, text = 'Quantity', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The average quantity percent of all/winning/losing trades.')
        table.cell(table_id = statsTable, column = 0, row = 11, text = 'Capital Risk', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The average capital at risk of all/winning/losing trades.')
        table.cell(table_id = statsTable, column = 0, row = 12, text = 'TP Exec #', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The average number of take profit targets executed during all/winning/losing trades.')
        table.cell(table_id = statsTable, column = 0, row = 13, text = 'Risk Reward', text_color = txtColor, text_size = size.small, bgcolor = bgColor, tooltip = 'The average risk to reward ratio when entered all/winning/losing trades.')
        // Trades
        table.cell(table_id = statsTable, column = 1, row = 1, text = str.tostring(numOfTrades), text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 1, text = str.tostring(numOfWins), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 1, text = str.tostring(numOfLosses), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Streak
        table.cell(table_id = statsTable, column = 1, row = 2, text = numOfInconclusiveExits > 0 ? '🚨' : '', bgcolor = numOfInconclusiveExits > 0 ? negativeBgColor : bgColor, tooltip = str.format('WARNING! {0, number, integer} inconclusive exit order(s) were detected this is the {1, number, percent} of all the trades. This means that orders exist were both take profit and stop loss could be reached at the same bar and exit the trade, but due to the "loss of information" in that timeframe a random exit were chosen. Please use a lower timeframe or the bar magnifier feature to have more accurate results.', numOfInconclusiveExits, numOfInconclusiveExits / numOfTrades))
        table.cell(table_id = statsTable, column = 2, row = 2, text = str.tostring(maxWinningStreak), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 2, text = str.tostring(maxLosingStreak), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Rate
        table.cell(table_id = statsTable, column = 1, row = 3, text = str.tostring(100.0 * (winRate + lossRate), format.percent), text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 3, text = str.tostring(100.0 * winRate, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 3, text = str.tostring(100.0 * lossRate, format.percent), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Free Avg Profit
        table.cell(table_id = statsTable, column = 1, row = 4, text = avgFreeProfitStr, text_color = avgFreeProfit > 0.0 ? positiveTxtColor : negativeTxtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 4, text = '+' + str.tostring(winAvgFreeProfit, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 4, text = str.tostring(lossAvgFreeProfit, format.percent), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Free Profit Dev
        table.cell(table_id = statsTable, column = 1, row = 5, text = freeProfitStDevStr, text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 5, text = '±' + str.tostring(winFreeProfitStDev, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 5, text = lossFreeProfitStDevStr, text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Avg Profit
        table.cell(table_id = statsTable, column = 1, row = 6, text = avgProfitStr, text_color = avgProfit > 0.0 ? positiveTxtColor : negativeTxtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 6, text = '+' + str.tostring(winAvgProfit, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 6, text = str.tostring(lossAvgProfit, format.percent), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Profit Dev
        table.cell(table_id = statsTable, column = 1, row = 7, text = profitStDevStr, text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 7, text = '±' + str.tostring(winProfitStDev, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 7, text = lossProfitStDevStr, text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Avg Gain
        table.cell(table_id = statsTable, column = 1, row = 8, text = (avgGain > 0.0 ? '+' : '') + str.tostring(avgGain, format.percent), text_color = avgGain > 0.0 ? positiveTxtColor : negativeTxtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 8, text = '+' + str.tostring(winAvgGain, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 8, text = str.tostring(lossAvgGain, format.percent), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Gain Dev
        table.cell(table_id = statsTable, column = 1, row = 9, text = '±' + str.tostring(gainStDev, format.percent), text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 9, text = '±' + str.tostring(winGainStDev, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 9, text = '±' + str.tostring(lossGainStDev, format.percent), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Quantity
        table.cell(table_id = statsTable, column = 1, row = 10, text = avgQuantityStr, text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 10, text = str.tostring(winAvgQuantityPerc, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 10, text = str.tostring(lossAvgQuantityPerc, format.percent), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Risk
        table.cell(table_id = statsTable, column = 1, row = 11, text = str.tostring(avgCapitalRiskPerc, format.percent), text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 11, text = str.tostring(winAvgCapitalRiskPerc, format.percent), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 11, text = str.tostring(lossAvgCapitalRiskPerc, format.percent), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // TP Exec #
        table.cell(table_id = statsTable, column = 1, row = 12, text = str.tostring(avgTPExecutedCount, '#.##'), text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 12, text = str.tostring(winAvgTPExecutedCount, '#.##'), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 12, text = str.tostring(lossAvgTPExecutedCount, '#.##'), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Risk/Reward
        table.cell(table_id = statsTable, column = 1, row = 13, text = str.tostring(avgRiskRewardRatio, '#.##'), text_color = txtColor, text_size = size.small, bgcolor = bgColor)
        table.cell(table_id = statsTable, column = 2, row = 13, text = str.tostring(winAvgRiskRewardRatio, '#.##'), text_color = positiveTxtColor, text_size = size.small, bgcolor = positiveBgColor)
        table.cell(table_id = statsTable, column = 3, row = 13, text = str.tostring(lossAvgRiskRewardRatio, '#.##'), text_color = negativeTxtColor, text_size = size.small, bgcolor = negativeBgColor)
        // Table Description
        table.cell(table_id = statsTable, column = 0, row = 0, text = '❓', text_color = txtColor, text_size = size.normal, bgcolor = bgColor, tooltip = 'This table summarizes the overall statistics of all/winning/losing trades of the strategy. In contrast to the TV backtest engine, a trade is considered to be complete when the entire entry position was exited and not when an order is executed (e.g. a take profit price target is reached).')
    // The Metrics table
    if (showMetricsTable)
        var table metricsTable = table.new(position = getTablePosition(metricsTablePos), columns = 3, rows = 2, frame_color = borderColor, frame_width = 2, border_color = borderColor, border_width = 1)
        // Metrics Alpha - Beta - Gamma
        float sumProfit = winSumProfit + lossSumProfit
        float alpha = 1.0 + nz((sumProfit - buyAndHoldPerc) / math.abs(buyAndHoldPerc))
        bool alphaAcceptance = alpha >= 1.0
        float netProfitPerc = 100.0 * strategy.netprofit / strategy.initial_capital
        float beta = 1.0 + nz((netProfitPerc - buyAndHoldPerc) / math.abs(buyAndHoldPerc))
        bool betaAcceptance = beta >= 1.0
        float kellyRatioPerc = 100.0 * (winRate * avgRiskRewardRatio - lossRate) / avgRiskRewardRatio
        float gamma = 1.0 + nz((kellyRatioPerc - avgQuantityPerc) / avgQuantityPerc)
        bool gammaAcceptance = gamma >= 1.0
        string buyAndHoldPercStr = str.tostring(buyAndHoldPerc, format.percent)
        table.cell(table_id = metricsTable, column = 0, row = 0, text = str.format('α: {0, number, percent}', alpha), text_color = alphaAcceptance ? positiveTxtColor : negativeTxtColor, text_size = size.normal, bgcolor = alphaAcceptance ? positiveBgColor : negativeBgColor, tooltip = str.format('This alpha metric shows how better or worst the sum of the profits/losses is ({0}) as a percentage compared to the buy and hold return ({1}). If the alpha value is less than 100% this means that the strategy performed worse than the buy and hold for the period of the backtesting.', str.tostring(sumProfit, format.percent), buyAndHoldPercStr))
        table.cell(table_id = metricsTable, column = 1, row = 0, text = str.format('β: {0, number, percent}', beta), text_color = betaAcceptance ? positiveTxtColor : negativeTxtColor, text_size = size.normal, bgcolor = betaAcceptance ? positiveBgColor : negativeBgColor, tooltip = str.format('This beta metric shows how better or worst the net profit is ({0}) as a percentage compared to the buy and hold return ({1}). If the beta value is less than 100% this means that the strategy performed worse than the buy and hold for the period of the backtesting.', str.tostring(netProfitPerc, format.percent), buyAndHoldPercStr))
        table.cell(table_id = metricsTable, column = 2, row = 0, text = str.format('γ: {0, number, percent}', gamma), text_color = gammaAcceptance ? positiveTxtColor : negativeTxtColor, text_size = size.normal, bgcolor = gammaAcceptance ? positiveBgColor : negativeBgColor, tooltip = str.format('This gamma metric shows how better or worst the average quantity percent per trade is ({0}) as a percentage compared to the Kelly ratio ({1}). If the gamma value is less than 100% and the kelly ratio is possitive this means you take too much risk on every trade for the period of the backtesting and you have to decrease the quantity pecentage (or capital at risk %) of each trade. An other alternative is to try to increase the kelly ratio by increasing the win rate and/or the risk to reward ratio.', avgQuantityStr, str.tostring(kellyRatioPerc, format.percent)))
        // Metrics Chi - Psi - Zeta
        float chi = 1.0 + nz((avgProfit - avgFreeProfit) / math.abs(avgFreeProfit))
        bool chiAcceptance = chi >= 1.0
        float profitStDevInc = 1.0 + nz((profitStDev - freeProfitStDev) / math.abs(freeProfitStDev))
        float psi = chi / profitStDevInc
        bool psiAcceptance = psi >= 1.0
        float lossProfitStDevInc = 1.0 + nz((lossProfitStDev - lossFreeProfitStDev) / math.abs(lossFreeProfitStDev))
        float zeta = chi / lossProfitStDevInc
        bool zetaAcceptance = zeta >= 1.0
        table.cell(table_id = metricsTable, column = 0, row = 1, text = str.format('χ: {0, number, percent}', chi), text_color = chiAcceptance ? positiveTxtColor : negativeTxtColor, text_size = size.normal, bgcolor = chiAcceptance ? positiveBgColor : negativeBgColor, tooltip = str.format('This chi metric shows how better or worst the average profit is ({0}) as a percentage compared to the free profit ({1}). If the chi value is less than 100% this means that the strategy would have more profits without the take profit targets for the period of the backtesting.', avgProfitStr, avgFreeProfitStr))
        table.cell(table_id = metricsTable, column = 1, row = 1, text = str.format('ψ: {0, number, percent}', psi), text_color = psiAcceptance ? positiveTxtColor : negativeTxtColor, text_size = size.normal, bgcolor = psiAcceptance ? positiveBgColor : negativeBgColor, tooltip = str.format('This psi metric shows the ratio of the chi with the standard deviation percentage increase ({0, number, percent}). That shows how better or worst the standard deviation is ({1}) as a percentage compared to the free standard deviation ({2}). If the psi value is less than 100% this means that the strategy increases the standard deviation way too much for the additional profits that returns on top of the free profit for the period of the backtesting.', profitStDevInc, profitStDevStr, freeProfitStDevStr))
        table.cell(table_id = metricsTable, column = 2, row = 1, text = str.format('ζ: {0, number, percent}', zeta), text_color = zetaAcceptance ? positiveTxtColor : negativeTxtColor, text_size = size.normal, bgcolor = zetaAcceptance ? positiveBgColor : negativeBgColor, tooltip = str.format('The zeta metric shows the ratio of the chi with the downside deviation percentage increase ({0, number, percent}). That shows how better or worst the downwards deviation is ({1}) as a percentage compared to the free downwards deviation ({2}). If the zeta value is less than 100% this means that the strategy increases the downwards deviation way too much for the additional profits that returns on top of the free profit for the period of the backtesting.', lossProfitStDevInc, lossProfitStDevStr, lossFreeProfitStDevStr))
//#endregion ===========================================================================================================
//#region 🗲 EXECUTION CONDITIONS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for conditional variables to enter and exit orders
// Dependencies: ENTRY, EXIT
// Results: ALL
// LOGIC ===============================================================================================================
bool doCloseMarketLong = (exitOrderType == 'MARKET' and validCloseLongPosition) or (stopLossWaitCloseConfirm and close < longStopLossPrice) or validOpenShortPosition
bool doCloseMarketShort = (exitOrderType == 'MARKET' and validCloseShortPosition) or (stopLossWaitCloseConfirm and close > shortStopLossPrice) or validOpenLongPosition
bool doEnterMarketLong = entryOrderType == 'MARKET' ? validOpenLongPosition : longLimitOrStopEntryIsActive
bool doCnlLimitEntryLong = longLimitOrStopEntryIsActive[1] and validCnlOpenLongPosition
bool doSLorExitLimitLong = longLimitExitIsActive or longIsActive
bool doCnlLimitExitLong = longLimitExitIsActive and validCnlCloseLongPosition
bool doEnterMarketShort = entryOrderType == 'MARKET' ? validOpenShortPosition : shortLimitOrStopEntryIsActive
bool doCnlLimitEntryShort = shortLimitOrStopEntryIsActive[1] and validCnlOpenShortPosition
bool doSLorExitLimitShort = shortLimitExitIsActive or shortIsActive
bool doCnlLimitExitShort = shortLimitExitIsActive and validCnlCloseShortPosition
//#endregion ===========================================================================================================
//#region 🔔 ALERT MESSAGES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the message outputs when strategy orders are being executed
// Dependencies: ENTRY, TAKE PROFIT 1, EXIT, STOP LOSS, TAKE PROFIT 2, QUANTITY/RISK MANAGEMENT, EXECUTION CONDITIONS
// Results: ALL
import jason5480/string_utils/3 as su
// INPUT ===============================================================================================================
tickerPrefix = input.string(defval = '', title = 'Ticker Id Prefix/Postfix', inline = 'Ticker', group = '🔔 Alert Messages')
tickerPostfix = input.string(defval = '', title = '​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​', tooltip = 'Prepend/Append a custom string to the TVs ticker id when you use {{ticker}} as variable in the alert messages.', inline = 'Ticker', group = '🔔 Alert Messages')
usePercRange100 = input.bool(defval = true, title = 'Percentage Range [0, 100]', tooltip = 'Enable to multiply all the percentatges with 100 so that the values range from [0, 100] instead of [0, 1].', group = '🔔 Alert Messages')
marginMsgTicks = input.int(defval = 5, title = 'Margin Ticks', minval = 1, tooltip = 'The ticks that will be added/substracted from entry/exit price to calculate the {${ENTRY+}}, {${ENTRY-}}, {${EXIT+}}, {${EXIT-}} variables. Those values could be used if you want to send a limit order to your exchange and the price might go to the "wrong" side due to the high volatility of the market and delay between the time of computation and execution.', group = '🔔 Alert Messages')
msgEnteredEnabled = input.bool(defval = false, title = 'Enable Entry Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "entry order fills" of the strategy (e.g. market, limit, stop and stop-limit entry). WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
rawMsgEnteredMarketLong = msgEnteredEnabled ? input.text_area(defval = 'Long Entry({{ticker}}): Bought at market price of {{entry_price}} {{quote_currency}} an amount equal to {{base_quantity}} {{base_currency}} (for {{quote_quantity}} {{quote_currency}}) and risk of {{risk_perc}}%. The stop loss was placed at {{stop_loss_price}} {{quote_currency}} and take profit targets at [{{take_profit_price_1}}, {{take_profit_price_2}}, {{take_profit_price_3}}, {{take_profit_price_4}}, {{take_profit_price_5}}] {{quote_currency}}', title = 'Enter Market Long', tooltip = 'Alert message emitted when entered long position. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
rawMsgEnteredMarketShort = msgEnteredEnabled ? input.text_area(defval = 'Short Entry({{ticker}}): Sold at market price of {{entry_price}} {{quote_currency}} an amount equal to {{base_quantity}} {{base_currency}} (for {{quote_quantity}} {{quote_currency}}) and risk of {{risk_perc}}%. The stop loss was placed at {{stop_loss_price}} {{quote_currency}} and take profit targets at [{{take_profit_price_1}}, {{take_profit_price_2}}, {{take_profit_price_3}}, {{take_profit_price_4}}, {{take_profit_price_5}}] {{quote_currency}}', title = 'Enter Market Short', tooltip = 'Alert message emitted when entered short position. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
rawMsgEnteredLimitOrStopLong = msgEnteredEnabled ? input.text_area(defval = 'Long Entry({{ticker}}): Bought with limit, stop or stop-limit entry order at the price of {{entry_price}} {{quote_currency}} an amount equal to {{base_quantity}} {{base_currency}} and risk of {{risk_perc}}%. The stop loss was placed at {{stop_loss_price}} {{quote_currency}} and take profit targets at [{{take_profit_price_1}}, {{take_profit_price_2}}, {{take_profit_price_3}}, {{take_profit_price_4}}, {{take_profit_price_5}}] {{quote_currency}}', title = 'Enter Limit Long', tooltip = 'Alert message emitted when entered long position with a limit, stop or stop-limit order. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
rawMsgEnteredLimitOrStopShort = msgEnteredEnabled ? input.text_area(defval = 'Short Entry({{ticker}}): Sold with limit, stop or stop-limit entry order at the price of {{entry_price}} {{quote_currency}} an amount equal to {{base_quantity}} {{base_currency}} and risk of {{risk_perc}}%. The stop loss was placed at {{stop_loss_price}} {{quote_currency}} and take profit targets at [{{take_profit_price_1}}, {{take_profit_price_2}}, {{take_profit_price_3}}, {{take_profit_price_4}}, {{take_profit_price_5}}] {{quote_currency}}', title = 'Enter Limit Short', tooltip = 'Alert message emitted when entered short position with a limit, stop or stop-limit order. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
msgClosedOrExitedEnabled = input.bool(defval = false, title = 'Enable Close/Exit Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "close/exit order fills" of the strategy (e.g. market, limit and stop exit). WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
rawMsgClosedMarketLong = msgClosedOrExitedEnabled ? input.text_area(defval = 'Long Close({{ticker}}): Sold at market price of {{exit_price}} {{quote_currency}} {{remaining_quantity_perc}}% of the initial position', title = 'Close Market Long', tooltip = 'Alert message emitted when closed long position. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
rawMsgClosedMarketShort = msgClosedOrExitedEnabled ? input.text_area(defval = 'Short Close({{ticker}}): Bought at market price of {{exit_price}} {{quote_currency}} {{remaining_quantity_perc}}% of the initial position', title = 'Close Market Short', tooltip = 'Alert message emitted when closed short position. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
rawMsgExitedLimitOrStopLong = msgClosedOrExitedEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Sold with limit or stop exit order at the price of {{exit_price}} {{quote_currency}} {{remaining_quantity_perc}}% of the initial position', title = 'Exit Limit Long', tooltip = 'Alert message emitted when exited long position with a limit or stop order. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
rawMsgExitedLimitOrStopShort = msgClosedOrExitedEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Bought with limit or stop exit order at the price of {{exit_price}} {{quote_currency}} {{remaining_quantity_perc}}% of the initial position', title = 'Exit Limit Short', tooltip = 'Alert message emitted when exited short position with a limit or stop order. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
rawMsgClosedAll = msgClosedOrExitedEnabled ? input.text_area(defval = 'Close All({{ticker}}): Closed all positions at market price of {{exit_price}} {{quote_currency}}', title = 'Close All', tooltip = 'Alert message emitted when closed all positions. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
msgTakeProfitEnabled = input.bool(defval = false, title = 'Enable Take Profit Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "profit order fills" of the strategy (e.g. take profit "partial" exit). WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
var int numOfMaxTPAlerts = 5
var string[] rawMsgRchTPLong = array.new<string>(numOfMaxTPAlerts, na)
var string[] rawMsgRchTPShort = array.new<string>(numOfMaxTPAlerts, na)
rawMsgRchTPLong.set(0, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 1 executed at the price of {{take_profit_price_1}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP1 Long', tooltip = 'Alert message emitted when the first take profit price target for the long position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPShort.set(0, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 1 executed at the price of {{take_profit_price_1}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP1 Short', tooltip = 'Alert message emitted when the first take profit price target for the short position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPLong.set(1, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 2 executed at the price of {{take_profit_price_2}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP2 Long', tooltip = 'Alert message emitted when the second take profit price target for the long position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPShort.set(1, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 2 executed at the price of {{take_profit_price_2}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP2 Short', tooltip = 'Alert message emitted when the second take profit price target for the short position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPLong.set(2, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 3 executed at the price of {{take_profit_price_3}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP3 Long', tooltip = 'Alert message emitted when the third take profit price target for the long position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPShort.set(2, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 3 executed at the price of {{take_profit_price_3}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP3 Short', tooltip = 'Alert message emitted when the third take profit price target for the short position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPLong.set(3, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 4 executed at the price of {{take_profit_price_4}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP4 Long', tooltip = 'Alert message emitted when the forth take profit price target for the long position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPShort.set(3, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 4 executed at the price of {{take_profit_price_4}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP4 Short', tooltip = 'Alert message emitted when the forth take profit price target for the short position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPLong.set(4, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 5 executed at the price of {{take_profit_price_5}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP5 Long', tooltip = 'Alert message emitted when the fifth take profit price target for the long position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
rawMsgRchTPShort.set(4, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 5 executed at the price of {{take_profit_price_5}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP5 Short', tooltip = 'Alert message emitted when the fifth take profit price target for the short position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na)
msgStopLossEnabled = input.bool(defval = false, title = 'Enable Stop Loss Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "stop_loss order fills" of the strategy (e.g. stop loss exit). WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
rawMsgRchSLLong = msgStopLossEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Stop Loss executed at the price of {{stop_loss_price}} {{quote_currency}} and sold {{remaining_quantity_perc}}% of the initial position, that equals to an amount of {{remaining_base_quantity}} {{base_currency}}', title = 'SL Long', tooltip = 'Alert message emitted when the last stop loss target for the long position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
rawMsgRchSLShort = msgStopLossEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Stop Loss executed at the price of {{stop_loss_price}} {{quote_currency}} and bought {{remaining_quantity_perc}}% of the initial position, that equals to an amount of {{remaining_base_quantity}} {{base_currency}}', title = 'SL Short', tooltip = 'Alert message emitted when the last stop loss target for the short position is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
msgChgTrEntryEnabled = input.bool(defval = false, title = 'Enable Tr Entry Change Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when the trailing limit, stop or stop-limit entry price changes. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
rawMsgChgTrEntryLong = msgChgTrEntryEnabled ? input.text_area(defval = 'Long Trailing Entry Update({{ticker}}): Long trailing limit, stop or stop-limit entry order changed and set at a new price of {{entry_price}} {{quote_currency}}', title = 'Chg Tr Entry Long', tooltip = 'Alert message emitted when long trailing limit, stop or stop-limit entry order changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
rawMsgChgTrEntryShort = msgChgTrEntryEnabled ? input.text_area(defval = 'Short Trailing Entry Update({{ticker}}): Short trailing limit, stop or stop-limit entry order changed and set at a new price of {{entry_price}} {{quote_currency}}', title = 'Chg Tr Entry Short', tooltip = 'Alert message emitted when short trailing limit, stop or stop-limit entry order changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
msgChgTrExitEnabled = input.bool(defval = false, title = 'Enable Tr Exit Change Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when the trailing limit or stop exit price changes. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
rawMsgChgTrExitLong = msgChgTrExitEnabled ? input.text_area(defval = 'Long Trailing Exit Update({{ticker}}): Long trailing limit or stop exit order changed and set at a new price of {{exit_price}} {{quote_currency}}', title = 'Chg Tr Exit Long', tooltip = 'Alert message emitted when long trailing limit or stop exit order changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
rawMsgChgTrExitShort = msgChgTrExitEnabled ? input.text_area(defval = 'Short Trailing Exit Update({{ticker}}): Short trailing limit or stop exit order changed and set at a new price of {{exit_price}} {{quote_currency}}', title = 'Chg Tr Exit Short', tooltip = 'Alert message emitted when short trailing limit or stop exit order changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
msgChgSLEnabled = input.bool(defval = false, title = 'Enable Stop Loss Change Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when the stop loss price changes. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
rawMsgChgSLLong = msgChgSLEnabled ? input.text_area(defval = 'Long Stop Loss Update({{ticker}}): Stop Loss value changed and set at a new price of {{stop_loss_price}} {{quote_currency}}', title = 'Chg SL Long', tooltip = 'Alert message emitted when the stop loss target for the long position changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
rawMsgChgSLShort = msgChgSLEnabled ? input.text_area(defval = 'Short Stop Loss Update({{ticker}}): Stop Loss value changed and set at a new price of {{stop_loss_price}} {{quote_currency}}', title = 'Chg SL Short', tooltip = 'Alert message emitted when the stop loss target for the short position changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
msgCnlLimitOrStopEntryEnabled = input.bool(defval = false, title = 'Enable Limit Entry Cancel Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when use limit, stop or stop-limit order for entry and it cancels. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
rawMsgCnlLimitOrStopEntryLong = msgCnlLimitOrStopEntryEnabled ? input.text_area(defval = 'Long Limit Entry Cancel({{ticker}}): Long limit, stop or stop-limit entry order canceled', title = 'Cnl Limit Entry Long', tooltip = 'Alert message emitted when long limit, stop or stop-limit entry order canceled. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
rawMsgCnlLimitOrStopEntryShort = msgCnlLimitOrStopEntryEnabled ? input.text_area(defval = 'Short Limit Entry Cancel({{ticker}}): Short limit, stop or stop-limit entry order canceled', title = 'Cnl Limit Entry Short', tooltip = 'Alert message emitted when short limit, stop or stop-limit entry order canceled. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
msgCnlLimitOrStopExitEnabled = input.bool(defval = false, title = 'Enable Limit Exit Cancel Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when use limit or stop order for exit and it cancels. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
rawMsgCnlLimitOrStopExitLong = msgCnlLimitOrStopExitEnabled ? input.text_area(defval = 'Long Limit Exit Cancel({{ticker}}): Long limit or stop exit order canceled', title = 'Cnl Limit Exit Long', tooltip = 'Alert message emitted when long limit or stop exit order canceled. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
rawMsgCnlLimitOrStopExitShort = msgCnlLimitOrStopExitEnabled ? input.text_area(defval = 'Short Limit Exit Cancel({{ticker}}): Short limit or stop exit order canceled', title = 'Cnl Limit Exit Short', tooltip = 'Alert message emitted when short limit or stop exit order canceled. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages') : na
msgMaxDrawdownEnabled = input.bool(defval = false, title = 'Enable Max Drawdown Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to max draw down reached event. WARNING! Computational heavy operation. If you get a timeout error adjust the time window filter or disable other computational heavy operations.', group = '🔔 Alert Messages')
msgMaxDrawdown = msgMaxDrawdownEnabled ? input.text_area(defval = 'Max drawdown was reached: All pending orders are canceled, all open positions are closed and no new orders can be placed! RIP⚰️', title = 'Max Drawdown', tooltip = 'Alert message emitted when the max drawdown limit is reached. Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.', group = '🔔 Alert Messages') : na
showAlertsEnabled = input.bool(defval = false, title = 'Show Alerts', tooltip = 'Show alert messages that correspond to events in the chart.', group = '🐞 Debug')
// LOGIC ===============================================================================================================
var string msgEnteredMarketLong = na
var string msgEnteredMarketShort = na
var string msgEnteredLimitOrStopLong = na
var string msgEnteredLimitOrStopShort = na
var string msgClosedMarketLong = na
var string msgClosedMarketShort = na
var string msgExitedLimitOrStopLong = na
var string msgExitedLimitOrStopShort = na
var string[] msgRchTPLong = array.new<string>(numOfMaxTPAlerts, na)
var string[] msgRchTPShort = array.new<string>(numOfMaxTPAlerts, na)
var string msgRchSLLong = na
var string msgRchSLShort = na
var string msgClosedAll = na
var su.PairStrStr[] stringVariablePairs = array.new<su.PairStrStr>()
var su.PairStrNum[] numberVariablePairs = array.new<su.PairStrNum>()
var su.PairStrNum[] numberVariablePairsLong = array.new<su.PairStrNum>()
var su.PairStrNum[] numberVariablePairsShort = array.new<su.PairStrNum>()
if (msgEnteredEnabled or msgClosedOrExitedEnabled or msgTakeProfitEnabled or msgStopLossEnabled or msgChgTrEntryEnabled or msgChgTrExitEnabled or msgChgSLEnabled or msgCnlLimitOrStopEntryEnabled or msgCnlLimitOrStopExitEnabled)
    var bool stringVariablesInit = false
    if (not stringVariablesInit)
        stringVariablePairs := array.from(su.PairStrStr.new('{{ticker}}', tickerPrefix + syminfo.ticker + tickerPostfix), su.PairStrStr.new('{{base_currency}}', syminfo.basecurrency), su.PairStrStr.new('{{quote_currency}}', syminfo.currency))
        stringVariablesInit := true
    var float percMul = usePercRange100 ? 100.0 : 1.0
    var bool numberVariablesInit = false
    if (not numberVariablesInit)
        numberVariablePairs := array.from(su.PairStrNum.new('{{take_profit_quantity_perc}}', takeProfitQuantityRatio * percMul)) // Take Profit quantity percentage
        numberVariablesInit := true
    
    if (longLimitOrStopEntryIsActive or validOpenLongPosition or enteredLongTrade or isLongPosition or completedLongTrade)
        numberVariablePairsLong := array.from(su.PairStrNum.new('{{base_quantity}}', longEntryBaseQuantity), su.PairStrNum.new('{{quote_quantity}}', longEntryQuoteQuantity), // Long base/quote currency entry quantity
             su.PairStrNum.new('{{quote_quantity_perc}}', longEntryQuoteQuantityRatio * percMul), su.PairStrNum.new('{{take_profit_base_quantity}}', longTakeProfitQuantity), // Long quote currency entry quantity percentage, Long Take Profit base quantity
             su.PairStrNum.new('{{remaining_quantity_perc}}', longRemainingQuantityRatio * percMul), su.PairStrNum.new('{{remaining_base_quantity}}', longRemainingQuantity), // Long remaining quantity percentage, Long remaining base quantity
             su.PairStrNum.new('{{risk_perc}}', longCapitalRiskRatio * percMul), su.PairStrNum.new('{{stop_loss_price}}', longStopLossPrice), // Long risk percentage of the entry quantity, Long Stop Loss price
             su.PairStrNum.new('{{entry_price}}', longEntryPrice), su.PairStrNum.new('{{entry+_price}}', longEntryPrice + marginMsgTicks * syminfo.mintick), su.PairStrNum.new('{{entry-_price}}', longEntryPrice - marginMsgTicks * syminfo.mintick), // Long Entry price, Long Entry price plus the margin ticks, Long Entry price minus the margin ticks
             su.PairStrNum.new('{{exit_price}}', longExitPrice), su.PairStrNum.new('{{exit+_price}}', longExitPrice + marginMsgTicks * syminfo.mintick), su.PairStrNum.new('{{exit-_price}}', longExitPrice - marginMsgTicks * syminfo.mintick), // Long Exit price, Long Exit price plus the margin ticks, Long Exit price minus the margin ticks
             su.PairStrNum.new('{{take_profit_price_1}}', numOfTakeProfitTargets > 0 ? longTakeProfitPrices.get(0) : na), su.PairStrNum.new('{{take_profit_price_2}}', numOfTakeProfitTargets > 1 ? longTakeProfitPrices.get(1) : na), // Long Take Profit target 1 and 2 prices
             su.PairStrNum.new('{{take_profit_price_3}}', numOfTakeProfitTargets > 2 ? longTakeProfitPrices.get(2) : na), su.PairStrNum.new('{{take_profit_price_4}}', numOfTakeProfitTargets > 3 ? longTakeProfitPrices.get(3) : na), // Long Take Profit target 3 and 4 prices
             su.PairStrNum.new('{{take_profit_price_5}}', numOfTakeProfitTargets > 4 ? longTakeProfitPrices.get(4) : na)) // Long Take Profit target 5 price
    
    if (shortLimitOrStopEntryIsActive or validOpenShortPosition or enteredShortTrade or isShortPosition or completedShortTrade)
        numberVariablePairsShort := array.from(su.PairStrNum.new('{{base_quantity}}', shortEntryBaseQuantity), su.PairStrNum.new('{{quote_quantity}}', shortEntryQuoteQuantity), // Short base/quote currency entry quantity
             su.PairStrNum.new('{{quote_quantity_perc}}', shortEntryQuoteQuantityRatio * percMul), su.PairStrNum.new('{{take_profit_base_quantity}}', shortTakeProfitQuantity), // Short quote currency entry quantity percentage, Short Take Profit base quantity
             su.PairStrNum.new('{{remaining_quantity_perc}}', shortRemainingQuantityRatio * percMul), su.PairStrNum.new('{{remaining_base_quantity}}', shortRemainingQuantity), // Short remaining quantity percentage, Short remaining base quantity
             su.PairStrNum.new('{{risk_perc}}', shortCapitalRiskRatio * percMul), su.PairStrNum.new('{{stop_loss_price}}', shortStopLossPrice), // Short risk percentage of the entry quantity, Short Stop Loss price
             su.PairStrNum.new('{{entry_price}}', shortEntryPrice), su.PairStrNum.new('{{entry+_price}}', shortEntryPrice + marginMsgTicks * syminfo.mintick), su.PairStrNum.new('{{entry-_price}}', shortEntryPrice - marginMsgTicks * syminfo.mintick), // Short Entry price, Short Entry price plus the margin ticks, Short Entry price minus the margin ticks
             su.PairStrNum.new('{{exit_price}}', shortExitPrice), su.PairStrNum.new('{{exit+_price}}', shortExitPrice + marginMsgTicks * syminfo.mintick), su.PairStrNum.new('{{exit-_price}}', shortExitPrice - marginMsgTicks * syminfo.mintick), // Short Exit price, Short Exit price plus the margin ticks, Short Exit price minus the margin ticks
             su.PairStrNum.new('{{take_profit_price_1}}', numOfTakeProfitTargets > 0 ? shortTakeProfitPrices.get(0) : na), su.PairStrNum.new('{{take_profit_price_2}}', numOfTakeProfitTargets > 1 ? shortTakeProfitPrices.get(1) : na), // Short Take Profit target 1 and 2 prices
             su.PairStrNum.new('{{take_profit_price_3}}', numOfTakeProfitTargets > 2 ? shortTakeProfitPrices.get(2) : na), su.PairStrNum.new('{{take_profit_price_4}}', numOfTakeProfitTargets > 3 ? shortTakeProfitPrices.get(3) : na), // Short Take Profit target 3 and 4 prices
             su.PairStrNum.new('{{take_profit_price_5}}', numOfTakeProfitTargets > 4 ? shortTakeProfitPrices.get(4) : na)) // Short Take Profit target 5 price
    
    // Signal entered alerts
    if (msgEnteredEnabled)
        var string varMsgEnteredMarketLong = rawMsgEnteredMarketLong.replace_all(stringVariablePairs)
        var string varMsgEnteredMarketShort = rawMsgEnteredMarketShort.replace_all(stringVariablePairs)
        var string varMsgEnteredLimitOrStopLong = rawMsgEnteredLimitOrStopLong.replace_all(stringVariablePairs)
        var string varMsgEnteredLimitOrStopShort = rawMsgEnteredLimitOrStopShort.replace_all(stringVariablePairs)
        msgEnteredMarketLong := doEnterMarketLong ? varMsgEnteredMarketLong.replace(numberVariablePairsLong) : na
        msgEnteredMarketShort := doEnterMarketShort ? varMsgEnteredMarketShort.replace(numberVariablePairsShort) : na
        msgEnteredLimitOrStopLong := doEnterMarketLong ? varMsgEnteredLimitOrStopLong.replace(numberVariablePairsLong) : na
        msgEnteredLimitOrStopShort := doEnterMarketShort ? varMsgEnteredLimitOrStopShort.replace(numberVariablePairsShort) : na
    
    // Signal closed/exited alerts
    if (msgClosedOrExitedEnabled)
        var string varMsgClosedMarketLong = rawMsgClosedMarketLong.replace_all(stringVariablePairs)
        var string varMsgClosedMarketShort = rawMsgClosedMarketShort.replace_all(stringVariablePairs)
        var string varMsgExitedLimitOrStopLong = rawMsgExitedLimitOrStopLong.replace_all(stringVariablePairs)
        var string varMsgExitedLimitOrStopShort = rawMsgExitedLimitOrStopShort.replace_all(stringVariablePairs)
        var string varMsgClosedAll = rawMsgClosedAll.replace_all(stringVariablePairs)
        msgClosedMarketLong := doCloseMarketLong ? varMsgClosedMarketLong.replace(numberVariablePairsLong) : na
        msgClosedMarketShort := doCloseMarketShort ? varMsgClosedMarketShort.replace(numberVariablePairsShort) : na
        msgExitedLimitOrStopLong := doSLorExitLimitLong ? varMsgExitedLimitOrStopLong.replace(numberVariablePairsLong) : na
        msgExitedLimitOrStopShort := doSLorExitLimitShort ? varMsgExitedLimitOrStopShort.replace(numberVariablePairsShort): na
        msgClosedAll := closeAllPositions ? varMsgClosedAll.replace(numberVariablePairsLong).replace(numberVariablePairsShort) : na
    // Signal take profit alerts
    if (msgTakeProfitEnabled)   
        var string[] varMsgRchTPLong = array.new<string>(numOfMaxTPAlerts, na)
        var string[] varMsgRchTPShort = array.new<string>(numOfMaxTPAlerts, na)
        var bool msgRchTPInit = false
        if (not msgRchTPInit)
            for [i, rawMsg] in rawMsgRchTPLong
                varMsgRchTPLong.set(i, numOfTakeProfitTargets > i ? rawMsg.replace_all(stringVariablePairs).replace(numberVariablePairs) : na)
            for [i, rawMsg] in rawMsgRchTPShort
                varMsgRchTPShort.set(i, numOfTakeProfitTargets > i ? rawMsg.replace_all(stringVariablePairs).replace(numberVariablePairs) : na)
            msgRchTPInit := true
        if (doSLorExitLimitLong)
            for [i, varMsg] in varMsgRchTPLong
                msgRchTPLong.set(i, numOfTakeProfitTargets > i ? varMsg.replace(numberVariablePairsLong) : na)
        if (doSLorExitLimitShort)
            for [i, varMsg] in varMsgRchTPShort
                msgRchTPShort.set(i, numOfTakeProfitTargets > i ? varMsg.replace(numberVariablePairsShort) : na)
    
    // Signal stop loss alerts
    if (msgStopLossEnabled)
        var string varMsgRchSLLong = rawMsgRchSLLong.replace_all(stringVariablePairs)
        var string varMsgRchSLShort = rawMsgRchSLShort.replace_all(stringVariablePairs)
        msgRchSLLong := doSLorExitLimitLong ? varMsgRchSLLong.replace(numberVariablePairsLong) : na
        msgRchSLShort := doSLorExitLimitShort ? varMsgRchSLShort.replace(numberVariablePairsShort) : na
// Signal changed alerts
if (msgChgTrEntryEnabled)
    var string varMsgChgTrEntryLong = rawMsgChgTrEntryLong.replace_all(stringVariablePairs)
    if (ta.change(longEntryPrice))
        alert(message = varMsgChgTrEntryLong.replace(numberVariablePairsLong), freq = alert.freq_once_per_bar_close)
    var string varMsgChgTrEntryShort = rawMsgChgTrEntryShort.replace_all(stringVariablePairs)
    if (ta.change(shortEntryPrice))
        alert(message = varMsgChgTrEntryShort.replace(numberVariablePairsShort), freq = alert.freq_once_per_bar_close)
if (msgChgTrExitEnabled)
    var string varMsgChgTrExitLong = rawMsgChgTrExitLong.replace_all(stringVariablePairs)
    if (ta.change(longExitPrice))
        alert(message = varMsgChgTrExitLong.replace(numberVariablePairsLong), freq = alert.freq_once_per_bar_close)
    var string varMsgChgTrExitShort = rawMsgChgTrExitShort.replace_all(stringVariablePairs)
    if (ta.change(shortExitPrice))
        alert(message = varMsgChgTrExitShort.replace(numberVariablePairsShort), freq = alert.freq_once_per_bar_close)
if (msgChgSLEnabled)
    var string varMsgChgSLLong = rawMsgChgSLLong.replace_all(stringVariablePairs)
    if (na(longLimitOrStopEntryPrice) and ta.change(longStopLossPrice))
        alert(message = varMsgChgSLLong.replace(numberVariablePairsLong), freq = alert.freq_once_per_bar_close)
    var string varMsgChgSLShort = rawMsgChgSLShort.replace_all(stringVariablePairs)
    if (na(shortLimitOrStopEntryPrice) and ta.change(shortStopLossPrice))
        alert(message = varMsgChgSLShort.replace(numberVariablePairsShort), freq = alert.freq_once_per_bar_close)
if (msgCnlLimitOrStopExitEnabled)
    var string varMsgCnlLimitOrStopExitLong = rawMsgCnlLimitOrStopExitLong.replace_all(stringVariablePairs)
    if (doCnlLimitExitLong)
        alert(message = varMsgCnlLimitOrStopExitLong.replace(numberVariablePairsLong), freq = alert.freq_once_per_bar_close)
    var string varMsgCnlLimitOrStopExitShort = rawMsgCnlLimitOrStopExitShort.replace_all(stringVariablePairs)
    if (doCnlLimitExitShort)
        alert(message = varMsgCnlLimitOrStopExitShort.replace(numberVariablePairsShort), freq = alert.freq_once_per_bar_close)
//#endregion ===========================================================================================================
//#region 🧹 CLEAN UP
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for resetting variables after trades had been completed
// Dependencies: TAKE PROFIT 1, STOP LOSS, TAKE PROFIT 2, QUANTITY/RISK MANAGEMENT
// Results: ALL
// LOGIC ===============================================================================================================
if (completedLongTrade)
    for i = 0 to takeProfitTargetsSize
        longTrailTakeProfitExecuted.set(i, false)
if (completedShortTrade)
    for i = 0 to takeProfitTargetsSize
        shortTrailTakeProfitExecuted.set(i, false)
if ((completedLongTrade and not (longLimitOrStopEntryIsActive or validOpenLongPosition or enteredLongTrade)) or validCnlOpenLongPosition or closeAllPositions)
    longEntryPrice := na
    highestHighSinceLongEntry := na
    longStopLossPrice := na
    for i = 0 to takeProfitTargetsSize
        longTakeProfitPrices.set(i, na)
        longTrailTakeProfitOffsetTicks.set(i, na)
    longEntryQuoteQuantity := na
    longEntryQuoteQuantityRatio := na
    longEntryBaseQuantity := na
    longTakeProfitQuantity := na
    longRemainingQuantity := na
    longCapitalRiskRatio := na 
if ((completedShortTrade and not (shortLimitOrStopEntryIsActive or validOpenShortPosition or enteredShortTrade)) or validCnlOpenShortPosition or closeAllPositions)
    shortEntryPrice := na
    lowestLowSinceShortEntry := na
    shortStopLossPrice := na
    for i = 0 to takeProfitTargetsSize
        shortTakeProfitPrices.set(i, na)
        shortTrailTakeProfitOffsetTicks.set(i, na)
    shortEntryQuoteQuantity := na
    shortEntryQuoteQuantityRatio := na
    shortEntryBaseQuantity := na
    shortTakeProfitQuantity := na
    shortRemainingQuantity := na
    shortCapitalRiskRatio := na 
//#endregion ===========================================================================================================
//#region ⚡ POSITION ORDERS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the actual execution of the strategy orders
// Dependencies: TRACK POSITION, STRATEGY 1, ENTRY, STRATEGY 2, EXIT, STOP LOSS, TAKE PROFIT 2, QUANTITY MANAGEMENT, EXECUTION CONDITIONS, ALERT MESSAGES
// Results: NONE
// LOGIC ===============================================================================================================
// Close all positions at the end of the session
if (closeAllPositions)
    strategy.close_all(comment = showAlertsEnabled ? msgClosedAll : 'A🟪', alert_message = msgClosedAll)
// Close on valid close signal when exit with market order
if (doCloseMarketLong)
    strategy.close(id = longOrderIdEntry, comment = showAlertsEnabled ? msgClosedMarketLong : 'L🟪', alert_message = msgClosedMarketLong)
// Close on valid close signal when exit with market order
if (doCloseMarketShort)
    strategy.close(id = shortOrderIdEntry, comment = showAlertsEnabled ? msgClosedMarketShort : 'S🟪', alert_message = msgClosedMarketShort)
// Getting into LONG position
if (doEnterMarketLong)
    string msgAlert = entryOrderType == 'MARKET' ? msgEnteredMarketLong : msgEnteredLimitOrStopLong
    if (not na(shortStopLossPrice) and not na(longLimitOrStopEntryPrice) and shortStopLossPrice < longLimitOrStopEntryPrice)
        strategy.order(id = longOrderIdEntry, direction = strategy.long, limit = entryOrderType == 'LIMIT' ? longLimitOrStopEntryPrice : entryOrderType == 'STOP-LIMIT' ? longStopLimitEntryPrice : na,
              stop = entryOrderType == 'STOP' or entryOrderType == 'STOP-LIMIT' ? longLimitOrStopEntryPrice : na, qty = longEntryBaseQuantity, comment = showAlertsEnabled ? msgAlert : 'L🔷', alert_message = msgAlert)
    else
        strategy.entry(id = longOrderIdEntry, direction = strategy.long, limit = entryOrderType == 'LIMIT' ? longLimitOrStopEntryPrice : entryOrderType == 'STOP-LIMIT' ? longStopLimitEntryPrice : na,
              stop = entryOrderType == 'STOP' or entryOrderType == 'STOP-LIMIT' ? longLimitOrStopEntryPrice : na, qty = longEntryBaseQuantity, comment = showAlertsEnabled ? msgAlert : 'L🔷', alert_message = msgAlert)
// Cancel existing entry limit, stop or stop-limit orders (if any) when valid cancel open signal occurs
if (doCnlLimitEntryLong)
    strategy.cancel(id = longOrderIdEntry)
    if (msgCnlLimitOrStopEntryEnabled)
        var string varMsgCnlLimitOrStopEntryLong = rawMsgCnlLimitOrStopEntryLong.replace_all(stringVariablePairs)
        alert(message = varMsgCnlLimitOrStopEntryLong.replace(numberVariablePairsLong), freq = alert.freq_once_per_bar_close)
// Calculate the tightest stop order by combining the stop loss and limit or stop exit (if any)
float longEffectiveStopLossPrice = stopLossWaitCloseConfirm ? na : longStopLossPrice
float longTightestStop = exitOrderType == 'STOP' and longLimitExitIsActive ? math.max(nz(longLimitOrStopExitPrice, minLimitFloat), nz(longEffectiveStopLossPrice, minLimitFloat)) : longEffectiveStopLossPrice
bool isLongLimitExitTighterThanStopLoss = stopLossWaitCloseConfirm ? true : longLimitExitIsActive and exitOrderType == 'STOP' and longLimitOrStopExitPrice > longStopLossPrice
// Submit exit order for trailing take profit price also set the stop loss for the take profit percentage in case that stop loss is reached first
// Submit exit order when exit with limit or stop
for [i, longTakeProfitPrice] in longTakeProfitPrices
    if (longLimitExitIsActive or (longIsActive and not longTrailTakeProfitExecuted.get(i)))
        float longTightestLimit = exitOrderType == 'LIMIT' and longLimitExitIsActive ? math.min(nz(longLimitOrStopExitPrice, maxLimitFloat), nz(longTakeProfitPrice, maxLimitFloat)) : takeProfitTrailEnabled ? na : longTakeProfitPrice
        bool isLongLimitExitTighterThanTakeProfit = longLimitExitIsActive and longLimitOrStopExitPrice < longTakeProfitPrice
        string msgAlertProfit = isLongLimitExitTighterThanTakeProfit ? msgExitedLimitOrStopLong : msgRchTPLong.get(i % numOfMaxTPAlerts)
        string msgAlertLoss = i == takeProfitTargetsSize and moonbagQuantityRatio == 0.0 ? isLongLimitExitTighterThanStopLoss ? msgExitedLimitOrStopLong : msgRchSLLong : na
        string msgCommentProfit = str.format('{0}{1, number, integer}', exitOrderType == 'LIMIT' and longLimitExitIsActive ? 'LLim🟪' : 'L🎯', i + 1)
        string msgCommentLoss = str.format('{0}{1, number, integer}', isLongLimitExitTighterThanStopLoss ? 'LLim🟪' : 'L🛑', i + 1)
        strategy.exit(id = str.format(exitOrderIdPattern1, longOrderIdPrefix, i + 1), from_entry = longOrderIdEntry, qty = longTakeProfitQuantity,
              limit = longTightestLimit, stop = longTightestStop, trail_price = takeProfitTrailEnabled ? longTakeProfitPrice : na, trail_offset = takeProfitTrailEnabled ? longTrailTakeProfitOffsetTicks.get(i) : na,
              comment_profit = showAlertsEnabled ? msgAlertProfit : msgCommentProfit, comment_loss = showAlertsEnabled ? msgAlertLoss : msgCommentLoss, comment_trailing = showAlertsEnabled ? msgAlertProfit : msgCommentProfit,
              alert_profit = msgAlertProfit, alert_loss = msgAlertLoss, alert_trailing = msgAlertProfit)
// Submit exit order for trailing stop loss price for the remaining percent of the quantity not reserved by the take profit order
// Submit exit order when exit with limit or stop
if (doSLorExitLimitLong)
    string msgAlertProfit = isLongLimitExitTighterThanStopLoss ? msgExitedLimitOrStopLong : na
    string msgAlertLoss = isLongLimitExitTighterThanStopLoss ? msgExitedLimitOrStopLong : msgRchSLLong
    string msgCommentProfit = isLongLimitExitTighterThanStopLoss ? 'LLim🟪' : na
    string msgCommentLoss = isLongLimitExitTighterThanStopLoss ? 'LLim🟪' : 'L🛑'
    strategy.exit(id = str.format(exitOrderIdPattern2, longOrderIdPrefix), from_entry = longOrderIdEntry, limit = exitOrderType == 'LIMIT' ? longLimitOrStopExitPrice : na, stop = longTightestStop,
          comment_profit = showAlertsEnabled ? msgAlertProfit : msgCommentProfit, comment_loss = showAlertsEnabled ? msgAlertLoss : msgCommentLoss,
          alert_profit = msgAlertProfit, alert_loss = msgAlertLoss)
// Getting into SHORT position
if (doEnterMarketShort)
    string msgAlert = entryOrderType == 'MARKET' ? msgEnteredMarketShort : msgEnteredLimitOrStopShort
    if (not na(longStopLossPrice) and not na(shortLimitOrStopEntryPrice) and longStopLossPrice > shortLimitOrStopEntryPrice)
        strategy.order(id = shortOrderIdEntry, direction = strategy.short, limit = entryOrderType == 'LIMIT' ? shortLimitOrStopEntryPrice : entryOrderType == 'STOP-LIMIT' ? shortStopLimitEntryPrice : na,
              stop = entryOrderType == 'STOP' or entryOrderType == 'STOP-LIMIT' ? shortLimitOrStopEntryPrice : na, qty = shortEntryBaseQuantity, comment = showAlertsEnabled ? msgAlert : 'S🔷', alert_message = msgAlert)
    else
        strategy.entry(id = shortOrderIdEntry, direction = strategy.short, limit = entryOrderType == 'LIMIT' ? shortLimitOrStopEntryPrice : entryOrderType == 'STOP-LIMIT' ? shortStopLimitEntryPrice : na,
              stop = entryOrderType == 'STOP' or entryOrderType == 'STOP-LIMIT' ? shortLimitOrStopEntryPrice : na, qty = shortEntryBaseQuantity, comment = showAlertsEnabled ? msgAlert : 'S🔷', alert_message = msgAlert)
// Cancel existing entry limit, stop and stop-limit orders (if any) when valid cancel open signal occurs
if (doCnlLimitEntryShort)
    strategy.cancel(id = shortOrderIdEntry)
    if (msgCnlLimitOrStopEntryEnabled)
        var string varMsgCnlLimitOrStopEntryShort = rawMsgCnlLimitOrStopEntryShort.replace_all(stringVariablePairs)
        alert(message = varMsgCnlLimitOrStopEntryShort.replace(numberVariablePairsShort), freq = alert.freq_once_per_bar_close)
// Calculate the tightest stop order by combining the stop loss and limit or stop exit (if any)
float shortEffectiveStopLossPrice = stopLossWaitCloseConfirm ? na : shortStopLossPrice
float shortTightestStop = exitOrderType == 'STOP' and shortLimitExitIsActive ? math.min(nz(shortLimitOrStopExitPrice, maxLimitFloat), nz(shortEffectiveStopLossPrice, maxLimitFloat)) : shortEffectiveStopLossPrice
bool isShortLimitExitTighterThanStopLoss = stopLossWaitCloseConfirm ? true : shortLimitExitIsActive and exitOrderType == 'STOP' and shortLimitOrStopExitPrice < shortStopLossPrice
// Submit exit order for trailing take profit price also set the stop loss for the take profit percentage in case that stop loss is reached first
// Submit exit order when exit with limit or stop
for [i, shortTakeProfitPrice] in shortTakeProfitPrices
    if (shortLimitExitIsActive or (shortIsActive and not shortTrailTakeProfitExecuted.get(i)))
        float shortightestLimit = exitOrderType == 'LIMIT' and shortLimitExitIsActive ? math.max(nz(shortLimitOrStopExitPrice, minLimitFloat), nz(shortTakeProfitPrice, minLimitFloat)) : takeProfitTrailEnabled ? na : shortTakeProfitPrice
        bool isShortLimitExitTighterThanTakeProfit = shortLimitExitIsActive and shortLimitOrStopExitPrice > shortTakeProfitPrice
        string msgAlertProfit = isShortLimitExitTighterThanTakeProfit ? msgExitedLimitOrStopShort : msgRchTPShort.get(i % numOfMaxTPAlerts)
        string msgAlertLoss = i == takeProfitTargetsSize and moonbagQuantityRatio == 0.0 ? isShortLimitExitTighterThanStopLoss ? msgExitedLimitOrStopShort : msgRchSLShort : na
        string msgCommentProfit = str.format('{0}{1, number, integer}', exitOrderType == 'LIMIT' and shortLimitExitIsActive ? 'SLim🟪' : 'S🎯', i + 1)
        string msgCommentLoss = str.format('{0}{1, number, integer}', isShortLimitExitTighterThanStopLoss ? 'SLim🟪' : 'S🛑', i + 1)
        strategy.exit(id = str.format(exitOrderIdPattern1, shortOrderIdPrefix, i + 1), from_entry = shortOrderIdEntry, qty = shortTakeProfitQuantity,
              limit = shortightestLimit, stop = shortTightestStop, trail_price = takeProfitTrailEnabled ? shortTakeProfitPrice : na, trail_offset = takeProfitTrailEnabled ? shortTrailTakeProfitOffsetTicks.get(i) : na,
              comment_profit = showAlertsEnabled ? msgAlertProfit : msgCommentProfit, comment_loss = showAlertsEnabled ? msgAlertLoss : msgCommentLoss, comment_trailing = showAlertsEnabled ? msgAlertProfit : msgCommentProfit,
              alert_profit = msgAlertProfit, alert_loss = msgAlertLoss, alert_trailing = msgAlertProfit)
// Submit exit order for trailing stop loss price for the remaining percent of the quantity not reserved by the take profit order
// Submit exit order when exit with limit or stop
if (doSLorExitLimitShort)
    string msgAlertProfit = isShortLimitExitTighterThanStopLoss ? msgExitedLimitOrStopShort : na
    string msgAlertLoss = isShortLimitExitTighterThanStopLoss ? msgExitedLimitOrStopShort : msgRchSLShort
    string msgCommentProfit = isShortLimitExitTighterThanStopLoss ? 'SLim🟪' : na
    string msgCommentLoss = isShortLimitExitTighterThanStopLoss ? 'SLim🟪' : 'S🛑'
    strategy.exit(id = str.format(exitOrderIdPattern2, shortOrderIdPrefix), from_entry = shortOrderIdEntry, limit = exitOrderType == 'LIMIT' ? shortLimitOrStopExitPrice : na, stop = shortTightestStop,
          comment_profit = showAlertsEnabled ? msgAlertProfit : msgCommentProfit, comment_loss = showAlertsEnabled ? msgAlertLoss : msgCommentLoss,
          alert_profit = msgAlertProfit, alert_loss = msgAlertLoss)
// Limit the maximum drawdown
strategy.risk.max_drawdown(value = maxDrawdownEnabled ? maxDrawdownPerc : 100.0, type = strategy.percent_of_equity, alert_message = msgMaxDrawdown)
//#endregion ===========================================================================================================
//#region 🐞 DEBUG
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for plotting additional information for debuging purposes
// Dependencies: ALL
// Results: showAlertsEnabled, debugModeEnabled
// INPUT ===============================================================================================================
debugModeEnabled = input.bool(defval = false, title = 'Debug Mode', tooltip = 'Enable debug mode.', group = '🐞 Debug')
// PLOT ================================================================================================================
bool showLongPlots = not longLimitOrStopEntryIsActive or debugModeEnabled
bool showShortPlots = not shortLimitOrStopEntryIsActive or debugModeEnabled
var color dbgPosColor = color.new(posColor, 50)
plot(series = showLongPlots ? longEntryPrice : na, title = 'Long Position Entry', color = longLimitOrStopEntryIsActive ? debugModeEnabled ? dbgPosColor : na : posColor, linewidth = 1, style = plot.style_linebr, offset = 1)
plot(series = showShortPlots ? shortEntryPrice : na, title = 'Short Position Entry', color = shortLimitOrStopEntryIsActive ? debugModeEnabled ? dbgPosColor : na : posColor, linewidth = 1, style = plot.style_linebr, offset = 1)
var color dbgStopLossColor = color.new(stopLossColor, 50)
plot(series = showLongPlots ? longStopLossPrice : na, title = 'Long Stop Loss', color = longLimitOrStopEntryIsActive ? debugModeEnabled ? dbgStopLossColor : na : stopLossColor, linewidth = 2, style = plot.style_linebr, offset = 1)
plot(series = showShortPlots ? shortStopLossPrice : na, title = 'Short Stop Loss', color = shortLimitOrStopEntryIsActive ? debugModeEnabled ? dbgStopLossColor : na : stopLossColor, linewidth = 2, style = plot.style_linebr, offset = 1)
var color dbgTakeProfitColor = color.new(takeProfitColor, 50)
plot(series = numOfTakeProfitTargets > 0 and showLongPlots and (not longIthTrailTakeProfitExecuted(1) or debugModeEnabled) ? longTakeProfitPrices.get(0) : na, title = 'Long Take Profit 1', color = longIthTrailTakeProfitExecuted(1) or longLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 0 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 0 and showShortPlots and (not shortIthTrailTakeProfitExecuted(1) or debugModeEnabled) ? shortTakeProfitPrices.get(0) : na, title = 'Short Take Profit 1', color = shortIthTrailTakeProfitExecuted(1) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 0 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 1 and showLongPlots and (not longIthTrailTakeProfitExecuted(2) or debugModeEnabled) ? longTakeProfitPrices.get(1) : na, title = 'Long Take Profit 2', color = longIthTrailTakeProfitExecuted(2) or longLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 1 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 1 and showShortPlots and (not shortIthTrailTakeProfitExecuted(2) or debugModeEnabled) ? shortTakeProfitPrices.get(1) : na, title = 'Short Take Profit 2', color = shortIthTrailTakeProfitExecuted(2) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 1 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 2 and showLongPlots and (not longIthTrailTakeProfitExecuted(3) or debugModeEnabled) ? longTakeProfitPrices.get(2) : na, title = 'Long Take Profit 3', color = longIthTrailTakeProfitExecuted(3) or longLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 2 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 2 and showShortPlots and (not shortIthTrailTakeProfitExecuted(3) or debugModeEnabled) ? shortTakeProfitPrices.get(2) : na, title = 'Short Take Profit 3', color = shortIthTrailTakeProfitExecuted(3) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 2 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 3 and showLongPlots and (not longIthTrailTakeProfitExecuted(4) or debugModeEnabled) ? longTakeProfitPrices.get(3) : na, title = 'Long Take Profit 4', color = longIthTrailTakeProfitExecuted(4) or longLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 3 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 3 and showShortPlots and (not shortIthTrailTakeProfitExecuted(4) or debugModeEnabled) ? shortTakeProfitPrices.get(3) : na, title = 'Short Take Profit 4', color = shortIthTrailTakeProfitExecuted(4) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 3 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 4 and showLongPlots and (not longIthTrailTakeProfitExecuted(5) or debugModeEnabled) ? longTakeProfitPrices.get(4) : na, title = 'Long Take Profit 5', color = longIthTrailTakeProfitExecuted(5) or longLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 4 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 4 and showShortPlots and (not shortIthTrailTakeProfitExecuted(5) or debugModeEnabled) ? shortTakeProfitPrices.get(4) : na, title = 'Short Take Profit 5', color = shortIthTrailTakeProfitExecuted(5) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? dbgTakeProfitColor : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 4 ? display.all : display.none)
plot(series = math.sign(currentPositionSize), title = '〰️Position Sign', color = color.olive, display = display.data_window)
// var color dbgLongEntryColor = color.new(longEntryColor, 50)
// var color dbgShortEntryColor = color.new(shortEntryColor, 50)
// var color dbgLongExitColor = color.new(longExitColor, 50)
// var color dbgShortExitColor = color.new(shortExitColor, 50)
// plotshape(series = tryEnterLongPosition, title = 'Dbg Try Enter Long', style = shape.arrowup, location = location.belowbar, color = dbgLongEntryColor, size = size.tiny, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = tryEnterShortPosition, title = 'Dbg Try Enter Short', style = shape.arrowdown, location = location.abovebar, color = dbgShortEntryColor, size = size.tiny, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = enteredLongTrade, title = 'Dbg Long Entred', style = shape.diamond, location = location.belowbar, color = dbgLongEntryColor, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = enteredShortTrade, title = 'Dbg Short Entred', style = shape.diamond, location = location.abovebar, color = dbgShortEntryColor, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = isLongPosition, title = 'Dbg Active Long', style = shape.labelup, location = location.belowbar, color = dbgLongEntryColor, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = isShortPosition, title = 'Dbg Active Short', style = shape.labeldown, location = location.abovebar, color = dbgShortEntryColor, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = completedLongTrade, title = 'Dbg Long Completed', style = shape.square, location = location.belowbar, color = dbgLongExitColor, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = completedShortTrade, title = 'Dbg Short Completed', style = shape.square, location = location.abovebar, color = dbgShortExitColor, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
//#endregion ===========================================================================================================
Expand (2047 lines)