Script Name: Ruckard TradingLatino
Author: ruckard
Description: This strategy tries to mimic TradingLatino strategy.
The current implementation is beta.

Si hablas castellano o espanyol por favor consulta  MENSAJE EN CASTELLANO  más abajo.

It's aimed at BTCUSDT pair and 4h timeframe.

 STRATEGY DEFAULT SETTINGS EXPLANATION 
 
  max_bars_back=5000 : This is a random number of bars so that the strategy test lasts for one or two...
PineScript code:

Pine Script™ strategy
Ruckard TradingLatino
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319
1320
1321
1322
1323
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
1336
1337
1338
1339
1340
1341
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1394
1395
1396
1397
1398
1399
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1411
1412
1413
1414
1415
1416
1417
1418
1419
1420
1421
1422
1423
1424
1425
1426
1427
1428
1429
1430
1431
1432
1433
1434
1435
1436
1437
1438
1439
1440
1441
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464
1465
1466
1467
1468
1469
1470
1471
1472
1473
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1535
1536
1537
1538
1539
1540
1541
1542
1543
1544
1545
1546
1547
1548
1549
1550
1551
1552
1553
1554
1555
1556
1557
1558
1559
1560
1561
1562
1563
1564
1565
1566
1567
1568
1569
1570
1571
1572
1573
1574
1575
1576
1577
1578
1579
1580
1581
1582
1583
1584
1585
1586
1587
1588
1589
1590
1591
1592
1593
1594
1595
1596
1597
1598
1599
1600
1601
1602
1603
1604
1605
1606
1607
1608
1609
1610
1611
1612
1613
1614
1615
1616
1617
1618
1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631
1632
1633
1634
1635
1636
1637
1638
1639
1640
1641
1642
1643
1644
1645
1646
1647
1648
1649
1650
1651
1652
1653
1654
1655
1656
1657
1658
1659
1660
1661
1662
1663
1664
1665
1666
1667
1668
1669
1670
1671
1672
1673
1674
1675
1676
1677
1678
1679
1680
1681
1682
1683
1684
1685
1686
1687
1688
1689
1690
1691
1692
1693
1694
1695
1696
1697
1698
1699
1700
1701
1702
1703
1704
1705
1706
1707
1708
1709
1710
1711
1712
1713
1714
1715
1716
1717
1718
1719
1720
1721
1722
1723
1724
1725
1726
1727
1728
1729
1730
1731
1732
1733
1734
1735
1736
1737
1738
1739
1740
1741
1742
1743
1744
1745
1746
1747
1748
1749
1750
1751
1752
1753
1754
1755
1756
1757
1758
1759
1760
1761
1762
1763
1764
1765
1766
1767
1768
1769
1770
1771
1772
1773
1774
1775
1776
1777
1778
1779
1780
1781
1782
1783
1784
1785
1786
1787
1788
1789
1790
1791
1792
1793
1794
1795
1796
1797
1798
1799
1800
1801
1802
1803
1804
1805
1806
1807
1808
1809
1810
1811
1812
1813
1814
1815
1816
1817
1818
1819
1820
1821
1822
1823
1824
1825
1826
1827
1828
1829
1830
1831
1832
1833
1834
1835
1836
1837
1838
1839
1840
1841
1842
1843
1844
1845
1846
1847
1848
1849
1850
1851
1852
1853
1854
1855
1856
1857
1858
1859
1860
1861
1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
1878
1879
1880
1881
1882
1883
1884
1885
1886
1887
1888
1889
1890
1891
1892
1893
1894
1895
1896
1897
1898
1899
1900
1901
1902
1903
1904
1905
1906
1907
1908
1909
1910
1911
1912
1913
1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
1928
1929
1930
1931
1932
1933
1934
1935
1936
1937
1938
1939
1940
1941
1942
1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
1957
1958
1959
1960
1961
1962
1963
1964
1965
1966
1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
1981
1982
1983
1984
1985
1986
1987
1988
1989
1990
1991
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
2024
2025
2026
2027
2028
2029
2030
2031
2032
2033
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
2048
2049
2050
2051
2052
2053
2054
2055
2056
2057
2058
2059
2060
2061
2062
2063
2064
2065
2066
2067
2068
2069
2070
2071
2072
2073
2074
2075
2076
2077
2078
2079
2080
2081
2082
2083
2084
2085
2086
2087
2088
2089
2090
2091
2092
2093
2094
2095
2096
2097
2098
2099
2100
2101
2102
2103
2104
2105
2106
2107
2108
2109
2110
2111
2112
2113
2114
2115
2116
2117
2118
2119
2120
2121
2122
2123
2124
2125
2126
2127
2128
2129
2130
2131
2132
2133
2134
2135
2136
2137
2138
2139
2140
2141
2142
2143
2144
2145
2146
2147
2148
2149
2150
2151
2152
2153
2154
2155
2156
2157
2158
2159
2160
2161
2162
2163
2164
2165
2166
2167
2168
2169
2170
2171
2172
2173
2174
2175
2176
2177
2178
2179
2180
2181
2182
2183
2184
2185
2186
2187
2188
2189
2190
2191
2192
2193
2194
2195
2196
2197
2198
2199
2200
2201
2202
2203
2204
2205
2206
2207
2208
2209
2210
2211
2212
2213
2214
2215
2216
2217
2218
2219
2220
2221
2222
2223
2224
2225
2226
2227
2228
2229
2230
2231
2232
2233
2234
2235
2236
2237
2238
2239
2240
2241
2242
2243
2244
2245
2246
2247
2248
2249
2250
2251
2252
2253
2254
2255
2256
2257
2258
2259
2260
2261
2262
2263
2264
2265
2266
2267
2268
2269
2270
2271
2272
2273
2274
2275
2276
2277
2278
2279
2280
2281
2282
2283
2284
2285
2286
2287
2288
2289
2290
2291
2292
2293
2294
2295
2296
2297
2298
2299
2300
2301
2302
2303
2304
2305
2306
2307
2308
2309
2310
2311
2312
2313
2314
2315
2316
2317
2318
2319
2320
2321
2322
2323
2324
2325
2326
2327
2328
2329
2330
2331
2332
2333
2334
2335
2336
2337
2338
2339
2340
2341
2342
2343
2344
2345
2346
2347
2348
2349
2350
2351
2352
2353
2354
2355
2356
2357
2358
2359
2360
2361
2362
2363
2364
2365
2366
2367
2368
2369
2370
2371
2372
2373
2374
2375
2376
2377
2378
2379
2380
2381
2382
2383
2384
2385
2386
2387
2388
2389
2390
2391
2392
2393
2394
2395
2396
2397
2398
2399
2400
2401
2402
2403
2404
2405
2406
2407
2408
2409
2410
2411
2412
2413
2414
2415
2416
2417
2418
2419
2420
2421
2422
2423
2424
2425
2426
2427
2428
2429
2430
2431
2432
2433
2434
2435
2436
2437
2438
2439
2440
2441
2442
2443
2444
2445
2446
2447
2448
2449
2450
2451
2452
2453
2454
2455
2456
2457
2458
2459
2460
2461
2462
2463
2464
2465
2466
2467
2468
2469
2470
2471
2472
2473
2474
2475
2476
2477
2478
2479
2480
2481
2482
2483
2484
2485
2486
2487
2488
2489
2490
2491
2492
2493
2494
2495
2496
2497
2498
2499
2500
2501
2502
2503
2504
2505
2506
2507
2508
2509
2510
2511
2512
2513
2514
2515
2516
2517
2518
2519
2520
2521
2522
2523
2524
2525
2526
2527
2528
2529
2530
2531
2532
2533
2534
2535
2536
2537
2538
2539
2540
2541
2542
2543
2544
2545
2546
2547
2548
2549
2550
2551
2552
2553
2554
2555
2556
2557
2558
2559
2560
2561
2562
2563
2564
2565
2566
2567
2568
2569
2570
2571
2572
2573
2574
2575
2576
2577
2578
2579
2580
2581
2582
2583
2584
2585
2586
2587
2588
2589
2590
2591
2592
2593
2594
2595
2596
2597
2598
2599
2600
2601
2602
2603
2604
2605
2606
2607
2608
2609
2610
2611
2612
2613
2614
2615
2616
2617
2618
2619
2620
2621
2622
2623
2624
2625
2626
2627
2628
2629
2630
2631
2632
2633
2634
2635
2636
2637
2638
2639
2640
2641
2642
2643
2644
2645
2646
2647
2648
2649
2650
2651
2652
2653
2654
2655
2656
2657
2658
2659
2660
2661
2662
2663
2664
2665
2666
2667
2668
2669
2670
2671
2672
2673
2674
2675
2676
2677
2678
2679
2680
2681
2682
2683
2684
2685
2686
2687
2688
2689
2690
2691
2692
2693
2694
2695
2696
2697
2698
2699
2700
2701
2702
2703
2704
2705
2706
2707
2708
2709
2710
2711
2712
2713
2714
2715
2716
2717
2718
2719
2720
2721
2722
2723
2724
2725
2726
2727
2728
2729
2730
2731
2732
2733
2734
2735
2736
2737
2738
2739
2740
2741
2742
2743
2744
2745
2746
2747
2748
2749
2750
2751
2752
2753
2754
2755
2756
2757
2758
2759
2760
2761
2762
2763
2764
2765
2766
2767
2768
2769
2770
2771
2772
2773
2774
2775
2776
2777
2778
2779
2780
2781
2782
2783
2784
2785
2786
2787
2788
2789
2790
2791
2792
2793
2794
2795
2796
2797
2798
2799
2800
2801
2802
2803
2804
2805
2806
2807
2808
2809
2810
2811
2812
2813
2814
2815
2816
2817
2818
2819
2820
2821
2822
2823
2824
2825
2826
2827
2828
2829
2830
2831
2832
2833
2834
2835
2836
2837
2838
2839
2840
2841
2842
2843
2844
2845
2846
2847
2848
2849
2850
2851
2852
2853
2854
2855
2856
2857
2858
2859
2860
2861
2862
2863
2864
2865
2866
2867
2868
2869
2870
2871
2872
2873
2874
2875
2876
2877
2878
2879
2880
2881
2882
2883
2884
2885
2886
2887
2888
2889
2890
2891
2892
2893
2894
2895
2896
2897
2898
2899
2900
2901
2902
2903
2904
2905
2906
2907
2908
2909
2910
2911
2912
2913
2914
2915
2916
2917
2918
2919
2920
2921
2922
2923
2924
2925
2926
2927
2928
2929
2930
2931
2932
2933
2934
2935
2936
2937
2938
2939
2940
2941
2942
2943
2944
2945
2946
2947
2948
2949
2950
2951
2952
2953
2954
2955
2956
2957
2958
2959
2960
2961
2962
2963
2964
2965
2966
2967
2968
2969
2970
2971
2972
2973
2974
2975
2976
2977
2978
2979
2980
2981
2982
2983
2984
2985
2986
2987
2988
2989
2990
2991
2992
2993
2994
2995
2996
2997
2998
2999
3000
3001
3002
3003
3004
3005
3006
3007
3008
3009
3010
3011
3012
3013
3014
3015
3016
3017
3018
3019
3020
3021
3022
3023
3024
3025
3026
3027
3028
3029
3030
3031
3032
3033
3034
3035
3036
3037
3038
3039
3040
3041
3042
3043
3044
3045
3046
3047
3048
3049
3050
3051
3052
3053
3054
3055
3056
3057
3058
3059
3060
3061
3062
3063
3064
3065
3066
3067
3068
3069
3070
3071
3072
3073
3074
3075
3076
3077
3078
3079
3080
3081
3082
3083
3084
3085
3086
3087
3088
3089
3090
3091
3092
3093
3094
3095
3096
3097
3098
3099
3100
3101
3102
3103
3104
3105
3106
3107
3108
3109
3110
3111
3112
3113
3114
3115
3116
3117
3118
3119
3120
3121
3122
3123
3124
3125
3126
3127
3128
3129
3130
3131
3132
3133
3134
3135
3136
3137
3138
3139
3140
3141
3142
3143
3144
3145
3146
3147
3148
3149
3150
3151
3152
3153
3154
3155
3156
3157
3158
3159
3160
3161
3162
3163
3164
3165
3166
3167
3168
3169
3170
3171
3172
3173
3174
3175
3176
3177
3178
3179
3180
3181
3182
3183
3184
//@version=4
//
strategy("Ruckard TradingLatino R348", shorttitle="R348TradingLatino", overlay=true, max_bars_back=5000, calc_on_order_fills=false, calc_on_every_tick=false, pyramiding=0, initial_capital=1000, slippage=1, commission_type=strategy.commission.percent, commission_value=0.1)
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Current version: v20210421 ( R348 )
// TradingView Public tags - BEGIN
// Tag 1: tradinglatino
// Tag 2: Volume Profile
// Tag 3: Support and resistance
// Tag 4: Average Directional Index (ADX)
//
// Tag 5: Momentum Indicator (MOM)
// Tag 6: VPOC
// Tag 7: VPVR
// Tag 8: ema
//
// Tag 9: Divergence
// Tag 10: Range
// Tag 11: Linear Regression
// Tag 12: zignaly
// TradingView Public tags - END
// Tradingview Public description - BEGIN
// 
// This strategy tries to mimic TradingLatino strategy.
// The current implementation is beta.
// 
// Si hablas castellano o espanyol por favor consulta [B]MENSAJE EN CASTELLANO[/B] más abajo.
// 
// It's aimed at BTCUSDT pair and 4h timeframe.
//
// [B]STRATEGY DEFAULT SETTINGS EXPLANATION[/B]
// [list]
// [*] max_bars_back=5000 : This is a random number of bars so that the strategy test lasts for one or two years
// [*] calc_on_order_fills=false : To wait for the 4h closing is too much. Try to check if it's worth entering a position after closing one. I finally decided not to recheck if it's worth entering after an order is closed. So it is false.
// [*] calc_on_every_tick=false
// [*] pyramiding=0 : We only want one entry allowed in the same direction. And we don't want the order to scale by error.
// [*] initial_capital=1000 : These are 1000 USDT. By using 1% maximum loss per trade and 7% as a default stop loss by using 1000 USDT at 12000 USDT per BTC price you would entry with around 142 USDT which are converted into: 0.010 BTC . The maximum number of decimal for contracts on this BTCUSDT market is 3 decimals. E.g. the minimum might be: 0.001 BTC . So, this minimal 1000 amount ensures us not to entry with less than 0.001 entries which might have happened when using 100 USDT as an initial capital.
// [*] slippage=1 : Binance BTCUSDT mintick is: 0.01. Binance slippage: 0.1 % (Let's assume). TV has an integer slippage. It does not have a percentage based slippage. If we assume a 1000 initial capital, the recommended equity is 142 which at 11996 USDT per BTC price means: 0.011 BTC. The 0.1% slippage of: 0.011 BTC would be: 0.000011 . This is way smaller than the mintick. So our slippage is going to be 1. E.g. 1 (slippage) * 0.01 (mintick)
// [*] commission_type=strategy.commission.percent and commission_value=0.1 : According to: binance . com / en / fee / schedule in VIP 0 level both maker and taker fees are: 0.1 %.
// [/list]
//
// [B]BACKGROUND[/B]
// Jaime Merino is a well known Youtuber focused on crypto trading
// His channel TradingLatino
// features monday to friday videos where he explains his strategy.
// 
// [B]JAIME MERINO STANCE ON BOTS[/B]
// Jaime Merino stance on bots (taken from memory out of a 2020 June video from him):
// '~
// You know. They can program you a bot and it might work.
// But, there are some special situations that the bot would not be able to handle.
// And, I, as a human, I would handle it. And the bot wouldn't do it.
// ~'
// 
// My long term target with this strategy script is add as many
// special situations as I can to the script
// so that it can match Jaime Merino behaviour even in non normal circumstances.
// 
// My alternate target is learn Pine script
// and enjoy programming with it.
// 
// [B]WARNING[/B]
// This script might be bigger than other TradingView scripts.
// However, please, do not be confused because the current status is beta.
// This script has not been tested with real money.
// This is NOT an official strategy from Jaime Merino.
// This is NOT an official strategy from TradingLatino . net .
// 
// 
// [B]HOW IT WORKS[/B]
// It basically uses ADX slope and LazyBear's Squeeze Momentum Indicator
// to make its buy and sell decisions.
// 
// Fast paced EMA being bigger than slow paced EMA
// (on higher timeframe) advices going long.
// 
// Fast paced EMA being smaller than slow paced EMA
// (on higher timeframe) advices going short.
// 
// It finally add many substrats that TradingLatino uses.
// 
// [B]SETTINGS[/B]
// [B]__ SETTINGS - Basics[/B]
// [B]____ SETTINGS - Basics - ADX[/B]
// [list]
// [*] (ADX) Smoothing {14}
// [*] (ADX) DI Length {14}
// [*] (ADX) key level {23}
// [*] (ADX) DI minimum percentage (%) {10.0}: Enforce a minimum DI percentage (DI+ over DI- or viceversa) to confirm long or short advice
// [/list]
// [B]____ SETTINGS - Basics - LazyBear Squeeze Momentum[/B]
// [list]
// [*] (SQZMOM) BB Length {20}
// [*] (SQZMOM) BB MultFactor {2.0}
// [*] (SQZMOM) KC Length {20}
// [*] (SQZMOM) KC MultFactor {1.5}
// [*] (SQZMOM) Use TrueRange (KC) {True}
// [*] (SQZMOM) Squeeze percentage zero {0.0}: Zero value for the squeeze percentage (Bollinger and Keltner channels ratio).
// [/list]
// [B]____ SETTINGS - Basics - EMAs[/B]
// [list]
// [*] (EMAS) EMA10 - Length {10}
// [*] (EMAS) EMA10 - Source {close}
// [*] (EMAS) EMA55 - Length {55}
// [*] (EMAS) EMA55 - Source {close}
// [/list]
// [B]____ SETTINGS - Volume Profile[/B]
// Lowest and highest VPoC from last three days
// is used to know if an entry has a support
// 
// VPVR of last 100 4h bars
// is also taken into account
// 
// [list]
// [*] (VP) Use number of bars (not VP timeframe): Uses 'Number of bars {100}' setting instead of 'Volume Profile timeframe' setting for calculating session VPoC
// [*] (VP) Number of bars {100}: If 'Use number of bars (not VP timeframe)' is turned on this setting is used to calculate session VPoC.
// [*] (VP) Volume Profile timeframe {1 day}: If 'Use number of bars (not VP timeframe)' is turned off this setting is used to calculate session VPoC.
// [*] (VP) Resistances prices number of decimal digits [2]: Round Volume Profile bars label numbers so that they don't have so many decimals.
// [*] (VP) Number of bars for bottom VPOC {18}: 18 bars equals 3 days in suggested timeframe of 4 hours. It's used to calculate lowest session VPoC from previous three days. It's also used as a top VPOC for sells.
// [*] (VP) Ignore VPOC bottom advice on long {False}: If turned on it ignores bottom VPOC (or top VPOC on sells) when evaluating if a buy entry is worth it (just for the simple and now proven useless fact that the VPOC is below your entry).
// [*] (VP) Number of bars for VPVR VPOC {100}: Number of bars to calculate the VPVR VPoC. We use 100 as Jaime once used. When the price bounces back to the EMA55 it might just bounce to this VPVR VPoC if its price it's lower than the EMA55 (Sells have inverse algorithm).
// [*] (VP) Price levels {24}: Price levels for both VPVR VPoC and session VPoC
// [/list]
// [B]____ SETTINGS - ADX Slope[/B]
// ADX Slope
// help us to understand if ADX
// has a positive slope, negative slope
// or it is rather still.
// 
// [list]
// [*] (ADXSLOPE) ADX cut {23}: If ADX value is greater than this cut (23) then ADX has strength
// [*] (ADXSLOPE) ADX minimum steepness entry {45}: ADX slope needs to be 45 degrees to be considered as a positive one.
// [*] (ADXSLOPE) ADX minimum steepness exit {45}: ADX slope needs to be -45 degrees to be considered as a negative one.
// [*] (ADXSLOPE) ADX steepness periods {3}: In order to avoid false detection the slope is calculated along 3 periods.
// [/list]
// [B]____ SETTINGS - Next to EMA55[/B]
// [list]
// [*] (NEXTEMA55) EMA10 to EMA55 bounce back percentage {80}: EMA10 might bounce back to EMA55 or maybe to 80% of its complete way to EMA55
// [*] (NEXTEMA55) Next to EMA55 percentage {15}: How much next to the EMA55 you need to be to consider it's going to bounce back upwards again.
// [/list]
// 
// [B]____ SETTINGS - Stop Loss and Take Profit[/B]
// You can set a default stop loss or a default take profit.
// [list]
// [*] (STOPTAKE) Stop Loss % {7.0}
// [*] (STOPTAKE) Take Profit % {2.0}
// [/list]
// 
// [B]____ SETTINGS - Trailing Take Profit[/B]
// You can customize the default trailing take profit values
// [list]
// [*] (TRAILING) Trailing Take Profit (%) {0.4}: Trailing take profit offset in percentage
// [*] (TRAILING) Trailing Take Profit Trigger (%) {0.8}: When 0.8% of benefit is reached then activate the trailing take profit.
// [*] (TRAILING) Drawdown percentage for dynamic Trailing Take Profit Trigger (%) {30.0}: Once drawdown has been calculated use 30% of it as Trailing Take Profit Trigger. [b]Note[/b]: This setting is only used when '(STRICT RISK) Even more strict risk management' setting is turned off.
// [*] (TRAILING) Trailing Take Profit as a percentage of Trailing Take Profit Trigger (for dynamic TTP) (%) {45.0}: If dynamic TTP Trriger is 1% then dynamic TTP will be 0.45 % .
// [*] (TRAILING) Take profit percentage for dynamic Trailing Take Profit Trigger based on VPoC resistances (%) {20.0}: Percentage of the distance between current price and next resistance to be used as Trailing Trake Profit Trigger. [b]Note[/b]: This setting is only used when '(STRICT RISK) Even more strict risk management' setting is turned on.
// [*] (TRAILING) Enforce dynamic Trailing Take Profit {True}: When true the Trailing Take Profit is dynamic instead of using the static values.
// [/list]
// [B]____ SETTINGS - Old orders[/B]
// You can customize the default old orders settings
// [list]
// [*] (OLD) Number of bars to consider and order to be old {6}: When to consider that an order is old.
// [*] (OLD) Minimum loss percent to close an old order {0.8}: An old order should be closed if it's below 0.8 percent of losses.
// [*] (RECENT) Number of minutes to wait to open a new order after the previous one has been opened {6}.
// [/list]
// [B]____ SETTINGS - Dynamic stop loss management[/B]
// You can customize the default dynamic stop loss management settings
// [list]
// [*] (STOPTAKE) Minimum loss percent to be supported by VPVR VPoC {1.0}: An entry is ignored if the VPoC price it's too close to the current price. This settings let's you change how close is that.
// [*] (STOPTAKE) Maximum loss percent to be supported by VPVR VPoC {2.38}: An entry is ignored if the VPoC price it's too far away from the current price. [b]Note[/b]: This setting is only used when '(STRICT RISK) Even more strict risk management' setting is turned on.
// [*] (STOPTAKE) Win/Loss Ratio {1.00}: Set your exchange fees so that they are used on the actual ratio calculation.
// [/list]
// [B]____ SETTINGS - Exchange[/B]
// [list]
// [*] (EXCHANGE) Fees per order {0.04} (%): Set your desired Win/Loss Ratio. 1 means 1:1. 1.5 means 1.5:1 and so on.
// [/list]
// 
// [B]____ SETTINGS - MAIN TURN ON/OFF OPTIONS[/B]
// [list]
// [*] (EMAS) Ignore advice based on emas {false}.
// [*] (EMAS) Ignore advice based on emas (On closing long signal) {False}: Ignore advice based on emas but only when deciding to close a buy entry.
// [*] (SQZMOM) Ignore advice based on SQZMOM {false}: Ignores advice based on SQZMOM indicator.
// [*] (SQZMOM) Ignore advice based squeeze percentage {True}: Whether to ignore or not advice based on squeeze percentage relative to squeeze percentage zero value.
// [*] (ADXSLOPE) Ignore advice based on ADX positive slope {true}
// [*] (ADXSLOPE) Ignore advice based on ADX cut (23) {true}
// [*] (STOPTAKE) Take Profit? {false}: Enables simple Take Profit.
// [*] (STOPTAKE) Stop Loss? {True}: Enables simple Stop Loss.
// [*] (TRAILING) Enable Trailing Take Profit (%) {True}: Enables Trailing Take Profit.
// [*] (OLD) Ignore advice based on order being too old {False}: When it's set to true it ignores the advice to close old orders which are losing.
// [*] (STOPTAKE) Enforce dynamic stop loss up to maximum stop loss {True}: Change dinamically stop loss and its associated position size based to match the maximum expected stop loss according to the current VPVR VPoC. It also advises not to enter into positions which are not worth entering because of VPOC being too close.
// [/list]
// 
// [B]____ SETTINGS - Strategy mode[/B]
// [list]
// [*] (STRAT) Type Strategy: 'Long and Short', 'Long Only' or 'Short Only'. Default: 'Long and Short'.
// [/list]
// [B]____ SETTINGS - Risk Management [/B]
// [list]
// [*] (RISKM) Risk Management Type: 'Safe', 'Somewhat safe compound' or 'Unsafe compound'. '[b]Safe[/b]': Calculations are always done with the initial capital (1000) in mind. The maximum losses per trade/day/week/month are taken into account. '[b]Somewhat safe compound[/b]': Calculations are done with initial capital (1000) or a higher capital if it increases. The maximum losses per trade/day/week/month are taken into account. '[b]Unsafe compound[/b]': In each order all the current capital is gambled and only the default stop loss per order is taken into account. That means that the maximum losses per trade/day/week/month are not taken into account. [b]Default[/b]: 'Somewhat safe compound'.
// [*] (RISKM) Maximum loss per trade % {1.0}.
// [*] (RISKM) Maximum loss per day % {6.0}.
// [*] (RISKM) Maximum loss per week % {8.0}.
// [*] (RISKM) Maximum loss per month % {10.0}.
// [/list]
// [B]____ SETTINGS - Decimals [/B]
// [list]
// [*] (DECIMAL) Maximum number of decimal for contracts {3}: How small (3 decimals means 0.001) an entry position might be in your exchange.
// [/list]
// 
// [B]EXTRA 1 - PRICE IS IN RANGE indicator[/B]
// [list]
// [*] (PRANGE) Print price is in range {False}: Enable a bottom label that indicates if the price is in range or not.
// [*] (PRANGE) Price range periods {5}: How many previous periods are used to calculate the medians
// [*] (PRANGE) Price range maximum desviation (%) {0.6} ( > 0 ): Maximum positive desviation for range detection
// [*] (PRANGE) Price range minimum desviation (%) {0.6} ( > 0 ): Mininum negative desviation for range detection
// [/list]
// 
// [B]EXTRA 2 - SQUEEZE MOMENTUM Desviation indicator[/B]
// [list]
// [*] (SQZDIVER) Show degrees {False}: Show degrees of each Squeeze Momentum Divergence lines to the x-axis.
// [*] (SQZDIVER) Show desviation labels {False}: Whether to show or not desviation labels for the Squeeze Momentum Divergences.
// [*] (SQZDIVER) Show desviation lines {False}: Whether to show or not desviation lines for the Squeeze Momentum Divergences.
// [/list]
// 
// [B]EXTRA 3 - VOLUME PROFILE indicator[/B]
// WARNING: This indicator works not on current bar but on previous bar. So in the worst case it might be VP from 4 hours ago. Don't worry, inside the strategy calculus the correct values are used. It's just that I cannot show the most recent one in the chart.
// [list]
// [*] (VP) Print VPVR VPoc price {True}: Show VPVR VPoC price
// [*] (VP) Avoid label price overlaps {False}: Avoid label prices to overlap on the chart.
// [/list]
//
// [B]EXTRA 4 - ZIGNALY SUPPORT[/B]
// [list]
// [*] (ZIG) Zignaly Alert Type {Email}: 'Email', 'Webhook'. '[b]Email[/b]': Prepare alert_message variable content to be compatible with zignaly expected email content format. '[b]Webhook[/b]': Prepare alert_message variable content to be compatible with zignaly expected json content format.
// [/list]
//
// [B]EXTRA 5 - DEBUG[/B]
// [list]
// [*] (DEBUG) Enable debug on order comments {False}: If set to true it prepares the order message to match the alert_message variable. It makes easier to debug what would have been sent by email or webhook on each of the times an order is triggered.
// [*] (DEBUG) Enable raw testing {True} : If raw testing mode is enabled then every time 100 USDT is used as a bet. So that you can actually know if a change to the strategy is worth of it or not because money management does not take place.
// [*] (DEBUG) Constant entry quantity for raw USDT testing {100.0}
// [/list]
// [B]EXTRA 6 - OTHER MODES[/B]
// [list]
// [*] (PLUS MODE) Beyond original TradingLatino strategy (Experimental) {False}: Tries to use even dark green in long advised entries. It does not give good results for Bitcoin but it might give better results for other securities.
// [*] (STRICT RISK) Even more strict risk management {True}.
// [/list]
// 
// [B]HOW TO USE THIS STRATEGY[/B]
// [list]
// [*] BOT MODE: This is the default setting.
// [*] PROPER VOLUME PROFILE VIEWING: Click on this strategy settings. Properties tab. Make sure Recalculate 'each time the order was run' is turned off.
// [*] NEWBIE USER: (Check PROPER VOLUME PROFILE VIEWING above!) You might want to turn on the 'Print recent profile {False}' setting. Alternatively you can use my alternate realtime study: 'Resistances and supports based on simplified Volume Profile' but, be aware, it might consume one indicator.
// [*] ADVANCED USER 1: Turn on the 'Print price is in range {False}' setting and help us to debug this subindicator. Also help us to figure out how to include this value in the strategy.
// [*] ADVANCED USER 2: Turn on the all the (SQZDIVER) settings and help us to figure out how to include this value in the strategy.
// [*] ADVANCED USER 3: (Check PROPER VOLUME PROFILE VIEWING above!) Turn on the 'Print recent profile {False}' setting and report any problem with it.
// [*] JAIME MERINO: Just use the indicator as it comes by default. It should only show BUY signals, SELL signals and their associated closing signals. From time to time you might want to check 'ADVANCED USER 2' instructions to check that there's actually a divergence. Check also 'ADVANCED USER 1' instructions for your amusement.
// [/list]
// 
// 
// [B]EXTRA ADVICE[/B]
// It's advised that you use this strategy in addition to these two other indicators:
// * Squeeze Momentum Indicator [LazyBear]
// * ADX
// so that your chart matches as close as possible to TradingLatino chart.
//
// [B]ZIGNALY INTEGRATION[/B]
// This strategy supports Zignaly email integration by default. It also supports Zignaly Webhook integration.
// [B]ZIGNALY INTEGRATION - Email integration example[/B]
// What you would write in your alert message:
// ||{{strategy.order.alert_message}}||key=MYSECRETKEY||
// [B]ZIGNALY INTEGRATION - Webhook integration example[/B]
// What you would write in your alert message:
// { {{strategy.order.alert_message}} , "key" : "MYSECRETKEY" }
//
// [b]CREDITS[/b]
// I have reused and adapted some code from
// 'Directional Movement Index + ADX & Keylevel Support' study
// which it's from TradingView console user.
// 
// I have reused and adapted some code from
// '3ema' study
// which it's from TradingView hunganhnguyen1193 user.
// 
// I have reused and adapted some code from
// 'Squeeze Momentum Indicator [LazyBear]' study
// which it's from TradingView LazyBear user.
// 
// I have reused and adapted some code from
// 'Strategy Tester EMA-SMA-RSI-MACD' study
// which it's from TradingView fikira user.
// 
// I have reused and adapted some code from
// 'Support Resistance MTF' study
// which it's from TradingView LonesomeTheBlue user.
// 
// I have reused and adapted some code from
// 'TF Segmented Linear Regression' study
// which it's from TradingView alexgrover user.
// 
// I have reused and adapted some code from
// "Poor man's volume profile" study
// which it's from TradingView IldarAkhmetgaleev user.
// 
// [B]FEEDBACK[/B]
// Please check the strategy source code for more detailed information
// where, among others, I explain all of the substrats
// and if they are implemented or not.
// 
// Q1. Did I understand wrong any of the Jaime substrats (which I have implemented)?
// Q2. The strategy yields quite profit when we should long (EMA10 from 1d timeframe is higher than EMA55 from 1d timeframe.
//     Why the strategy yields much less profit when we should short (EMA10 from 1d timeframe is lower than EMA55 from 1d timeframe)?
//     Any idea if you need to do something else rather than just reverse what Jaime does when longing?
// 
// [B]FREQUENTLY ASKED QUESTIONS[/B]
// 
// FAQ1. Why are you giving this strategy for free?
//     TradingLatino and his fellow enthusiasts taught me this strategy. Now I'm giving back to them.
// FAQ2. Seriously! Why are you giving this strategy for free?
//     I'm confident his strategy might be improved a lot. By keeping it to myself I would avoid other people contributions to improve it.
//     Now that everyone can contribute this is a win-win.
// FAQ3. How can I connect this strategy to my Exchange account?    
//     It seems that you can attach alerts to strategies.
//     You might want to combine it with a paying account which enable Webhook URLs to work.
//     I don't know how all of this works right now so I cannot give you advice on it.
//     You will have to do your own research on this subject. But, be careful. Automating trades, if not done properly,
//     might end on you automating losses.
// FAQ4. I have just found that this strategy by default gives more than 3.97% of 'maximum series of losses'. That's unacceptable according to my risk management policy.
//     You might want to reduce default stop loss setting from 7% to something like 5% till you are ok with the 'maximum series of losses'.
// FAQ5. Where can I learn more about your work on this strategy?
//     Check the source code. You might find unused strategies. Either because there's not a substantial increases on earnings. Or maybe because they have not been implemented yet.
// FAQ6. How much leverage is applied in this strategy?
//     No leverage.
// FAQ7. Any difference with original Jaime Merino strategy?
//     Most of the times Jaime defines an stop loss at the price entry. That's not the case here. The default stop loss is 7% (but, don't be confused it only means losing 1% of your investment thanks to risk management). There's also a trailing take profit that triggers at 2% profit with a 1% trailing.
// FAQ8. Why this strategy return is so small?
//     The strategy should be improved a lot. And, well, backtesting in this platform is not guaranteed to return theoric results comparable to real-life returns. That's why I'm personally forward testing this strategy to verify it.
// 
// 
// [B]MENSAJE EN CASTELLANO[/B]
// En primer lugar se agradece feedback para mejorar la estrategia.
//
// Si eres un usuario avanzado y quieres colaborar en mejorar el script no dudes en comentar abajo.
// Ten en cuenta que aunque toda esta descripción tenga que estar en inglés no es obligatorio que el comentario esté en inglés.
// 
// [B]CHISTE - CASTELLANO[/B]
// ¡Pero Jaime!
// ¡400.000!
// ¡Tu da mun!
// Tradingview Public description - END
// CREDITS - BEGIN
// TradingLatino Youtube channel ( https://www.youtube.com/channel/UCLjSq1FapG5OgvHsDKinHdA )
//       where Jaime Merino explains bits of his strategy mostly every day.
// ABCBITCOIN Youtube channel ( https://www.youtube.com/channel/UCB8HQYwzPeLXc6Dgxg2_mVQ )
//       where you can check many videos where the TradingLatino strategy is shown.
// EMAS
// Name: 3ema
// User: hunganhnguyen1193
// https://es.tradingview.com/script/aAtdQwcQ-3ema/
// ADX
// Name: Directional Movement Index + ADX & Keylevel Support
// User: console
// https://es.tradingview.com/script/38loM0lA-Directional-Movement-Index-ADX-Keylevel-Support/
// LazyBear's Squeeze Momentum Indicator
// Version sugerida por el de Pastebin 2014 09 29
// Name: Squeeze Momentum Indicator [LazyBear]
// User: LazyBear
// https://www.tradingview.com/script/nqQ1DT5a-Squeeze-Momentum-Indicator-LazyBear/
// https://pastebin.com/UCpcX8d7
// Take profit and stop loss (and other) inputs
// Name: Strategy Tester EMA-SMA-RSI-MACD
// User: fikira
// https://www.tradingview.com/script/akcty6VI-Strategy-Tester-EMA-SMA-RSI-MACD/
// Get higher timeframe.period automatically
// Name: Support Resistance MTF
// User: LonesomeTheBlue
// https://www.tradingview.com/script/E9l1xAQd-Support-Resistance-MTF/
// Slope steepness
// Name: TF Segmented Linear Regression
// User: alexgrover
// https://www.tradingview.com/script/FGvtpiFR-TF-Segmented-Linear-Regression/
//
// https://www.mathwords.com/s/slope_of_a_line.htm
// https://www.youtube.com/watch?v=JSEPDJfl8m8
// Volume based resistances and supports
// Name: Poor man's volume profile
// User: IldarAkhmetgaleev
// https://www.tradingview.com/script/IWdpl712-Poor-man-s-volume-profile/
// CREDITS - END
// SUB STRATEGIES - BEGIN
// Sub strategy 1 (SS1): 
// Status: Implemented
// SS1.1: https://www.youtube.com/watch?v=-QN9kFcUb3A (6m13s)
// SS1.2: https://www.youtube.com/watch?v=objURdzcm00 (9m20s)
//
// 1d timeframe
// Cruce: MediaMovilAzul mayor que MediaMovilMarron
// Pendiente positiva
// Direccionalidad de alcista del monitor
// means:
// Confirmamos tendencia alcista
// The substrat one will help us on deciding
// if we want to beat on 'tendencia alcista'
// or if we want to beat on 'tendencia bajista'
// Sub strategy 2 (SS2): https://www.youtube.com/watch?v=IwxDmHqmY8g
// Status: TODO
//
// 8m12s
// 12m15s
// 13m32s
// 4h timeframe
// means:
// Where not to buy
// Conclusion: Detectar velas verdes gigantes seguidas de velas verdes rojas gigantes
// Y dejar ¿7 periodos? antes de seguir con la estrategia
// Sub strategy 3 (SS3): https://www.youtube.com/watch?v=hzK3W-aJlHc
// Status: Done
// 
// Ez Osaca comment (9th point)
// Para entrar en long, hay que esperar la debilidad, es decir, 
// que el monitor cruce el punto cero, la parte baja del monitor cambie de dirección hacia arriba,
// (SS3.ADX) y el adx se ponga con pendiente negativa.
// Lo ideal es buscar esto en gráfico de1H.
// En 4H también se puede hacer, pero hay que estar atento, ante un alza rápida del precio,
// y proteger la entrada. El alza puede ser con rebote hacia  abajo.
// Sub strategy 4 (SS4): https://www.youtube.com/watch?v=hzK3W-aJlHc
// Status: TODO
//
// SS4.1: Ez Osaca comment (3rd point)
// ¿ hasta donde subirá el precio? No sabemos. ¿ Y el retroceso? Si.
// Hasta la media móvil de 55 (7300) o POC (7100).
// Esperar un patrón de debilidad.
// Parte baja del monitor desarrollada ( cambiando hacia arriba), y  Adx negativo.
//
// SS4.2: Ez Osaca comment (8th point)
// Próximas 48 horas se desarrollará el monitor
// bajando al punto cero, y adx con pendiente negativa.
//
// That means that if we detect a downwards trend
// we can establish the SHORT take profit to the MediaMovilMarron value
// (or randomly at 85% of the distance between the current price and expected MediaMovilMarron as a line).
//
// SS4.3
// https://www.youtube.com/watch?v=b0aZKiGhpQE (v419)
// 6m57s
// Status: Implemented.
//
// The price falls just below or above the MediaMovilMarron and so you can
// enter in long.
// Please note that the current price is above the MediaMovilAzul and the 1d timeframe trend is upwards.
//
// So this should be used as an extra condition to
// the usual pattern of waiting for dark-red on the sqz mom.
//
// SS4.4
// https://www.youtube.com/watch?v=YSDQZ1m24Hw (v420)
// 10m08s
//
// This is an example where you would expect the price to rebound
// because it touches the MediaMovilMarron.
//
// But, however you need to ensure to see dark-red. The rebound.
// So this is basically SS4.3 again with a different order.
// Nice.
//
// SS4.5
// https://www.youtube.com/watch?v=YSDQZ1m24Hw (v420)
// 27m54s
// Yet again the same explanation on where to buy when the price
// rebounds on the MediaMovilMarron
//
// He also says that when the price is above the MediaMovilAzul
// then the price is not getting higher.
// So is it maybe a signal to sell?
// Jaime Merino has never said to use price being above the MediaMovilAzul
// as a signal to sell.
//
// Sub strategy 5 (SS5): https://www.youtube.com/watch?v=hzK3W-aJlHc
// Status: Implemented
//
// Ez Osaca comment (5th point)
// En btc buscamos tendencia en diario.
// This is in favour of keeping long or short trend decision
// based on 1d timeframe
// I'm not sure this is absolutely a requisite while working
// on 4h timeframe but it surely adds to this decision
// Sub strategy 6 (SS6): https://www.youtube.com/watch?v=mwbDK_VZGLA
// Status: Implemented
//
// Buy signal
//
// [5m28s - 6m02s - 6m50s - 9m24s]
// Debilidad en el movimiento bajista
// (SS6.ADX) Cuando la pendiente negativa del ADX rompe por el punto 23
// hacia abajo
//
// 10m45s
// En el momento en que el ADX rompe el punto 23
// a partir de aquí se desencadena la señal de compra
// porque la fuerza bajista que traía el precio finaliza
// aunque en el dibujo no tengas todavía el cambio
// de color de rojoclaro a rojooscuro
//
// This is the the same as substrat three and thus also as substrat one.
//
// TODO 1: tradinglatino_strategy_adx_long_advice should be reimplemented
// so that it checks:
// El ADX ha de tener pendiente negativa
// El ADX es menor que 23
// This is a very important TODO
//
// TODO 2: tradinglatino_strategy_smilb_long_advice should be reimplemented
// so that it no longer checks the change from rojoclaro to rojooscuro
// but that it only checks you having rojoclaro or rojooscuro
// This is a very important TODO
// Substrat six - TODO 1 has been implemented
// Substrat six - TODO 2 has been implemented
// Sub strategy 7 (SS7)
// Status: Implemented but currently disabled
//
// We should save the BUY advice (LONG)
// and wait for its confirmation
// that it's when BUY and BUY[1] are both true
// then we issue the actual BUY signal
// This is a very important TODO
// in order to avoid traps
// Sub strategy 8 (SS8)
// Status: Confusing ideas to discard
// This is TODO
// we need to check if the BUY_CLOSE signals make sense
// somehow we need to close when adx is not greater than 23
// but at the same time it does not make sense doing it always
// I think it should only be triggered when being in darkgreen
// or maybe when it's either lightgreen or darkgreen
//
// Maybe just refuse to buy on lightred even if it's confirmed by two
// prebuy signals
// and wait for the darkred colour
// or maybe we need to set our stop losses correctly
// and that's it
// or maybe switch to 1h timeframe
// or maybe do not use 1d timeframe for calculation and just use current timeframe
// or maybe even better set up the take profit on the projected
// MediaMovilMarron crossing the MediaMovilAzul
// or something
// or maybe trigger the BUY_CLOSE signal when the MediaMovilAzul
// tiene una pendiente negativa
// Sub strategy 9 (SS9)
// Status: TODO as an optional feature
//
// Force EMAS from current timeperiod and EMAS from higher timeperiod to have both upwards trend
// Sub strategy 10 (SS10)
// Status: TODO as an optional feature
//
// Ignore or not emas from higher timeperiod and use emas from current timeperiod
// Sub strategy 11 (SS11)
// Status: Implemented
//
// Implement both long and short strategies
// Sub strategy 12 (SS12)
// Status: Implemented
//
// Short strategy should not switch to a long strategy
// unless 10 periods have passed
// and viceversa
// Sub strategy 13 (SS13): 
// Status: Implemented
// SS13: https://www.youtube.com/watch?v=objURdzcm00 (9m53s)
// Long sell signal means changing from light green to dark green
// and also adx slope being negative
// Sub strategy 14 (SS14): 
// Status: Implemented
// SS14: 
// If we are inside a price range then it's going to stay the same or dump down
// SS14 updated.
// Let's ignore price range alltogether
// We will just print it and that's it
// Sub strategy 15 (SS15): 
// Status: TODO
// SS15: 
// Take into account resistances and supports
// Sub strategy 16 (SS16): 
// Status: TODO
// SS16: 
// Do not act (or close) on lightgreen if recent past was: lightgreen, darkgreen and now lightgreen appears again.
// Idem with green colours that repeat or red colours that repeat in general
// Sub strategy 17 (SS17): 
// Status: Wild idea
// SS17: 
// Try to avoid operating on bank holidays
// Close operations about 3 days (taking into account current timeframe) before them?
// Sub strategy 18 (SS18): https://www.youtube.com/watch?v=OUSdjdYqErQ (v407)
// Status: Discarded. We will just implement SS12 which it will achieve a similar result.
// This is coming back to SS5.
// 14m14s 14m44s
//
// How to confirm that main tendency has changed
// from upwards to downwards movement
// Condition 0: Daily timeframe
// Condition 1: Price needs to be below FastEMA (10) and SlowEMA (55)
// Condition 2: Price needs to be below an important Point of Control (PoC)
// Condition 3: FastEMA (10) should cross downwards the SlowEMA (55) with strength
// Condition 4: Detect a crossing like in 'Condition 3', rebounce back to SlowEMA (55) and then go downwards
//
// This substrategy should affect how tradinglatino_strategy_emas_short_advice and tradinglatino_strategy_emas_long_advice
// are being calculated.
// We should maybe even rename them to something like tradinglatino_strategy_higher_timeframe_short_advice and
// tradinglatino_strategy_higher_timeframe_long_advice .
// Sub strategy 19 (SS19)
// Status: TODO
//
// As per SS18 we will need to find a way for describing that the 'Price' needs to be below FastEMA (10) and SlowEMA (55).
// Maybe the highest value on the bar should be below the two of them
//
//
// Sub strategy 20 (SS20)
// Status: Wild idea
//
// Use 1h timeframe so that we can act at 3h out of the current 4h candle
// (We would use security function)
// so that you don't need to wait for the total confirmation
// of the candle and anticipate your decision
//
// Probably we should paint the 4h candles on our own
// and ask the user to hide the 1h default candle painting from TradingView
// Sub strategy 21 (SS21)
// Status: TODO
//
// Instead of saying 'true' or 'false' to so many substrategy options
// we might want to value them from 0 (ignore it) to 100 (Most agreement)
// Then we can sum all of these substrategy weights
// and have a threshold
// Let's see an example
// PRE_BUY := tradinglatino_strategy_smilb_and_adx_long_advice and tradinglatino_strategy_emas_long_advice
// smilb_and_adx_long_advice_BUY_WEIGHT=80
// emas_long_advice_advice_BUY_WEIGHT=70
// Total weight (Two conditions) = 2 * 100 = 200
// Random Threshold = Total weight / 2 = 100
//
// 80 + 70 = 150 > 100
// So the condition should be true
// However with a 151 threshold
// the condition would be false
//
// This weights might be used
// in the future in some Artificial Intelligence (A.I.)
// training
// Sub strategy 22 (SS22): https://www.youtube.com/watch?v=L3VJtKklU9I (v408)
// Status: I want to implement it if it's not too difficult
//
// 13m10s
// This would be an exception
// And something a bot would have ignored
// but not a human
//
// Do not take a long advice on upwards trend
// if the entry price is about the same one
// the one you last sold
//
// Wait for a downwards bounce to enter
// Sub strategy 23 (SS23)
// Status: Not sure if it will be actually needed
// Detect pinbars to know when to bounce back
// (Long strategy)
// Sub strategy 24 (SS24)
// 
// Status: Not sure if it will be actually needed
// Zoom into 1h
// https://www.youtube.com/watch?v=9pV9FMTPhrM (v414)
//
// 09m17s
// Now we use 1h timeframe instead of 4h timeframe in order to search for buy entry points
// Sub strategy 25 (SS25)
//
// Status: Need more confirmation
// 1h timeframe
// https://www.youtube.com/watch?v=9pV9FMTPhrM (v414)
//
// 12m17s 13m00s
// If there is not downwards movement during
// a range that lasts for (13 + 4) hours
// then probably it's going upwards later on
// Sub strategy 26 (SS26)
//
// Status: Need more confirmation
// 1h timeframe
// https://www.youtube.com/watch?v=9pV9FMTPhrM (v414)
//
// 13m55s
// When the SQZ Momentum indicator reaches 0
// then it's a good time to buy
// because it might be going upwards
// Sub strategy 27 (SS27): 
// Status: TODO
// SS27: 
// This is a revisit on SS14.
// We said that if we are inside a price range then it's going to stay the same or dump down
//
// https://www.youtube.com/watch?v=b0aZKiGhpQE
// 8m00s
//
// Warning: 1h timeframe which we might never use
// Warning: So maybe readapt later the price range based on median
// settings.
//
// Please note than even if there was a former dark-red below it was ignored
// Why?
// Because there was a range (danger zone as Jaime Merino names it) above
//
// So we should be able to detect such ranges if we want to take advantage
// of this fact
//
// We could use the candle body height to measure. If three of them have far lesser
// body height than the detected range candles
// then we are not longer in the range
//
// However right now the current range ( 28 Jul 20 -- 04:00 ) to ( 28 Jul 20 -- 20:00) on 1h timeframe. (Spain timezone).
// is not detected by our median based range with the current settings:
// * Price Range Periods: 5
// * Price Range Maximum Desviation: 0.6
// * Price Range Minimum Desviation: 0.6
//
// Maybe we need to rethink the range detection based on body heights as described above.
// Sub strategy 28 (SS28): 
// Status: This is nonsense. I ignore it for the moment.
// SS28:
// https://www.youtube.com/watch?v=YSDQZ1m24Hw
// 7m18s
//
// Apparently he waits till the ADX slope is positive
// So he ignores the dark-red entries based on SQZMOM
// because ADX is not yet positive
// However, somehow he doesn't want to miss on ADX slope
// being positive.
// So he buys on some green even if the ADX slope is not
// positive yet.
// But this seems like a feeling he had and nothing
// mathematic that we can convert into a substrategy.
//
// Probably our strategy would have detected the ADX slope
// being positive because it just compares previous value
// to current value.
// I mean the ADX slope detector is much sensible than
// an average person or Jaime would be.
// Sub strategy 29 (SS29): 
// Status: TODO
// SS29:
// Per reading SS28 we might need to tweak the
// (ADXSLOPE) ADX minimum steepness entry so that it's somewhat
// similar to what a human would detect.
// Check an actual example from:
// https://www.youtube.com/watch?v=YSDQZ1m24Hw
// 8m00s
// in order to check it
//
// Although, warning, we know per SS28 that we should not
// actually wait for such an steep slope
// Sub strategy 30 (SS30): 
// Status: TODO
// SS30:
// We are not using adx_minimum_steepness_exit variable
// Check why it's that.
// Sub strategy 31 (SS31):
// Status: Almost done
// SS31
// https://www.youtube.com/watch?v=YSDQZ1m24Hw (v420)
// 11m11s
//
// Here we have some green colours on the SQM MOM
// which were ignored by Jaime
// But why did he decided to sell
// Because in one of the last dark-green
// He is seeing a divergence
// He draws it in the chart
//
// So we might need to add support for divergences
// and also somehow mathematically determine
// if they are relevant or not
//
// According to my preliminar research
// we could trigger a divergence when
// the SQZMOM line is negative
// and the main chart line is positive even
// if it's barely over 0
//
// So, this might be another requisite before
// selling.
// So that do not sell even if you have a dark-green
// SQZMOM wait for the divergence confirmation to happen
//
// We need more proofs from Jaime.
// Because he usually says that he bases his
// 'Sell now' trigger based exclusively on the
// SQZMOM being dark-green
//
// So this substrategy might be implemented
// as an additional feature
// for more aggresive traders
//
// Update Status: We can print divergences.
// Not sure how to use them yet.
//
// So no function has been implemented 
// to calculate is there's an
// advice for selling a long position
// from a divergence.
// Sub strategy 32 (SS32):
// Status: TODO
// SS32
//
// https://www.youtube.com/watch?v=YSDQZ1m24Hw (v420)
// 22:58
//
// 1d timeframe: Tendency. We already knew that.
// 4h timeframe: We find entries for 48 or 72 hours.
// 1h timeframe: 4h or 8h and you win
//
// So this substrategy might be implemented
// as that entries created in 4h timeframe, do not have to last more
// than 72 hours
// (Assuming take profit or stop loss would not have kicked in yet.)
//
// Needs more thinking.
// Sub strategy 33 (SS33):
// Status: TODO
// SS33
//
// https://www.youtube.com/watch?v=YSDQZ1m24Hw (v420)
// 25:08
//
// In 1h you don't need the SQZMOM to reach zero.
// If the ADX slope is positive you can bet
// on the price being bigger
//
// Even if it's a dark-green.
// Not only we need ADX slope being positive
// but also direccionalidad
//
// I should learn how to calculate the direccionalidad
// Maybe fuerza is ADX being bigger than 23
// and direccionalidad is the ADX slope being positive
// Sub strategy 34 (SS34):
// Status: TODO
// SS34
//
// https://www.youtube.com/watch?v=Fud2RdjOstg (v421)
// 05:32
// He is selling even if there was not a confirmation
// with dark green
//
// 07:15
// 08:40
// 10:32
// The volatility is getting smaller and smaller
// and that it's a range that it's forming
//
// So the price might break
// If we are in a 4h timeframe
// we see the range
// The price has not fallen down in 4h timeframe
// So the short should not be down
// 12:15
// The price is stable in 4h timeframe
// Sub strategy 35 (SS35):
// Status: TODO
// SS35
// https://www.youtube.com/watch?v=Fud2RdjOstg (v421)
// 13:49
//
// Warning: 1h timeframe
//
// Condition 1: Precio con mechazos a la alza (200, 300 dolares)
// Condition 2: If dark green gets converted into light green
// Condition 3: ADX slope becomes a positive one
//
// Then it's a buy signal
// It's not always needed to touch zero point
// Sub strategy 36 (SS36):
// Status: TODO
// SS36
// https://www.youtube.com/watch?v=Fud2RdjOstg (v421)
// 16:55
//
// 4h timeframe
// Negative slope changes into Positive slope
// And its direccionalidad alcista
//
// This is a buy signal
// He says he managed to get it in the candle start
// so we might need to zoom into 15 minutes to know
// when to enter
// Sub strategy 37 (SS37):
// Status: TODO
// SS37
// So we need to integrate resistances and supports
// from my other script
// so that we can use its VPOC
// in order to implement parts of
// SS4.1 and SS18
//
// I will do it when I am more confident
// on how this VPoC would be used
//
// As you can see SS18 is from Jaime Merino
// but SS4.1 is not
//
// We should probably save the current VPOC price
// when a buy signal is triggered
//
// That way we might use it in the future even
// if it has dissapeared because of
// more than one day has passed
// Sub strategy 38 (SS38):
// Status: Done
// SS38
// This has been explained by Jaime Merino many times
// I have to find a video though.
//
// If the EMA10 in the current timeframe
// is lower than the EMA55 in the current timeframe
// then we should aim only at bouncing back to
// the EMA55 price
// and then the price goes down
// We need a setting so that we can aim
// e.g. at 80/100 of the EMA55 - EMA10 difference
// Sub strategy 39 (SS39):
// Status: Done
// SS39
// https://www.youtube.com/watch?v=1KBXRpKGNqg (v312)
// 15m04s
//
// If VPoC (based on VPVR) is lower than the
// MediaMovilMarron that means
// the price is going to rebounce
// to the VPoC
//
// It is not going to rebounce to the MediaMovilMarron
// as it would have happened otherwise
//
// His VPoC based on VPVR has a range of 'n' 4h bars.
// After counting them is 100 4h bars.
// SUB STRATEGIES - END
DIVERGENCE_COLOUR_A = color.white
DIVERGENCE_COLOUR_B = color.silver
hc = max(close, open)
lc = min(close, open)
// ADX inputs
adx_adxlen = input(14, title="(ADX) Smoothing {14}")
adx_dilen = input(14, title="(ADX) DI Length {14}")
adx_keyLevel = input(23, title="(ADX) key level {23}")
di_minimum_percentage = input(10.0, title="(ADX) DI minimum percentage (%) {10.0}", minval=0.0, step=0.01)
// SMILB inputs
sqzmom_length = input(20, title="(SQZMOM) BB Length {20}")
sqzmom_mult = input(2.0,title="(SQZMOM) BB MultFactor {2.0}")
sqzmom_lengthKC=input(20, title="(SQZMOM) KC Length {20}")
sqzmom_multKC = input(1.5, title="(SQZMOM) KC MultFactor {1.5}")
sqzmom_useTrueRange = input(true, title="(SQZMOM) Use TrueRange (KC) {True}", type=input.bool)
sqzmom_zero = input(0.0, "(SQZMOM) Squeeze percentage zero {0.0}", minval=-100.0, maxval=100.0, step=0.01)
// EMAS inputs
marron_color=#800000
ema10_len = input(10, minval=1, title="(EMAS) EMA10 - Length {10}")
ema10_src = input(close, title="(EMAS) EMA10 - Source {close}")
ema55_len = input(55, minval=1, title="(EMAS) EMA55 - Length {55}")
ema55_src = input(close, title="(EMAS) EMA55 - Source {close}")
// Volume Profile inputs
vp_timeframe = input("1D",title="(VP) Volume Profile timeframe {1 day}",type=input.resolution)
vp_enable_custom_recent_n_bars = input(false, "(VP) Use number of bars (not VP timeframe)")
vp_custom_recent_n_bars = input(100, "(VP) Number of bars {100}", minval=1, maxval=500)
vp_resistances_price_decimal_digits = input(2, "(VP) Resistances prices number of decimal digits {2}", minval=0, maxval=10, step=1)
vp_bottom_vpoc_n_bars = input(18, "(VP) Number of bars for bottom VPOC {18}", minval=1, maxval=500) // 18 bars 4h = 3 days
vp_bottom_vpoc_ignore_advice = input(false, "(VP) Ignore VPOC bottom advice on long {False}")
vp_vpvr_vpoc_n_bars = input(100, "(VP) Number of bars for VPVR VPOC {100}", minval=1, maxval=500)
VP_PRICE_LEVELS = input(24, "(VP) Price levels {24}", minval=10, maxval=500)
// TradingLatino ADX Long based on slope and 23 value advice - Inputs
adx_23_value_for_strat = input(23, title="(ADXSLOPE) ADX cut {23}")
adx_minimum_steepness_entry = input(45, title="(ADXSLOPE) ADX minimum steepness entry {45}")
adx_minimum_steepness_exit = input(45, title="(ADXSLOPE) ADX minimum steepness exit {45}")
adx_steepness_periods_number = input(3, title="(ADXSLOPE) ADX steepness periods {3}")
// Next to EMA55 - Inputs
bounce_back_to_EMA55_percent = input(50.00, "(NEXTEMA55) EMA10 to EMA55 bounce back percentage {80}", minval=50, maxval=100, step=0.01)
next_to_EMA55_percent = input(15.00, "(NEXTEMA55) Next to EMA55 percentage {15}", minval=0, maxval=50, step=0.01)
// Stop Loss and Take Profit - Inputs
// We make stop loss is always used and > 0, otherwise we would have a division per zero
SL      = input(7.0, title="(STOPTAKE) Stop Loss % {7.0}", minval=0.01  ) / 100
TP      = input(2.0, title="(STOPTAKE) Take Profit % {2.0}") / 100
// Trailing Take Profit - Inputs
trailing_take_profit_percentage = input(0.4, "(TRAILING) Trailing Take Profit (%) {0.4}",minval=0,step=0.01,type=input.float) * 0.01
trailing_take_profit_percentage_trigger = input(0.8, "(TRAILING) Trailing Take Profit Trigger (%) {0.8}",minval=0,step=0.01,type=input.float) * 0.01
trailing_take_profit_percentage_from_drawdown = input(30.0, "(TRAILING) Drawdown percentage for dynamic Trailing Take Profit Trigger (%) {30.0}",minval=0,step=0.01,type=input.float) * 0.01
dynamic_trailing_take_profit_offset_percentage = input(45.0, "(TRAILING) Trailing Take Profit as a percentage of Trailing Take Profit Trigger (for dynamic TTP) (%) {45.0}",minval=0,step=0.01,type=input.float) * 0.01
trailing_take_profit_percentage_resistances_strict_mode = input(20.0, "(TRAILING) Take profit percentage for dynamic Trailing Take Profit Trigger based on VPoC resistances (%) {20.0}",minval=0,step=0.01,type=input.float)
enable_dynamic_trailing_take_profit      = input(true, "(TRAILING) Enforce dynamic Trailing Take Profit {True}")
// Too old order - Inputs
too_old_bars_number = input(6, "(OLD) Number of bars to consider and order to be old {6}", minval=1, maxval=100, step=1)
too_old_minimum_loss_percent = input(0.8, "(OLD) Minimum loss percent to close an old order {0.8}", minval=0.01, maxval=100, step=0.01) / 100
too_recent_minutes_number = input(6, "(RECENT) Number of minutes to wait to open a new order after the previous one has been opened {6}", minval=1, maxval=100, step=1)
dynamic_minimum_stop_loss = input(1.0, "(STOPTAKE) Minimum loss percent to be supported by VPVR VPoC {1.0}", minval=0.01, maxval=100, step=0.01) / 100
dynamic_maximum_stop_loss = input(2.38, "(STOPTAKE) Maximum loss percent to be supported by VPVR VPoC {2.38}", minval=0.01, maxval=100, step=0.01) / 100
Ratio = input(1.00, "(STOPTAKE) Win/Loss Ratio {1.00}", minval=0.01, maxval=100, step=0.01) // Ratio 1:1 it's '1'.
exchange_order_fee_percent = input(0.04, "(EXCHANGE) Fees per order {0.04} (%)", minval=0.01, maxval=100, step=0.01)
// MAIN TURN ON/OFF OPTIONS - Inputs
emas_ignore_advice      = input(false, "(EMAS) Ignore advice based on emas {false}")
emas_ignore_advice_on_buy_close      = input(false, "(EMAS) Ignore advice based on emas (On closing long signal) {False}")
smilb_ignore_advice      = input(false, "(SQZMOM) Ignore advice based on SQZMOM {false}")
sqzmom_percentage_zero_ignore_advice = input(true, "(SQZMOM) Ignore advice based squeeze percentage {True}")
adx_positive_slope_ignore_advice = input(true, "(ADXSLOPE) Ignore advice based on ADX positive slope {true}")
adx_23_ignore_advice = input(true, "(ADXSLOPE) Ignore advice based on ADX cut (23) {true}")
tp      = input(false, "(STOPTAKE) Take Profit? {false}")
// sl      = input(true, "(STOPTAKE) Stop Loss? {True}")
// We make stop loss is always used and > 0, otherwise we would have a division per zero
sl      = true
enable_trailing_take_profit_percentage = input(true, title="(TRAILING) Enable Trailing Take Profit (%) {True}", type=input.bool)
too_old_order_ignore_advice_on_buy_close      = input(false, "(OLD) Ignore advice based on order being too old {False}")
enable_dynamic_stop_loss      = input(true, "(STOPTAKE) Enforce dynamic stop loss up to maximum stop loss {True}")
// TradingLatino Strategy - Inputs
L_S     = "Long and Short"                , _L_  = "Long Only"                , _S_ = "Short Only"
Type    = input(L_S,  "(STRAT) Type Strategy", options=[L_S, _L_, _S_])
// Risk Management - Inputs
_SAFE_="Safe", _SCOMPOUND_="Somewhat safe compound", _UCOMPOUND_="Unsafe compound"
risk_management_type    = input(_SCOMPOUND_,  "(RISKM) Risk Management Type", options=[_SAFE_, _SCOMPOUND_, _UCOMPOUND_])
risk_management_maximum_loss_per_trade    = input(1.0, title="(RISKM) Maximum loss per trade % {1.0}"  ) / 100
risk_management_maximum_loss_per_day    = input(6.0, title="(RISKM) Maximum loss per day % {6.0}"  ) / 100
risk_management_maximum_loss_per_week = input(8.0, title="(RISKM) Maximum loss per week % {8.0}"  ) / 100
risk_management_maximum_loss_per_month = input(10.0, title="(RISKM) Maximum loss per month % {10.0}"  ) / 100
// Decimal - Inputs
contract_maximum_decimal_number = input(3, title="(DECIMAL) Maximum number of decimal for contracts {3}",minval=0)
// TradingLatino Price is in range - Inputs
pricerange_background_colour = color.yellow
pricerange_text_colour = color.white
price_is_in_range_print = input(false, title="(PRANGE) Print price is in range {False}", type=input.bool)
pricerange_periods_number = input(5, title="(PRANGE) Price range periods {5}")
pricerange_maximum_desviation_percent = input(0.6, title="(PRANGE) Price range maximum desviation (%) {0.6} ( > 0 ) ")
pricerange_minimum_desviation_percent = input(0.6, title="(PRANGE) Price range minimum desviation (%) {0.6} ( > 0 ) ")
// SQUEEZE MOMENTUM Desviation indicator - Inputs
enable_show_degrees = input(false, title="(SQZDIVER) Show degrees {False}", type=input.bool)
enable_show_desviation_labels = input(false, title="(SQZDIVER) Show desviation labels {False}", type=input.bool)
enable_show_desviation_lines = input(false, title="(SQZDIVER) Show desviation lines {False}", type=input.bool)
// VOLUME PROFILE indicator - Inputs
vp_enable_print_vpvr_vpoc_price = input(true, title="(VP) Print VPVR VPoc price {True}", type=input.bool)
vp_enable_avoid_overlap_mode = input(false, "(VP) Avoid label price overlaps {False}")
// Zignaly - Email (zignalye)
_ZIGNALYE_="Email", _ZIGNALYW_="WebHook"
zignaly_alert_type    = input(_ZIGNALYE_,  "(ZIG) Zignaly Alert Type {Email}", options=[_ZIGNALYW_, _ZIGNALYE_])
// Order comments based debug
enable_order_comment_debug = input(false, title="(DEBUG) Enable debug on order comments {False}", type=input.bool)
// Raw testing
enable_raw_testing      = input(false, "(DEBUG) Enable raw testing {True}")
raw_testing_quantity = input(100.0, title="(DEBUG) Constant entry quantity for raw USDT testing {100.0}")
// Plus or Neo mode
enable_plus_mode      = input(false, "(PLUS MODE) Beyond original TradingLatino strategy (Experimental) {False}")
enable_strict_mode      = input(true, "(STRICT RISK) Even more strict risk management {True}")
// Dynamic Trailing Take Profit - Variables
var float constant_trailing_take_profit_percentage_trigger = na
var float constant_trailing_take_profit_percentage = na
// Zignaly
exchange_tickerid = syminfo.basecurrency + syminfo.currency
var string zignaly_separator = ","
var string zignaly_quote = "\""
var string zignaly_equals = "="
if ( zignaly_alert_type == _ZIGNALYE_)
    zignaly_separator := "||"
    zignaly_quote := ""
    zignaly_equals := "="
else
    zignaly_separator := ","
    zignaly_quote := "\""
    zignaly_equals := ":"
zignaly_common_alert_message = zignaly_quote + "exchange" + zignaly_quote + zignaly_equals + zignaly_quote + "binance" + zignaly_quote + zignaly_separator + zignaly_quote + "exchangeAccountType" + zignaly_quote + zignaly_equals + zignaly_quote + "futures" + zignaly_quote + zignaly_separator + zignaly_quote + "pair" + zignaly_quote + zignaly_equals + zignaly_quote + "" + exchange_tickerid  + zignaly_quote + zignaly_separator + zignaly_quote + "leverage" + zignaly_quote + zignaly_equals + zignaly_quote + "1" + zignaly_quote
// too old order variables
var int buy_order_open_bar_index = na
var int sell_order_open_bar_index = na
// Dynamic stop loss variables
var float buy_SL = na
var float sell_SL = na
var float new_buy_SL = na
var float new_sell_SL = na
var bool old_inside_a_buy_order = false
var bool old_inside_a_sell_order = false
var bool inside_a_buy_order = false
var bool inside_a_sell_order = false
old_inside_a_buy_order := inside_a_buy_order
old_inside_a_sell_order := inside_a_sell_order
var int last_order_open_bar_time = na
// Handle recalculate after Stop Loss / Take Profit order
if (strategy.position_size == 0.0)
    inside_a_buy_order := false
    inside_a_sell_order := false
else
    last_order_open_bar_time := time_close
VP_LAST_BLOCK_COLOR = color.gray
VP_CURRENT_PRICE_LEVEL_COLOR = color.blue
VP_SUPPORT_PRICE_LEVEL_COLOR = color.green
VP_RESISTANCE_PRICE_LEVEL_COLOR = color.red
VP_VPOC_PRICE_LEVEL_COLOR = color.yellow
int vp_current_price_level_number = na
int vp_support_price_level_number = na
int vp_resistance_price_level_number = na
int vp_vpoc_price_level_number = na
// int vp_vpvr_vpoc_price_level_number = na
int vp_vpvr_vpoc_price_level_number_top = na
int vp_vpvr_vpoc_price_level_number_bottom = na
var string tmp_order_comment = na
var string tmp_order_alert_message = na
var int too_recent_minutes_number_ms = too_recent_minutes_number * 60 * 1000 // Convert minutes into milliseconds only once
// Decimals - Functions
get_contract_multiplier(contract_maximum_decimal_number) =>
    contract_multiplier = 1
    if (contract_maximum_decimal_number == 0)
        contract_multiplier // Return 1
    else
        for counter = 1 to contract_maximum_decimal_number
            contract_multiplier:= contract_multiplier * 10
        contract_multiplier
// —————————— PineCoders MTF Selection Framework functions
// ————— Converts current "timeframe.multiplier" plus the TF into minutes of type float.
f_resInMinutes() => 
    _resInMinutes = timeframe.multiplier * (
      timeframe.isseconds ? 1. / 60. :
      timeframe.isminutes ? 1.       :
      timeframe.isdaily   ? 1440.    :
      timeframe.isweekly  ? 10080.   :
      timeframe.ismonthly ? 43800.   : na)
    
var currentResInMinutes = f_resInMinutes() // We need to calculate it only once
get_resolution_bar_minutes(resolution) =>
    minutes = resolution == '1' ? (1 * 1) : 
     resolution == '3' ? (3 * 1) :
     resolution == '5' ? (5 * 1) : 
     resolution == '15' ? (15 * 1) : 
     resolution == '30' ? (30 * 1) : 
     resolution == '45' ? (45 * 1) : 
     resolution == '60' ? (60 * 1) : 
     resolution == '120' ? (2 * 60) : 
     resolution == '180' ? (3 * 60) : 
     resolution == '240' ? (4 * 60) : 
     resolution == '1D' ? (24 * 60) :
     resolution == '1W' ? (7 * 24 * 60) :
     resolution == '1M' ? (4 * 7 * 24 * 60) :
     currentResInMinutes // Equal to current symbol
    minutes
vp_recent_n_bars_based_on_resolution = int(floor(get_resolution_bar_minutes(vp_timeframe) / currentResInMinutes))
vp_recent_n_bars = 0
if vp_enable_custom_recent_n_bars
    vp_recent_n_bars := vp_custom_recent_n_bars
else
    vp_recent_n_bars := vp_recent_n_bars_based_on_resolution
// Volume Profile functions
vp_get_resistances_price_decimal_digits_zero_string () =>
    zero_string = ""
    if not (vp_resistances_price_decimal_digits == 0)
        for digit = 1 to vp_resistances_price_decimal_digits
            zero_string := zero_string + "0"
    zero_string
vp_level_value(from_i, to_i, row_low, row_high) =>
    float actual_low = na
    float actual_high = na
    val = 0.0
    for i = from_i to to_i
        if low[i] < row_high and high[i] > row_low
            if low[i] > row_low
                actual_low := low[i]
            else
                actual_low := row_low // Should not happen
            if high[i] < row_high
                actual_high := high[i]
            else
                actual_high := row_high
            val := val + volume[i] * (max(actual_high - actual_low, 1) / max((row_high - row_low) * VP_PRICE_LEVELS, 1) )
    val
vp_level_price(from_i, to_i, row_low, row_high) =>
    float actual_low = na
    float actual_high = na
    float volume_ponderated = 0.0
    float price_ponderated = 0.0
    float total_volume = 0.0
    float price_ponderated_top_sum = 0.0
    float return_price = 0.0
    for i = from_i to to_i
        actual_high := row_high // Default value for the loop
        actual_low := row_low // Default values for the loop
        volume_ponderated := 0.0 // Default value for the loop
        if low[i] < row_high and high[i] > row_low
            if low[i] > row_low
                actual_low := low[i]
            else
                actual_low := row_low // Should not happen
            if high[i] < row_high
                actual_high := high[i]
            else
                actual_high := row_high
            volume_ponderated := volume[i] * (max(actual_high - actual_low, 1) / max((row_high - row_low) * VP_PRICE_LEVELS, 1))
            total_volume := total_volume + volume_ponderated
            price_ponderated := ((actual_high + actual_low) / 2)
            price_ponderated_top_sum := price_ponderated_top_sum + (price_ponderated * volume_ponderated)
            
    if (total_volume != 0)
        return_price := price_ponderated_top_sum / total_volume
    else
        return_price := ((row_low + row_high ) / 2)
    return_price
vp_level_value_wrapper(vp_recent_lvl_height, vp_recent_low, vp_level_number, from_i, to_i) =>
    recent_lvl_low = vp_recent_low + vp_recent_lvl_height * (0 + vp_level_number)
    recent_lvl_high = vp_recent_low + vp_recent_lvl_height * (1 + vp_level_number)
    recent_lvl_value = vp_level_value(0, to_i, recent_lvl_low, recent_lvl_high)
    recent_lvl_value
vp_level_price_wrapper(vp_recent_lvl_height, vp_recent_low, vp_level_number, vp_n_bars) =>
    recent_lvl_low = vp_recent_low + vp_recent_lvl_height * (0 + vp_level_number)
    recent_lvl_high = vp_recent_low + vp_recent_lvl_height * (1 + vp_level_number)
    
    recent_lvl_price = vp_level_price(0, vp_n_bars, recent_lvl_low, recent_lvl_high)
    tick_based_lvl_price = 0.0
//     if (vp_enable_show_ticks and (syminfo.mintick > 0))
//         tick_based_lvl_price := floor(recent_lvl_price / syminfo.mintick) * syminfo.mintick
//     else 
//         tick_based_lvl_price := recent_lvl_price
    tick_based_lvl_price := recent_lvl_price
    tick_based_lvl_price
// Improved from:
// Get higher timeframe.period automatically
// Name: Support Resistance MTF
// User: LonesomeTheBlue
// https://www.tradingview.com/script/E9l1xAQd-Support-Resistance-MTF/
// Timeframe period functions
fun_get_higher_timeframe() =>
    Timeframe = timeframe.period
    if (timeframe.period == '1')
        Timeframe := '15'
    else if (timeframe.period == '3')
        Timeframe := '15'
    else if (timeframe.period == '5')
        Timeframe := '60'
    else if (timeframe.period == '15')
        Timeframe := '60'
    else if (timeframe.period == '30')
        Timeframe := '120'
    else if (timeframe.period == '45')
        Timeframe := '120'
    else if (timeframe.period == '60')
        Timeframe := '240'
    else if (timeframe.period == '120')
        Timeframe := '1D'
    else if (timeframe.period == '180')
        Timeframe := '1D'
    else if (timeframe.period == '240')
        Timeframe := '1D'
    else if (timeframe.period == 'D')
        Timeframe := '1W'
    else if (timeframe.period == 'W')
        Timeframe := '1M'
    else if (timeframe.period == 'M')
        Timeframe := '12M'
    Timeframe
// Linear regression - functions
lrp_Sum(src,p) => a = cum(src), a - a[max(p,0)]
lrp_Wma(src,p) => 
    mp = max(p,0)
    denom = mp*(mp+1)/2
    a = cum(src), (mp*a - lrp_Sum(a[1],p))/denom
lrp_getAandB(src, p) =>
    a = lrp_Wma(src[1],p)
    b = lrp_Sum(src[1],p)/p
    A = 4*b-3*a
    B = 3*a-2*b
    [A,B]
fun_linear_regression_points(src, periods_number) =>
    k = 0 // Default value enforced
    [A,B] = lrp_getAandB(src, periods_number)
    line lr = na
    x1 = bar_index - periods_number + 1
    y1 = A+k
    x2 = bar_index - 1 + 1
    y2 = B+k
    [x1,y1,x2,y2]
fun_line_slope(x1,y1,x2,y2) =>
    (y2 - y1) / (x2 - x1)
fun_slope_angle(slope) =>
    x_axis_slope=0
    angle_radians = atan((slope-x_axis_slope)/(1+(slope*x_axis_slope)))
    pi_number = 3.1415926535897
    angle_degrees = (angle_radians * 180) / pi_number
    angle_degrees
fun_divergence_symbol (line_smilb_angle, line_price_angle) =>
    divergence_symbol = ""
    line_smilb_angle_symbol = ""
    line_price_angle_symbol = ""
    line_smilb_angle_degrees = ""
    line_price_angle_degrees = ""
    if enable_show_degrees
        line_smilb_angle_degrees := " (" + tostring(line_smilb_angle,"#.00") + ")"
        line_price_angle_degrees := " (" + tostring(line_price_angle,"#.00") + ")"
    
    if (line_smilb_angle > 0)
        line_smilb_angle_symbol := "/"
    else
        line_smilb_angle_symbol := "\\"
    if (line_price_angle > 0)
        line_price_angle_symbol := "/"
    else
        line_price_angle_symbol := "\\"
    line_smilb_angle_symbol := line_smilb_angle_symbol + line_smilb_angle_degrees
    line_price_angle_symbol := line_price_angle_symbol + line_price_angle_degrees
    divergence_symbol := line_price_angle_symbol + "\n" + line_smilb_angle_symbol
    divergence_symbol
fun_set_current_section (red_smilb_section_a, green_smilb_section_b, red_smilb_section_b, green_smilb_section_a, smilb_is_green, smilb_is_red) =>
    // Set correct section - BEGIN
    l_green_smilb_section_b = green_smilb_section_b
    l_red_smilb_section_b = red_smilb_section_b
    l_green_smilb_section_a = green_smilb_section_a
    l_red_smilb_section_a = red_smilb_section_a
    // Detect we enter into green section b
    if l_red_smilb_section_a[1] and smilb_is_green
        l_green_smilb_section_b := false
        l_red_smilb_section_b := false
        l_green_smilb_section_a := false
        l_red_smilb_section_a := false
        l_green_smilb_section_b := true
    // Detect we enter into red section b
    if l_green_smilb_section_b[1] and smilb_is_red
        l_green_smilb_section_b := false
        l_red_smilb_section_b := false
        l_green_smilb_section_a := false
        l_red_smilb_section_a := false
    
        l_red_smilb_section_b := true
    // Detect we enter into green section a
    if l_red_smilb_section_b[1] and smilb_is_green
        l_green_smilb_section_b := false
        l_red_smilb_section_b := false
        l_green_smilb_section_a := false
        l_red_smilb_section_a := false
    
        l_green_smilb_section_a := true
    // Detect we enter into red section a
    if l_green_smilb_section_a[1] and smilb_is_red
        l_green_smilb_section_b := false
        l_red_smilb_section_b := false
        l_green_smilb_section_a := false
        l_red_smilb_section_a := false
        l_red_smilb_section_a := true
    
    [l_green_smilb_section_b, l_red_smilb_section_b, l_green_smilb_section_a, l_red_smilb_section_a]
    
    // Set correct section - END
fun_section_biggest_top(green_smilb_section, smilb_is_darker_green, smilb_is_light_green, green_maximum_smilb_section, green_maximum_price_section, green_maximum_section_index, new_green_divergence, sqzmom_val) =>
    l_green_maximum_price_section = green_maximum_price_section
    l_green_maximum_smilb_section = green_maximum_smilb_section
    l_green_maximum_section_index = green_maximum_section_index
    l_new_green_divergence = new_green_divergence
    // Assuming we are in 'green section' let's obtain biggest top
    if green_smilb_section and smilb_is_darker_green and smilb_is_light_green[1] and (not na(smilb_is_light_green[1]))
        tmp_green_maximum_price_section = hc[1] // For top chart
        tmp_green_maximum_smilb_section = sqzmom_val[1]
        // Possible if for top chart
        // if tmp_green_maximum_price_section > nz(green_maximum_price_section_a)
        if tmp_green_maximum_smilb_section > nz(green_maximum_smilb_section)
            l_green_maximum_price_section := tmp_green_maximum_price_section
            l_green_maximum_smilb_section := tmp_green_maximum_smilb_section
            l_green_maximum_section_index := bar_index - 1
            l_new_green_divergence := true
    
    [l_green_maximum_price_section, l_green_maximum_smilb_section, l_green_maximum_section_index, l_new_green_divergence]
fun_meta_divergence_symbol (green_maximum_section_index_b,green_maximum_smilb_section_b,green_maximum_section_index_a,green_maximum_smilb_section_a, green_maximum_price_section_b, green_maximum_price_section_a) =>
    line_smilb_slope_a = fun_line_slope(green_maximum_section_index_b,green_maximum_smilb_section_b,green_maximum_section_index_a,green_maximum_smilb_section_a)
    line_smilb_angle_a = fun_slope_angle(line_smilb_slope_a)
    
    line_price_slope_a = fun_line_slope(green_maximum_section_index_b,green_maximum_price_section_b,green_maximum_section_index_a,green_maximum_price_section_a)
    line_price_angle_a = fun_slope_angle(line_price_slope_a)
    
    green_divergence_label_a_text = fun_divergence_symbol (line_smilb_angle_a, line_price_angle_a)
fun_steep_positive_slope(src, periods_number, minimum_steep_angle) =>
    [x1,y1,x2,y2] = fun_linear_regression_points(src, periods_number)
    line_slope = fun_line_slope(x1,y1,x2,y2)
    line_angle = fun_slope_angle(line_slope)
    (line_angle > minimum_steep_angle)
fun_steep_negative_slope(src, periods_number, minimum_steep_angle) =>
    [x1,y1,x2,y2] = fun_linear_regression_points(src, periods_number)
    line_slope = fun_line_slope(x1,y1,x2,y2)
    line_angle = fun_slope_angle(line_slope)
    ( line_angle < (0 - minimum_steep_angle) )
// ADX functions
dirmov(len) =>
    up = change(high)
    down = -change(low)
    truerange = rma(tr, len)
    plus = fixnan(100 * rma(up > down and up > 0 ? up : 0, len) / truerange)
    minus = fixnan(100 * rma(down > up and down > 0 ? down : 0, len) / truerange)
    [plus, minus]
adx(dilen, adxlen) => 
    [plus, minus] = dirmov(dilen)
    sum = plus + minus
    adx = 100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
    [adx, plus, minus]
fun_adx_positive_slope(adx_sig, adx_minimum_steepness_entry, adx_steepness_periods_number) =>
    fun_steep_positive_slope(adx_sig, adx_steepness_periods_number, adx_minimum_steepness_entry)
fun_adx_negative_slope(adx_sig, adx_minimum_steepness_entry, adx_steepness_periods_number) =>
    fun_steep_negative_slope(adx_sig, adx_steepness_periods_number, adx_minimum_steepness_entry)
// Price range - functions
fun_amount_within_limits(amount, maximum_amount, minimum_amount) =>
    (amount > minimum_amount) and (amount < maximum_amount)
fun_price_is_in_range(hc, lc, pricerange_maximum_desviation_percent, pricerange_minimum_desviation_percent, pricerange_range_periods_number) =>
    is_in_range = true
    hc_median = median (hc, pricerange_range_periods_number)
    lc_median = median (lc, pricerange_range_periods_number)
    hc_maximum = hc_median * ((100 + pricerange_maximum_desviation_percent) / 100)
    hc_minimum = hc_median / ((100 + pricerange_maximum_desviation_percent) / 100)
    lc_maximum = lc_median * ((100 + pricerange_maximum_desviation_percent) / 100)
    lc_minimum = lc_median / ((100 + pricerange_maximum_desviation_percent) / 100)
    hc_within_limits = fun_amount_within_limits(hc, hc_maximum, hc_minimum)
    lc_within_limits = fun_amount_within_limits(lc, lc_maximum, lc_minimum)
    
    hc_within_limits and lc_within_limits
// ADX values to be printed
[adx_sig, di_plus, di_minus] = adx(adx_dilen, adx_adxlen)
float di_percentage = na
if (di_plus > di_minus)
    di_percentage := ((di_plus - di_minus) / di_minus) * 100
else
    di_percentage := - ((di_minus - di_plus) / di_plus) * 100
// SMILB functions
sqzmom(length, mult, lengthKC, multKC, useTrueRange) =>
    // Calculate BB
    source = close
    basis = sma(source, length)
    dev = mult * stdev(source, length)
    upperBB = basis + dev
    lowerBB = basis - dev
    // Calculate KC
    ma = sma(source, lengthKC)
    range = useTrueRange ? tr : (high - low)
    rangema = sma(range, lengthKC)
    upperKC = ma + rangema * multKC
    lowerKC = ma - rangema * multKC
    sqzOn  = (lowerBB > lowerKC) and (upperBB < upperKC)
    sqzOff = (lowerBB < lowerKC) and (upperBB > upperKC)
    noSqz  = (sqzOn == false) and (sqzOff == false)
    val = linreg(source - avg(avg(highest(high, lengthKC), lowest(low, lengthKC)),sma(close,lengthKC)), lengthKC,0)
    bcolor = iff( val > 0, iff( val > nz(val[1]), color.lime, color.green), iff( val < nz(val[1]), color.red, color.maroon))
    // TODO: Use string variables for colours so that final user can change the actual colour if he wants to.
    scolor = noSqz ? color.blue : sqzOn ? color.black : color.gray
    
    sqzon_percentage = (((upperKC-upperBB)/upperKC)*100)*(0.5) + (((lowerBB-lowerKC)/lowerBB)*100)*(0.5)
    sqzoff_percentage = (((upperBB-upperKC)/upperBB)*100)*(0.5) + (((lowerKC-lowerBB)/lowerKC)*100)*(0.5)
    float sqz_percentage = na
    if sqzOn
        sqz_percentage := sqzon_percentage
    else if sqzOff
        sqz_percentage := - sqzoff_percentage
    [val, bcolor, scolor, sqz_percentage]
// SMILB values to be printed
[sqzmom_val, sqzmom_bcolor, sqzmom_scolor, sqz_percentage] = sqzmom(sqzmom_length, sqzmom_mult, sqzmom_lengthKC, sqzmom_multKC, sqzmom_useTrueRange)
// EMAS functions
fun_ema(ema10_len, ema10_src, ema55_len, ema55_src) =>
    ema10_out = ema(ema10_src, ema10_len)
    ema55_out = ema(ema55_src, ema55_len)
    [ema10_out, ema55_out]
// EMAS functions
fun_ema_previous_bar(ema10_len, ema10_src, ema55_len, ema55_src) =>
    // We make sure to use the previous day bar so that it's closed and confirmed
    float ema10_out = na
    float ema55_out = na
    if ( na(ema10_src) or na(ema55_src) or na(ema10_src[1]) or na(ema55_src[1]) )
        // Rely on default handling of na with default emas when we start
        ema10_out := ema(ema10_src, ema10_len)
        ema55_out := ema(ema55_src, ema55_len)
    else
        ema10_out := ema(ema10_src[1], ema10_len)
        ema55_out := ema(ema55_src[1], ema55_len)
    [ema10_out, ema55_out]
// EMAS values to be printed
[ema10, ema55] = fun_ema(ema10_len, ema10_src, ema55_len, ema55_src)
[ema10_1d, ema55_1d] = security(syminfo.tickerid, fun_get_higher_timeframe(), fun_ema(ema10_len, ema10_src, ema55_len, ema55_src))
bar_index_1d = security(syminfo.tickerid, fun_get_higher_timeframe(), bar_index)
// EMAS printing
plot(ema10, color=color.blue, title="Media movil azul {10}")
plot(ema55, color=marron_color, title="Media movil marrón {55}")
// Bounce back to EMA55 - Functions
fun_get_bounce_back_mode_buy_close_advice (close, ema10, ema55, bounce_back_to_EMA55_percent, main_resistance_price) =>
    target_price_delta = (ema55 - ema10) * (bounce_back_to_EMA55_percent/100)
    target_price = ema10 + target_price_delta
    // (SS39)
    // Use VPVR to bounce to
    // if VPVR is lower than the ema55 target
    
    // If VPoC is greater than the close price
    // then use it if it's also lower than our original
    // target price
    if (main_resistance_price > close) and (target_price > main_resistance_price)
        target_price := main_resistance_price
    if (close > target_price)
        true
    else
        false
fun_get_bounce_back_mode_sell_close_advice (close, ema10, ema55, bounce_back_to_EMA55_percent, main_resistance_price) =>
    target_price_delta = (ema10 - ema55) * (bounce_back_to_EMA55_percent/100)
    target_price = ema10 - target_price_delta
    // (SS39)
    // Use VPVR to bounce to
    // if VPVR is lower than the ema55 target
    // If VPoC is smaller than the close price
    // then use it if it's also bigger than our original
    // target price
    if (main_resistance_price < close) and (target_price < main_resistance_price)
        target_price := main_resistance_price
    (close < target_price)
// Next to EMA55 - Functions
fun_get_price_next_to_mediamovilmarron_buy_advice (price_to_compare, ema10, ema55, next_to_EMA55_percent) =>
    target_price_delta = (ema10 - ema55) * (next_to_EMA55_percent/100)
    target_price = ema55 + target_price_delta
    (price_to_compare < target_price)
fun_get_price_next_to_mediamovilmarron_sell_advice (price_to_compare, ema10, ema55, next_to_EMA55_percent) =>
    target_price_delta = (ema55 - ema10) * (next_to_EMA55_percent/100)
    target_price = ema55 - target_price_delta
    (price_to_compare > target_price)
// Too old orders functions
fun_get_too_old_order_buy_close_advice () =>
    // Condition 1: The order is open
    // Condition 2: The order is long
    // Condition 3: Order age is bigger than the maximum setting
    // Returns boolean
    bool is_valid_open_buy_order = (strategy.position_size > 0)
    bool is_too_old =  (bar_index >= (buy_order_open_bar_index + too_old_bars_number))
    too_old_stop_loss = strategy.position_avg_price * (1 - too_old_minimum_loss_percent)
    
    bool is_losing_order = close < too_old_stop_loss
    too_old_order_buy_close_advice = is_valid_open_buy_order and is_too_old and is_losing_order
    too_old_order_buy_close_advice
fun_get_too_old_order_sell_close_advice () =>
    // Condition 1: The order is open
    // Condition 2: The order is short
    // Condition 3: Order age is bigger than the maximum setting
    // Returns boolean
    bool is_valid_open_sell_order = (strategy.position_size < 0)
    bool is_too_old =  (bar_index >= (sell_order_open_bar_index + too_old_bars_number))
    too_old_stop_loss = strategy.position_avg_price * (1 + too_old_minimum_loss_percent)
    bool is_losing_order = close > too_old_stop_loss
    too_old_order_buy_close_advice = is_valid_open_sell_order and is_too_old and is_losing_order
    too_old_order_buy_close_advice
// Too recent orders functions
fun_get_too_recent_order_not_open_advice () =>
    // Condition 1: The order was open
    // Condition 2: The order was long or short
    // Condition 3: Time since order was last open is smaller than minimum between orders
    // Returns boolean
    bool is_too_recent =  ((time_close) <= (last_order_open_bar_time + too_recent_minutes_number_ms))
    bool too_recent_order_buy_not_open_advice = na
    if (na(last_order_open_bar_time))
        too_recent_order_buy_not_open_advice := false
    else
        too_recent_order_buy_not_open_advice := is_too_recent
    too_recent_order_buy_not_open_advice
// TradingLatino SMILB-and-ADX Long Advice functions
fun_get_tl_smilb_and_adx_long_advice(sqzmom_bcolor, adx_23_value_for_strat, adx_sig, sqz_percentage, adx_23_ignore_advice, smilb_ignore_advice, adx_minimum_steepness_entry, adx_steepness_periods_number, adx_positive_slope_ignore_advice) =>
    // (SS3.ADX): ADX needs a negative slope.
    // (SS6.ADX): ADX is lesser than 23.
    // (SS1): Monitor with upwards trend
    smilb_at_top = ( sqzmom_bcolor == color.lime) or ( sqzmom_bcolor == color.green)
    smilb_at_bottom = ( sqzmom_bcolor == color.red) or ( sqzmom_bcolor == color.maroon)
    smilb_is_darker_red = (sqzmom_bcolor == color.maroon)
    smilb_is_light_red = (sqzmom_bcolor == color.red)
    smilb_is_darker_green = (sqzmom_bcolor == color.green)
    smilb_is_light_green = (sqzmom_bcolor == color.lime)
    smilb_sqz_percentage_greater_than_zero = (abs(sqz_percentage) > 0.5)
    smilb_sqz_percentage_lesser_than_zero = (abs(sqz_percentage) > 0.5)
    adx_positive_slope = fun_adx_positive_slope (adx_sig, adx_minimum_steepness_entry, adx_steepness_periods_number)
    adx_negative_slope = fun_adx_negative_slope (adx_sig, adx_minimum_steepness_entry, adx_steepness_periods_number)
    adx_greater_than_23 = (adx_sig >= adx_23_value_for_strat)
    adx_lesser_than_23 = not (adx_greater_than_23)
    returned_advice = false
    if (not smilb_ignore_advice)
        if (not sqzmom_percentage_zero_ignore_advice)
            if (not enable_plus_mode)
                if (not adx_23_ignore_advice)
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_red and adx_positive_slope and adx_greater_than_23 and smilb_sqz_percentage_greater_than_zero) or (smilb_is_light_green and adx_positive_slope and adx_greater_than_23 and smilb_sqz_percentage_greater_than_zero)
                            returned_advice := true
                    else
                        if (smilb_is_darker_red and adx_greater_than_23 and smilb_sqz_percentage_greater_than_zero) or (smilb_is_light_green and adx_greater_than_23 and smilb_sqz_percentage_greater_than_zero)
                            returned_advice := true
                else
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_red and adx_positive_slope and smilb_sqz_percentage_greater_than_zero) or (smilb_is_light_green and adx_positive_slope and smilb_sqz_percentage_greater_than_zero)
                            returned_advice := true
                    else
                        if (smilb_is_darker_red and smilb_sqz_percentage_greater_than_zero) or (smilb_is_light_green and smilb_sqz_percentage_greater_than_zero)
                            returned_advice := true
            else
                if (not adx_23_ignore_advice)
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_red and adx_positive_slope and adx_greater_than_23 and smilb_sqz_percentage_greater_than_zero) or (smilb_is_light_green and adx_positive_slope and adx_greater_than_23 and smilb_sqz_percentage_greater_than_zero)
                            returned_advice := true
                    else
                        if (smilb_is_darker_red and adx_greater_than_23 and smilb_sqz_percentage_greater_than_zero) or (smilb_is_light_green and adx_greater_than_23 and smilb_sqz_percentage_greater_than_zero)
                            returned_advice := true
                else
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_red and adx_positive_slope and smilb_sqz_percentage_greater_than_zero) or (smilb_is_light_green and adx_positive_slope and smilb_sqz_percentage_greater_than_zero)
                            returned_advice := true
                    else
                        if (smilb_is_darker_red and smilb_sqz_percentage_greater_than_zero) or (smilb_is_light_green and smilb_sqz_percentage_greater_than_zero)
                            returned_advice := true
        else
            if (not enable_plus_mode)
                if (not adx_23_ignore_advice)
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_red and adx_positive_slope and adx_greater_than_23) or (smilb_is_light_green and adx_positive_slope and adx_greater_than_23)
                            returned_advice := true
                    else
                        if (smilb_is_darker_red and adx_greater_than_23) or (smilb_is_light_green and adx_greater_than_23)
                            returned_advice := true
                else
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_red and adx_positive_slope) or (smilb_is_light_green and adx_positive_slope)
                            returned_advice := true
                    else
                        if (smilb_is_darker_red) or (smilb_is_light_green)
                            returned_advice := true
            else
                if (not adx_23_ignore_advice)
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_red and adx_positive_slope and adx_greater_than_23) or (smilb_is_light_green and adx_positive_slope and adx_greater_than_23)
                            returned_advice := true
                    else
                        if (smilb_is_darker_red and adx_greater_than_23) or (smilb_is_light_green and adx_greater_than_23)
                            returned_advice := true
                else
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_red and adx_positive_slope) or (smilb_is_light_green and adx_positive_slope)
                            returned_advice := true
                    else
                        if (smilb_is_darker_red) or (smilb_is_light_green)
                            returned_advice := true
    else
        // Return false if SMILB was ignored because we cannot use a lonely ADX to advice a long position
        returned_advice := false
    returned_advice
// TradingLatino SMILB-and-ADX SHORT Advice functions
fun_get_tl_smilb_and_adx_short_advice(sqzmom_bcolor, adx_23_value_for_strat, adx_sig, sqz_percentage, adx_23_ignore_advice, smilb_ignore_advice, adx_minimum_steepness_entry, adx_steepness_periods_number, adx_positive_slope_ignore_advice) =>
    // (SS3.ADX): ADX needs a negative slope. (Inverse)
    // (SS6.ADX): ADX is lesser than 23. (Inverse)
    // (SS1): Monitor with downwards trend
    smilb_at_top = ( sqzmom_bcolor == color.lime) or ( sqzmom_bcolor == color.green)
    smilb_at_bottom = ( sqzmom_bcolor == color.red) or ( sqzmom_bcolor == color.maroon)
    smilb_is_darker_red = (sqzmom_bcolor == color.maroon)
    smilb_is_light_red = (sqzmom_bcolor == color.red)
    smilb_is_darker_green = (sqzmom_bcolor == color.green)
    smilb_is_light_green = (sqzmom_bcolor == color.lime)
    smilb_sqz_percentage_greater_than_zero = (abs(sqz_percentage) > 0.5)
    smilb_sqz_percentage_lesser_than_zero = (abs(sqz_percentage) > 0.5)
    adx_positive_slope = fun_adx_positive_slope (adx_sig, adx_minimum_steepness_entry, adx_steepness_periods_number)
    adx_negative_slope = fun_adx_negative_slope (adx_sig, adx_minimum_steepness_entry, adx_steepness_periods_number)
    adx_greater_than_23 = (adx_sig >= adx_23_value_for_strat)
    adx_lesser_than_23 = not (adx_greater_than_23)
    returned_advice = false
    if (not smilb_ignore_advice)
        if (not sqzmom_percentage_zero_ignore_advice)
            if (not enable_plus_mode)
                if (not adx_23_ignore_advice)
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_green and adx_positive_slope and adx_greater_than_23 and smilb_sqz_percentage_lesser_than_zero) or (smilb_is_light_red and adx_positive_slope and adx_greater_than_23 and smilb_sqz_percentage_lesser_than_zero)
                            returned_advice := true
                    else
                        if (smilb_is_darker_green and adx_greater_than_23 and smilb_sqz_percentage_lesser_than_zero) or (smilb_is_light_red and adx_greater_than_23 and smilb_sqz_percentage_lesser_than_zero)
                            returned_advice := true
                else
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_green and adx_positive_slope and smilb_sqz_percentage_lesser_than_zero) or (smilb_is_light_red and adx_positive_slope and smilb_sqz_percentage_lesser_than_zero)
                            returned_advice := true
                    else
                        if (smilb_is_darker_green and smilb_sqz_percentage_lesser_than_zero) or (smilb_is_light_red and smilb_sqz_percentage_lesser_than_zero)
                            returned_advice := true
            else
                if (not adx_23_ignore_advice)
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_green and adx_positive_slope and adx_greater_than_23 and smilb_sqz_percentage_lesser_than_zero) or (smilb_is_light_red and adx_positive_slope and adx_greater_than_23 and smilb_sqz_percentage_lesser_than_zero)
                            returned_advice := true
                    else
                        if (smilb_is_darker_green and adx_greater_than_23 and smilb_sqz_percentage_lesser_than_zero) or (smilb_is_light_red and adx_greater_than_23 and smilb_sqz_percentage_lesser_than_zero)
                            returned_advice := true
                else
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_green and adx_positive_slope and smilb_sqz_percentage_lesser_than_zero) or (smilb_is_light_red and adx_positive_slope and smilb_sqz_percentage_lesser_than_zero)
                            returned_advice := true
                    else
                        if (smilb_is_darker_green and smilb_sqz_percentage_lesser_than_zero) or (smilb_is_light_red and smilb_sqz_percentage_lesser_than_zero)
                            returned_advice := true
        else
            if (not enable_plus_mode)
                if (not adx_23_ignore_advice)
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_green and adx_positive_slope and adx_greater_than_23) or (smilb_is_light_red and adx_positive_slope and adx_greater_than_23)
                            returned_advice := true
                    else
                        if (smilb_is_darker_green and adx_greater_than_23) or (smilb_is_light_red and adx_greater_than_23)
                            returned_advice := true
                else
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_green and adx_positive_slope) or (smilb_is_light_red and adx_positive_slope)
                            returned_advice := true
                    else
                        if (smilb_is_darker_green) or (smilb_is_light_red)
                            returned_advice := true
            else
                if (not adx_23_ignore_advice)
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_green and adx_positive_slope and adx_greater_than_23) or (smilb_is_light_red and adx_positive_slope and adx_greater_than_23)
                            returned_advice := true
                    else
                        if (smilb_is_darker_green and adx_greater_than_23) or (smilb_is_light_red and adx_greater_than_23)
                            returned_advice := true
                else
                    if (not adx_positive_slope_ignore_advice)
                        if (smilb_is_darker_green and adx_positive_slope) or (smilb_is_light_red and adx_positive_slope)
                            returned_advice := true
                    else
                        if (smilb_is_darker_green) or (smilb_is_light_red)
                            returned_advice := true
    else
        // Return false if SMILB was ignored because we cannot use a lonely ADX to advice a long position
        returned_advice := false
    returned_advice
// TradingLatino EMAS Long Advice functions
fun_get_tl_emas_long_advice(ema10_1d, ema10, ema55_1d, ema55) =>
    (ema10_1d > ema55_1d)
// TradingLatino EMAS SHORT Advice functions
fun_get_tl_emas_short_advice(ema10_1d, ema10, ema55_1d, ema55) =>
    (ema10_1d < ema55_1d)
fun_all_values_equal_to (pseries, number_of_bars, bool_value) =>
    bool are_equal = true
    for bar = 0 to number_of_bars
        if (not(pseries[bar] == bool_value))
            are_equal := false
            break
    are_equal
// TradingLatino ADX SHORT advice - Inputs
// TODO
var bool tradinglatino_strategy_emas_long_advice = na
var bool tradinglatino_strategy_emas_short_advice = na
// // TradingLatino EMAS Long advice
new_tradinglatino_strategy_emas_long_advice = fun_get_tl_emas_long_advice(ema10_1d, ema10, ema55_1d, ema55)
// 
// // TradingLatino EMAS SHORT advice
new_tradinglatino_strategy_emas_short_advice = fun_get_tl_emas_short_advice(ema10_1d, ema10, ema55_1d, ema55)
// 
// // (SS12)
// // 2 days in a row = 12 bars of 4h .
// // We use var to instance them only once because these values are always constant
// 
fun_ema_last_two_days_equal_to(ema10_len, ema10_src, ema55_len, ema55_src, bool_value) =>
    // We make sure to use the previous day bar so that it's closed and confirmed
    ema10_out_1 = ema(ema10_src[1], ema10_len)
    ema55_out_1 = ema(ema55_src[1], ema55_len)
    ema10_out_2 = ema(ema10_src[2], ema10_len)
    ema55_out_2 = ema(ema55_src[2], ema55_len)
    bool are_equal = na
    if (bool_value)
        are_equal := (ema10_out_1 > ema55_out_1) and (ema10_out_2 > ema55_out_2)
    else
        are_equal := (ema10_out_1 < ema55_out_1) and (ema10_out_2 < ema55_out_2)
    are_equal
var higher_timeframe_confirmation_bars = 2
var bars_in_higher_timeframe = int(floor(get_resolution_bar_minutes(fun_get_higher_timeframe()) / currentResInMinutes)) // 1 day = 6 bars of 4h
var higher_timeframe_oldest_bar_for_confirmation = (bars_in_higher_timeframe * higher_timeframe_confirmation_bars) - 1 // 6 -> 12 -> 11
long_advice_found = security(syminfo.tickerid, fun_get_higher_timeframe(), fun_ema_last_two_days_equal_to(ema10_len, ema10_src, ema55_len, ema55_src, true))
short_advice_found = security(syminfo.tickerid, fun_get_higher_timeframe(), fun_ema_last_two_days_equal_to(ema10_len, ema10_src, ema55_len, ema55_src, false))
if ( na(tradinglatino_strategy_emas_long_advice[higher_timeframe_oldest_bar_for_confirmation]) or na(tradinglatino_strategy_emas_short_advice[higher_timeframe_oldest_bar_for_confirmation]) )
    tradinglatino_strategy_emas_long_advice := new_tradinglatino_strategy_emas_long_advice
    tradinglatino_strategy_emas_short_advice := new_tradinglatino_strategy_emas_short_advice
else if (long_advice_found and (bar_index_1d[1] != bar_index_1d[0]))
    tradinglatino_strategy_emas_long_advice := true
    tradinglatino_strategy_emas_short_advice := false
else if (short_advice_found and (bar_index_1d[1] != bar_index_1d[0]))
    tradinglatino_strategy_emas_short_advice := true
    tradinglatino_strategy_emas_long_advice := false
// Take into account DI - TODO: Make it optional
// tradinglatino_strategy_emas_long_advice := tradinglatino_strategy_emas_long_advice and ((di_plus > di_minus) and (di_percentage > di_minimum_percentage))
// tradinglatino_strategy_emas_short_advice := tradinglatino_strategy_emas_short_advice and ((di_plus <= di_minus) and (di_percentage < (- di_minimum_percentage)))
// if ((sqzmom_bcolor == color.maroon) or (sqzmom_bcolor == color.lime)) and (di_plus > di_minus) and (di_percentage > di_minimum_percentage)
//     tradinglatino_strategy_emas_long_advice := true
//     tradinglatino_strategy_emas_short_advice := false
// else if ((sqzmom_bcolor == color.red) or (sqzmom_bcolor == color.green)) and (di_plus <= di_minus) and (di_percentage < (- di_minimum_percentage) )
//     tradinglatino_strategy_emas_long_advice := false
//     tradinglatino_strategy_emas_short_advice := true
// else
//     tradinglatino_strategy_emas_long_advice := false
//     tradinglatino_strategy_emas_short_advice := false
// TradingLatino SMILB-and-ADX Long advice
tradinglatino_strategy_smilb_and_adx_long_advice = fun_get_tl_smilb_and_adx_long_advice(sqzmom_bcolor, adx_23_value_for_strat, adx_sig, sqz_percentage, adx_23_ignore_advice, smilb_ignore_advice, adx_minimum_steepness_entry, adx_steepness_periods_number, adx_positive_slope_ignore_advice)
// TradingLatino SMILB-and-ADX SHORT advice
tradinglatino_strategy_smilb_and_adx_short_advice = fun_get_tl_smilb_and_adx_short_advice(sqzmom_bcolor, adx_23_value_for_strat, adx_sig, sqz_percentage, adx_23_ignore_advice, smilb_ignore_advice, adx_minimum_steepness_entry, adx_steepness_periods_number, adx_positive_slope_ignore_advice)
// Price is in range
price_is_in_range = fun_price_is_in_range(hc, lc, pricerange_maximum_desviation_percent, pricerange_minimum_desviation_percent, pricerange_periods_number)
// if (price_is_in_range and (not (price_is_in_range[1])))
//    label.new(bar_index, high, text="Range Detected", style=label.style_label_lower_right, color=color.purple, textcolor=color.white)
//    
// if ((not price_is_in_range) and (price_is_in_range[1]))
//    label.new(bar_index, high, text="Range not detected", style=label.style_label_lower_left, color=color.navy, textcolor=color.white)
range_string_loop_by_char(global_char_number, reset) =>
    range_string_length = 6 // 'RANGE-'
    char_number = global_char_number
    if reset
        char_number := 1
    else
        char_number := char_number + 1
    if (char_number == (range_string_length + 1))
        char_number := 1
    return_char = (char_number == 1) ? 'R' :
         (char_number == 2) ? 'A' :
         (char_number == 3) ? 'N' : 
         (char_number == 4) ? 'G' : 
         (char_number == 5) ? 'E' : 
         (char_number == 6) ? '-' : 'Notreturned'
    return_char
range_string_loop_by_number(global_char_number, reset) =>
    range_string_length = 6 // 'RANGE-'
    char_number = global_char_number
    if reset
        char_number := 1
    else
        char_number := char_number + 1
    if (char_number == (range_string_length + 1))
        char_number := 1
    return_char = (char_number == 1) ? 'R' :
         (char_number == 2) ? 'A' :
         (char_number == 3) ? 'N' : 
         (char_number == 4) ? 'G' : 
         (char_number == 5) ? 'E' : 
         (char_number == 6) ? '-' : 'Notreturned'
    char_number
// Loop range string by char preparation - BEGIN
var range_char = 'S'
var range_char_number = 1
if (price_is_in_range)
    if (not (price_is_in_range[1]))
        // RFE to TradingView: Please let me assign ( := ) a function array result to two variables
        // as you already can with ( = ).
        range_char := range_string_loop_by_char(range_char_number,true)
        range_char_number := range_string_loop_by_number(range_char_number,true)
    else
        range_char := range_string_loop_by_char(range_char_number,false)
        range_char_number := range_string_loop_by_number(range_char_number,false)
price_is_in_range_R = ( price_is_in_range and (range_char=="R") ) and price_is_in_range_print
price_is_in_range_A = ( price_is_in_range and (range_char=="A") ) and price_is_in_range_print
price_is_in_range_N = ( price_is_in_range and (range_char=="N") ) and price_is_in_range_print
price_is_in_range_G = ( price_is_in_range and (range_char=="G") ) and price_is_in_range_print
price_is_in_range_E = ( price_is_in_range and (range_char=="E") ) and price_is_in_range_print
price_is_in_range__ = ( price_is_in_range and (range_char=="-") ) and price_is_in_range_print
// Loop range string by char preparation - END
// Show Range - BEGIN
plotshape(series=price_is_in_range_R, title="RangeTitleR", style=shape.square, color=pricerange_background_colour, transp=50, text="R", textcolor=pricerange_text_colour, editable=false, location=location.bottom)
plotshape(series=price_is_in_range_A, title="RangeTitleA", style=shape.square, color=pricerange_background_colour, transp=50, text="A", textcolor=pricerange_text_colour, editable=false, location=location.bottom)
plotshape(series=price_is_in_range_N, title="RangeTitleN", style=shape.square, color=pricerange_background_colour, transp=50, text="N", textcolor=pricerange_text_colour, editable=false, location=location.bottom)
plotshape(series=price_is_in_range_G, title="RangeTitleG", style=shape.square, color=pricerange_background_colour, transp=50, text="G", textcolor=pricerange_text_colour, editable=false, location=location.bottom)
plotshape(series=price_is_in_range_E, title="RangeTitleE", style=shape.square, color=pricerange_background_colour, transp=50, text="E", textcolor=pricerange_text_colour, editable=false, location=location.bottom)
plotshape(series=price_is_in_range__, title="RangeTitle_", style=shape.square, color=pricerange_background_colour, transp=50, text="-", textcolor=pricerange_text_colour, editable=false, location=location.bottom)
// Show Range - END
// Print Divergences - BEGIN
// Order of sections: GREEN-A, RED-A, GREEN-B, RED-B and then again GREEN-A,...
smilb_is_darker_red = (sqzmom_bcolor == color.maroon)
smilb_is_light_red = (sqzmom_bcolor == color.red)
smilb_is_darker_green = (sqzmom_bcolor == color.green)
smilb_is_light_green = (sqzmom_bcolor == color.lime)
smilb_is_green = smilb_is_darker_green or smilb_is_light_green
smilb_is_red = smilb_is_darker_red or smilb_is_light_red
var bool green_smilb_section_a = na
var bool green_smilb_section_b = na
var bool red_smilb_section_a = na
var bool red_smilb_section_b = na
var float maximum_green = na
var float green_maximum_price_section_a = na
var float green_maximum_price_section_b = na
var float green_maximum_smilb_section_a = na
var float green_maximum_smilb_section_b = na
var int green_maximum_section_index_a = na
var int green_maximum_section_index_b = na
bool new_green_divergence_a = false
bool new_green_divergence_b = false
var line green_divergence_line_a = na
var line green_divergence_line_b = na
var label green_divergence_label_a = na
var label green_divergence_label_b = na
float dibujar_divergencia = 0
// Let's start with section a
if barstate.isfirst
    if smilb_is_red
        red_smilb_section_a := true
    else
        green_smilb_section_a := true
[tmp_green_smilb_section_b, tmp_red_smilb_section_b, tmp_green_smilb_section_a, tmp_red_smilb_section_a] = fun_set_current_section (red_smilb_section_a, green_smilb_section_b, red_smilb_section_b, green_smilb_section_a, smilb_is_green, smilb_is_red)
green_smilb_section_b := tmp_green_smilb_section_b
red_smilb_section_b := tmp_red_smilb_section_b
green_smilb_section_a := tmp_green_smilb_section_a
red_smilb_section_a := tmp_red_smilb_section_a
// Reset green_maximum_smilb_section_a when entering a new green_section_a
if green_smilb_section_a and smilb_is_red[1] and (not na(smilb_is_red[1]))
    green_maximum_smilb_section_a := na
    green_maximum_price_section_a := na
// Reset green_maximum_smilb_section_b when entering a new green_section_b
if green_smilb_section_b and smilb_is_red[1] and (not na(smilb_is_red[1]))
    green_maximum_smilb_section_b := na
    green_maximum_price_section_b := na
// Assuming we are in 'green section a' let's obtain biggest top
[tmpa_green_maximum_price_section, tmpa_green_maximum_smilb_section, tmpa_green_maximum_section_index, tmpa_new_green_divergence] = fun_section_biggest_top(green_smilb_section_a, smilb_is_darker_green, smilb_is_light_green, green_maximum_smilb_section_a, green_maximum_price_section_a, green_maximum_section_index_a, new_green_divergence_a, sqzmom_val)
green_maximum_price_section_a := tmpa_green_maximum_price_section
green_maximum_smilb_section_a := tmpa_green_maximum_smilb_section
green_maximum_section_index_a := tmpa_green_maximum_section_index
new_green_divergence_a := tmpa_new_green_divergence
// Assuming we are in 'green section b' let's obtain biggest top
[tmpb_green_maximum_price_section, tmpb_green_maximum_smilb_section, tmpb_green_maximum_section_index, tmpb_new_green_divergence] = fun_section_biggest_top(green_smilb_section_b, smilb_is_darker_green, smilb_is_light_green, green_maximum_smilb_section_b, green_maximum_price_section_b, green_maximum_section_index_b, new_green_divergence_b, sqzmom_val)
green_maximum_price_section_b := tmpb_green_maximum_price_section
green_maximum_smilb_section_b := tmpb_green_maximum_smilb_section
green_maximum_section_index_b := tmpb_green_maximum_section_index
new_green_divergence_b := tmpb_new_green_divergence
// Plot divergence on 'green section a'
if green_smilb_section_a and new_green_divergence_a and not (na(green_maximum_smilb_section_b))
    line.delete(green_divergence_line_a)
    if enable_show_desviation_lines
        green_divergence_line_a := line.new(green_maximum_section_index_b, green_maximum_price_section_b, green_maximum_section_index_a, green_maximum_price_section_a, width=2, xloc = xloc.bar_index, color=DIVERGENCE_COLOUR_A, style=line.style_dotted)
        // Possible line for bottom chart
        // green_divergence_line_a := line.new(green_maximum_section_index_b, green_maximum_smilb_section_b, green_maximum_section_index_a, green_maximum_smilb_section_a, width=2, xloc = xloc.bar_index, color=DIVERGENCE_COLOUR_A, style=line.style_dotted)
    
    green_divergence_label_a_text = fun_meta_divergence_symbol (green_maximum_section_index_b,green_maximum_smilb_section_b,green_maximum_section_index_a,green_maximum_smilb_section_a, green_maximum_price_section_b, green_maximum_price_section_a)
    
    label.delete(green_divergence_label_a)
    if enable_show_desviation_labels
        green_divergence_label_a := label.new(x=green_maximum_section_index_a, y=green_maximum_price_section_a, text=green_divergence_label_a_text, xloc=xloc.bar_index, yloc=yloc.price)
// Plot divergence on 'green section b'
if green_smilb_section_b and new_green_divergence_b and not (na(green_maximum_smilb_section_a))
    line.delete(green_divergence_line_b)
    if enable_show_desviation_lines
        green_divergence_line_b := line.new(green_maximum_section_index_a, green_maximum_price_section_a, green_maximum_section_index_b, green_maximum_price_section_b, width=2, xloc = xloc.bar_index, color=DIVERGENCE_COLOUR_B, style=line.style_dotted)
        // Possible line for bottom chart
        // green_divergence_line_b := line.new(green_maximum_section_index_a, green_maximum_smilb_section_a, green_maximum_section_index_b, green_maximum_smilb_section_b, width=2, xloc = xloc.bar_index, color=DIVERGENCE_COLOUR_B, style=line.style_dotted)
    
    green_divergence_label_b_text = fun_meta_divergence_symbol (green_maximum_section_index_a,green_maximum_smilb_section_a,green_maximum_section_index_b,green_maximum_smilb_section_b, green_maximum_price_section_a, green_maximum_price_section_b)
    label.delete(green_divergence_label_b)
    if enable_show_desviation_labels
        green_divergence_label_b := label.new(x=green_maximum_section_index_b, y=green_maximum_price_section_b, text=green_divergence_label_b_text, xloc=xloc.bar_index, yloc=yloc.price)
// Print Divergences - END
// Zignalye - Functions - BEGIN
get_zignaly_long_alert_message(entry_quantity_contracts_usdt, current_capital) =>
    var string zignale_stop_loss_combo = ""
    var string zignale_take_profit_combo = ""
    var string zignale_trailing_take_profit_combo = ""
    zignaly_long_common_alert_message = zignaly_quote + "type" + zignaly_quote + zignaly_equals + zignaly_quote + "entry" + zignaly_quote + zignaly_separator + zignaly_quote + "side" + zignaly_quote + zignaly_equals + zignaly_quote + "long" + zignaly_quote + zignaly_separator + zignaly_quote + "orderType" + zignaly_quote + zignaly_equals + zignaly_quote + "market" + zignaly_quote + zignaly_separator + zignaly_quote + "signalId" + zignaly_quote + zignaly_equals + zignaly_quote + "LONG-" + exchange_tickerid + zignaly_quote
    float float_entry_quantity_contracts_usdt = entry_quantity_contracts_usdt
    float float_current_capital = current_capital
    float entry_quantity_contracts_percent = (float_entry_quantity_contracts_usdt / float_current_capital) * 100.00
    entry_quantity_contracts_percent_str = tostring(entry_quantity_contracts_percent, "0." + vp_get_resistances_price_decimal_digits_zero_string())
    // This is actually not needed because with pyramiding=0 it's impossible that an order is scaled (and thus modified)
    float constant_buy_SL = na
    if (old_inside_a_buy_order and inside_a_buy_order)
        constant_buy_SL := buy_SL
    else
        constant_buy_SL := new_buy_SL
    if sl
        zignale_stop_loss_combo := zignaly_separator + zignaly_quote + "stopLossPercentage" + zignaly_quote + zignaly_equals + zignaly_quote + "-" + tostring((nz(constant_buy_SL) * 100), "0." + vp_get_resistances_price_decimal_digits_zero_string()) + zignaly_quote
    else
        zignale_stop_loss_combo := ""
    if tp
        zignale_take_profit_combo := zignaly_separator + zignaly_quote + "takeProfitPercentage1" + zignaly_quote + zignaly_equals + zignaly_quote + "" + tostring((TP * 100), "0." + vp_get_resistances_price_decimal_digits_zero_string()) + zignaly_quote
    else
        zignale_take_profit_combo := ""
    if enable_trailing_take_profit_percentage
        zignale_trailing_take_profit_combo := zignaly_separator + zignaly_quote + "trailingStopDistancePercentage" + zignaly_quote + zignaly_equals + zignaly_quote + "-" + tostring((constant_trailing_take_profit_percentage * 100), "0." + vp_get_resistances_price_decimal_digits_zero_string()) + zignaly_quote + zignaly_separator + zignaly_quote + "trailingStopTriggerPercentage" + zignaly_quote + zignaly_equals + zignaly_quote + "" + tostring((constant_trailing_take_profit_percentage_trigger * 100), "0." + vp_get_resistances_price_decimal_digits_zero_string()) + zignaly_quote
    else
        zignale_trailing_take_profit_combo := ""
    var string message = ""
    message := 
         zignaly_common_alert_message + 
         zignaly_separator + 
         zignaly_long_common_alert_message + 
         zignaly_separator + 
         zignaly_quote + "positionSizePercentage" + zignaly_quote + zignaly_equals + zignaly_quote + "" +  entry_quantity_contracts_percent_str + zignaly_quote +
         zignale_stop_loss_combo +
         zignale_take_profit_combo +
         zignale_trailing_take_profit_combo
    message
get_zignaly_long_close_alert_message() =>
    zignaly_long_close_common_alert_message = zignaly_quote + "type" + zignaly_quote + zignaly_equals + zignaly_quote + "exit" + zignaly_quote + zignaly_separator + zignaly_quote + "side" + zignaly_quote + zignaly_equals + zignaly_quote + "long" + zignaly_quote + zignaly_separator + zignaly_quote + "orderType" + zignaly_quote + zignaly_equals + zignaly_quote + "market" + zignaly_quote + zignaly_separator + zignaly_quote + "signalId" + zignaly_quote + zignaly_equals + zignaly_quote + "LONG-" + exchange_tickerid + zignaly_quote
    
    var string message = ""
    message := zignaly_common_alert_message + zignaly_separator + zignaly_long_close_common_alert_message
    message
get_zignaly_short_alert_message(entry_quantity_contracts_usdt, current_capital) =>
    var string zignale_stop_loss_combo = ""
    var string zignale_take_profit_combo = ""
    var string zignale_trailing_take_profit_combo = ""
    zignaly_short_common_alert_message = zignaly_quote + "type" + zignaly_quote + zignaly_equals + zignaly_quote + "entry" + zignaly_quote + zignaly_separator + zignaly_quote + "side" + zignaly_quote + zignaly_equals + zignaly_quote + "short" + zignaly_quote + zignaly_separator + zignaly_quote + "orderType" + zignaly_quote + zignaly_equals + zignaly_quote + "market" + zignaly_quote + zignaly_separator + zignaly_quote + "signalId" + zignaly_quote + zignaly_equals + zignaly_quote + "SHORT-" + exchange_tickerid + zignaly_quote
    float float_entry_quantity_contracts_usdt = entry_quantity_contracts_usdt
    float float_current_capital = current_capital
    float entry_quantity_contracts_percent = (float_entry_quantity_contracts_usdt / float_current_capital) * 100.00
    entry_quantity_contracts_percent_str = tostring(entry_quantity_contracts_percent, "0." + vp_get_resistances_price_decimal_digits_zero_string())
    // This is actually not needed because with pyramiding=0 it's impossible that an order is scaled (and thus modified)
    float constant_sell_SL = na
    if (old_inside_a_sell_order and inside_a_sell_order)
        constant_sell_SL := sell_SL
    else
        constant_sell_SL := new_sell_SL
    
    if sl
        zignale_stop_loss_combo := zignaly_separator + zignaly_quote + "stopLossPercentage" + zignaly_quote + zignaly_equals + zignaly_quote + "" + tostring((nz(constant_sell_SL) * 100), "0." + vp_get_resistances_price_decimal_digits_zero_string()) + zignaly_quote
    else
        zignale_stop_loss_combo := ""
    if tp
        zignale_take_profit_combo := zignaly_separator + zignaly_quote + "takeProfitPercentage1" + zignaly_quote + zignaly_equals + zignaly_quote + "-" + tostring((TP * 100), "0." + vp_get_resistances_price_decimal_digits_zero_string()) + zignaly_quote
    else
        zignale_take_profit_combo := ""
    if enable_trailing_take_profit_percentage
        zignale_trailing_take_profit_combo := zignaly_separator + zignaly_quote + "trailingStopDistancePercentage" + zignaly_quote + zignaly_equals + zignaly_quote + "" + tostring((constant_trailing_take_profit_percentage * 100), "0." + vp_get_resistances_price_decimal_digits_zero_string()) + zignaly_quote + zignaly_separator + zignaly_quote + "trailingStopTriggerPercentage" + zignaly_quote + zignaly_equals + zignaly_quote + "-" + tostring((constant_trailing_take_profit_percentage_trigger * 100), "0." + vp_get_resistances_price_decimal_digits_zero_string()) + zignaly_quote
    else
        zignale_trailing_take_profit_combo := ""
    var string message = ""
    message := 
         zignaly_common_alert_message + 
         zignaly_separator + 
         zignaly_short_common_alert_message + 
         zignaly_separator + 
         zignaly_quote + "positionSizePercentage" + zignaly_quote + zignaly_equals + zignaly_quote + "" +  entry_quantity_contracts_percent_str + zignaly_quote +
         zignale_stop_loss_combo +
         zignale_take_profit_combo +
         zignale_trailing_take_profit_combo
    message
get_zignaly_short_close_alert_message() =>
    zignaly_short_close_common_alert_message = zignaly_quote + "type" + zignaly_quote + zignaly_equals + zignaly_quote + "exit" + zignaly_quote + zignaly_separator + zignaly_quote + "side" + zignaly_quote + zignaly_equals + zignaly_quote + "short" + zignaly_quote + zignaly_separator + zignaly_quote + "orderType" + zignaly_quote + zignaly_equals + zignaly_quote + "market" + zignaly_quote + zignaly_separator + zignaly_quote + "signalId" + zignaly_quote + zignaly_equals + zignaly_quote + "SHORT-" + exchange_tickerid + zignaly_quote
    
    var string message = ""
    message := zignaly_common_alert_message + zignaly_separator + zignaly_short_close_common_alert_message
    message
// Zignalye - Functions - END
// Order comment - Functions - BEGIN
get_order_comment(typeOrder, side, alert_message) =>
    // TODO: Add descriptive comments
    // typeOrder="entry" or typeOrder="close"
    // side: true means long ; false means short ; We can use strategy.long or strategy.short as true and false aliases
    // alert_message
    var string l_order_comment = ""
    
    if (enable_order_comment_debug)
        l_order_comment := alert_message
    else
        // TODO: Use human explanations instead of default order comment value (na)
        l_order_comment := na
        
    l_order_comment
        
// Order comment - Functions - END
// Volume Profile variables
float vp_recent_high = na
float vp_recent_low = na
float vp_recent_highest_lvl_value = na
float vp_highest_recent_lvl_value = na
float vp_vpvr_highest_recent_lvl_value = na
float vp_recent_lvl_value_tmp = na
float vp_vpvr_recent_highest_lvl_value = na
// float vp_vpvr_recent_high = na
// float vp_vpvr_recent_low = na
float vp_vpvr_recent_high_top = na
float vp_vpvr_recent_low_top = na
float vp_vpvr_recent_high_bottom = na
float vp_vpvr_recent_low_bottom = na
// Recent VPoC - Value
vp_recent_high := highest(high, vp_recent_n_bars)
vp_recent_low := lowest(low, vp_recent_n_bars)
vp_recent_lvl_height = (vp_recent_high - vp_recent_low) / VP_PRICE_LEVELS
for vp_level_number = 0 to (VP_PRICE_LEVELS - 1)
    vp_recent_lvl_value_tmp := vp_level_value_wrapper(vp_recent_lvl_height, vp_recent_low, vp_level_number, 0, vp_recent_n_bars)
    vp_recent_highest_lvl_value := max(nz(vp_recent_highest_lvl_value), vp_recent_lvl_value_tmp)
    if nz(vp_highest_recent_lvl_value) < vp_recent_highest_lvl_value
        vp_highest_recent_lvl_value := vp_recent_highest_lvl_value
        vp_vpoc_price_level_number := vp_level_number
// Recent VPoC - Price
vp_recent_vpoc_price = (vp_level_price_wrapper(vp_recent_lvl_height, vp_recent_low, vp_vpoc_price_level_number, vp_recent_n_bars))
// VPVR VPoC - Value
// vp_vpvr_recent_high := highest(high, vp_vpvr_vpoc_n_bars)
// vp_vpvr_recent_low := lowest(low, vp_vpvr_vpoc_n_bars)
vp_vpvr_recent_high_top := highest(high, vp_vpvr_vpoc_n_bars)
vp_vpvr_recent_low_top := close
vp_vpvr_recent_high_bottom := close
vp_vpvr_recent_low_bottom := lowest(low, vp_vpvr_vpoc_n_bars)
// vp_vpvr_recent_lvl_height = (vp_vpvr_recent_high - vp_vpvr_recent_low) / VP_PRICE_LEVELS
vp_vpvr_recent_lvl_height_top = (vp_vpvr_recent_high_top - vp_vpvr_recent_low_top) / VP_PRICE_LEVELS
vp_vpvr_recent_lvl_height_bottom = (vp_vpvr_recent_high_top - vp_vpvr_recent_low_top) / VP_PRICE_LEVELS
// for vp_level_number = 0 to (VP_PRICE_LEVELS - 1)
//     vp_recent_lvl_value_tmp := vp_level_value_wrapper(vp_vpvr_recent_lvl_height, vp_vpvr_recent_low, vp_level_number, 0, vp_vpvr_vpoc_n_bars)
//     vp_vpvr_recent_highest_lvl_value := max(nz(vp_vpvr_recent_highest_lvl_value), vp_recent_lvl_value_tmp)
//     if nz(vp_vpvr_highest_recent_lvl_value) < vp_vpvr_recent_highest_lvl_value
//         vp_vpvr_highest_recent_lvl_value := vp_vpvr_recent_highest_lvl_value
//         vp_vpvr_vpoc_price_level_number := vp_level_number
vp_vpvr_highest_recent_lvl_value := na
vp_vpvr_recent_highest_lvl_value := na
vp_vpvr_vpoc_price_level_number_top := na
for vp_level_number = 0 to (VP_PRICE_LEVELS - 1)
    vp_recent_lvl_value_tmp := vp_level_value_wrapper(vp_vpvr_recent_lvl_height_top, vp_vpvr_recent_low_top, vp_level_number, 0, vp_vpvr_vpoc_n_bars)
    vp_vpvr_recent_highest_lvl_value := max(nz(vp_vpvr_recent_highest_lvl_value), vp_recent_lvl_value_tmp)
    if nz(vp_vpvr_highest_recent_lvl_value) < vp_vpvr_recent_highest_lvl_value
        vp_vpvr_highest_recent_lvl_value := vp_vpvr_recent_highest_lvl_value
        vp_vpvr_vpoc_price_level_number_top := vp_level_number
vp_vpvr_highest_recent_lvl_value := na
vp_vpvr_recent_highest_lvl_value := na
vp_vpvr_vpoc_price_level_number_bottom := na
for vp_level_number = 0 to (VP_PRICE_LEVELS - 1)
    vp_recent_lvl_value_tmp := vp_level_value_wrapper(vp_vpvr_recent_lvl_height_bottom, vp_vpvr_recent_low_bottom, vp_level_number, 0, vp_vpvr_vpoc_n_bars)
    vp_vpvr_recent_highest_lvl_value := max(nz(vp_vpvr_recent_highest_lvl_value), vp_recent_lvl_value_tmp)
    if nz(vp_vpvr_highest_recent_lvl_value) < vp_vpvr_recent_highest_lvl_value
        vp_vpvr_highest_recent_lvl_value := vp_vpvr_recent_highest_lvl_value
        vp_vpvr_vpoc_price_level_number_bottom := vp_level_number
// VPVR VPoC - Price
vp_recent_vpvr_vpoc_price_top = (vp_level_price_wrapper(vp_vpvr_recent_lvl_height_top, vp_vpvr_recent_low_top, vp_vpvr_vpoc_price_level_number_top, vp_vpvr_vpoc_n_bars))
vp_recent_vpvr_vpoc_price_bottom = (vp_level_price_wrapper(vp_vpvr_recent_lvl_height_bottom, vp_vpvr_recent_low_bottom, vp_vpvr_vpoc_price_level_number_bottom, vp_vpvr_vpoc_n_bars))
// vp_bottom_vpoc = lowest(vp_recent_vpoc_price, vp_bottom_vpoc_n_bars)
// vp_top_vpoc = highest(vp_recent_vpoc_price, vp_bottom_vpoc_n_bars)
fun_highest_lower_than(pvp_recent_vpoc_price, pclose, pvp_bottom_vpoc_n_bars) =>
    float highest_lower_than = 0.0
    for nbar = 0 to pvp_bottom_vpoc_n_bars
        if (pvp_recent_vpoc_price[nbar] < pclose) and (pvp_recent_vpoc_price[nbar] > highest_lower_than)
            highest_lower_than := pvp_recent_vpoc_price[nbar]
    // Workaround for limit scenarios
    if (highest_lower_than == 0.0)
        highest_lower_than := pclose
    highest_lower_than
        
fun_lowest_higher_than(pvp_recent_vpoc_price, pclose, pvp_bottom_vpoc_n_bars) =>
    bool lowest_higher_than_was_found = false
    float lowest_higher_than = highest (pvp_recent_vpoc_price, pvp_bottom_vpoc_n_bars)
    for nbar = 0 to pvp_bottom_vpoc_n_bars
        if (pvp_recent_vpoc_price[nbar] > pclose) and (pvp_recent_vpoc_price[nbar] < lowest_higher_than)
            lowest_higher_than_was_found := true
            lowest_higher_than := pvp_recent_vpoc_price[nbar]
    // Workaround for limit scenarios
    if (not lowest_higher_than_was_found)
        lowest_higher_than := pclose
    lowest_higher_than
vp_bottom_vpoc = fun_highest_lower_than(vp_recent_vpoc_price, low, vp_bottom_vpoc_n_bars)
vp_top_vpoc = fun_lowest_higher_than(vp_recent_vpoc_price, high, vp_bottom_vpoc_n_bars)
float main_resistance_price = na
main_resistance_price := vp_recent_vpvr_vpoc_price_top
// if (tradinglatino_strategy_emas_long_advice)
//     main_resistance_price := vp_recent_vpvr_vpoc_price_bottom
// else
//     main_resistance_price := vp_recent_vpvr_vpoc_price_top
if (tradinglatino_strategy_emas_long_advice)
    main_resistance_price := vp_bottom_vpoc
else
    main_resistance_price := vp_top_vpoc
// Main resistance - Print
float main_resistance_price_print = na
float vp_top_vpoc_print = na
float vp_bottom_vpoc_print = na
if vp_enable_print_vpvr_vpoc_price
    main_resistance_price_print := main_resistance_price
    vp_top_vpoc_print := vp_top_vpoc
    vp_bottom_vpoc_print := vp_bottom_vpoc
else
    main_resistance_price_print := na
    vp_top_vpoc_print := na
    vp_bottom_vpoc_print := na
    
// plot(main_resistance_price_print, color=color.yellow, title="Main resistance")
// plot(vp_recent_vpvr_vpoc_price_top, color=color.yellow, style=plot.style_stepline, title="Main resistance TOP")
// plot(vp_recent_vpvr_vpoc_price_bottom, color=color.yellow, style=plot.style_stepline, title="Main resistance BOTTOM")
plot(vp_top_vpoc_print, color=color.yellow, style=plot.style_stepline, title="Main resistance TOP")
plot(vp_bottom_vpoc_print, color=color.yellow, style=plot.style_stepline, title="Main resistance BOTTOM")
// plot(vp_recent_vpoc_price, color=color.lime, style=plot.style_stepline, title="Daily VPoC")
// Dynamic stop loss handling
// SL: This is the original stop loss with a default value of: 0.07
var bool stop_loss_not_worth_open_sell = na
var bool stop_loss_not_worth_open_buy = na
// Calculations on the bar which enters the order need to use close because position_avg_price is not yet defined.
float position_price = na
if (inside_a_sell_order or inside_a_buy_order)
    position_price := strategy.position_avg_price
else
    position_price := close
// Let's calculate new_buy_SL and new_sell_SL but do not use them yet.
if enable_dynamic_stop_loss
    if (position_price > main_resistance_price)
        float buy_stop_loss_target = position_price * (1 - SL)
        if (buy_stop_loss_target > main_resistance_price)
            if enable_strict_mode
                new_buy_SL := na
                stop_loss_not_worth_open_buy := true
            else
                new_buy_SL := SL // Just use original stop loss
                stop_loss_not_worth_open_buy := false
        else if ( ( position_price / main_resistance_price ) >= (1 + dynamic_minimum_stop_loss) )
            if enable_strict_mode
                new_buy_SL := 1 - (main_resistance_price / position_price)
                if new_buy_SL >= dynamic_maximum_stop_loss // Bigger than 2% we don't trade
                    new_buy_SL := na
                    stop_loss_not_worth_open_buy := true
                else
                    stop_loss_not_worth_open_buy := false
            else
                new_buy_SL := 1 - (main_resistance_price / position_price)
                stop_loss_not_worth_open_buy := false
        else
            new_buy_SL := dynamic_minimum_stop_loss // Ensure a minimum stop loss is used
            stop_loss_not_worth_open_buy := false
        new_sell_SL := na
        stop_loss_not_worth_open_sell := true
        // stop_loss_not_worth_open_buy := false
    else if (position_price < main_resistance_price)
        float sell_stop_loss_target = position_price * (1 + SL)
        if (sell_stop_loss_target < main_resistance_price)
            if enable_strict_mode
                new_sell_SL := na
                stop_loss_not_worth_open_sell := true
            else
                new_sell_SL := SL // Just use original stop loss
                stop_loss_not_worth_open_sell := false
        else if ( ( main_resistance_price / position_price ) >= (1 + dynamic_minimum_stop_loss) )
            if enable_strict_mode
                new_sell_SL := (main_resistance_price / position_price) - 1
                if new_sell_SL >= dynamic_maximum_stop_loss // Bigger than 2% we don't trade
                    new_sell_SL := na
                    stop_loss_not_worth_open_sell := true
                else
                    stop_loss_not_worth_open_sell := false                
            else
                new_sell_SL := (main_resistance_price / position_price) - 1
                stop_loss_not_worth_open_sell := false
        else
            new_sell_SL := dynamic_minimum_stop_loss // Ensure a minimum stop loss is used
            stop_loss_not_worth_open_sell := false
        new_buy_SL := na
        stop_loss_not_worth_open_buy := true
        // stop_loss_not_worth_open_sell := false
    else // Both buy and sell are too close to the VPoC. We refuse to buy or sell.
        stop_loss_not_worth_open_buy := true
        stop_loss_not_worth_open_sell := true
        new_buy_SL := na
        new_sell_SL := na
else
    stop_loss_not_worth_open_buy := false
    stop_loss_not_worth_open_sell := false
    new_buy_SL := SL
    new_sell_SL := SL
// Dynamic Trailing Take Profit
float new_trailing_take_profit_percentage_trigger = na
float new_trailing_take_profit_percentage = na
ath = highest (high, 5)
drawdown = 100 - ( low / ath ) * 100
maxdrawdown = highest (drawdown, 5)
sell_dynamic_trailing_take_profit_trigger_tmp = maxdrawdown * trailing_take_profit_percentage_from_drawdown
sell_dynamic_trailing_take_profit_trigger = ema (sell_dynamic_trailing_take_profit_trigger_tmp, 5)
float ShortRatio = na
float DesiredShortRatio = na
if enable_strict_mode and tradinglatino_strategy_emas_short_advice
    // sell_dynamic_trailing_take_profit_trigger := (trailing_take_profit_percentage_resistances_strict_mode / close) * (close - vp_bottom_vpoc) // Old strategy that targetted VPoCs
    
    DesiredShortRatio := Ratio * ((1 + new_sell_SL) / 1) // Make ratio compared to Stop Loss
    ShortRatio := DesiredShortRatio * (1 + (dynamic_trailing_take_profit_offset_percentage/100.0)) // Assume worst case scenario
    ShortTargetPrice = close * ( ( (100 / ShortRatio) - exchange_order_fee_percent) / ( 100 + exchange_order_fee_percent ) )
    sell_dynamic_trailing_take_profit_trigger := (1 - (ShortTargetPrice / close)) * 100.0
    
sell_dynamic_trailing_take_profit_offset = sell_dynamic_trailing_take_profit_trigger * dynamic_trailing_take_profit_offset_percentage
// plotchar(sell_dynamic_trailing_take_profit_trigger, "sell_dynamic_trailing_take_profit_trigger", "", location = location.top)
atl = lowest (low, 5)
inv_drawdown = ( ( high / atl ) * 100 ) - 100
inv_maxdrawdown = highest (inv_drawdown, 5)
buy_dynamic_trailing_take_profit_trigger_tmp = inv_maxdrawdown * trailing_take_profit_percentage_from_drawdown
buy_dynamic_trailing_take_profit_trigger = ema (buy_dynamic_trailing_take_profit_trigger_tmp, 5)
if enable_strict_mode and tradinglatino_strategy_emas_long_advice
    // buy_dynamic_trailing_take_profit_trigger := (trailing_take_profit_percentage_resistances_strict_mode / close) * (vp_top_vpoc - close) // Old strategy that targetted VPoCs
    
    DesiredLongRatio = Ratio * ((1 + new_buy_SL) / 1) // Make ratio compared to Stop Loss
    LongRatio = DesiredLongRatio * (1 + (dynamic_trailing_take_profit_offset_percentage/100.0)) // Assume worst case scenario
    LongTargetPrice = close * ( ((LongRatio * 100) + exchange_order_fee_percent) / (100 - exchange_order_fee_percent))
    buy_dynamic_trailing_take_profit_trigger := ((LongTargetPrice / close) - 1) * 100.0
    
buy_dynamic_trailing_take_profit_offset = buy_dynamic_trailing_take_profit_trigger * dynamic_trailing_take_profit_offset_percentage
// plotchar(buy_dynamic_trailing_take_profit_trigger, "buy_dynamic_trailing_take_profit_trigger", "", location = location.top)
// trailing_take_profit_percentage = input(0.4, "(TRAILING) Trailing Take Profit (%) {0.4}",minval=0,step=0.01,type=input.float) * 0.01
// trailing_take_profit_percentage_trigger = input(0.8, "(TRAILING) Trailing Take Profit Trigger (%) {0.8}",minval=0,step=0.01,type=input.float) * 0.01
// enable_dynamic_trailing_take_profit      = input(true, "(TRAILING) Enforce dynamic Trailing Take Profit {True}")
if enable_dynamic_trailing_take_profit
    if (tradinglatino_strategy_emas_long_advice)
        new_trailing_take_profit_percentage_trigger := buy_dynamic_trailing_take_profit_trigger * 0.01
        new_trailing_take_profit_percentage := buy_dynamic_trailing_take_profit_offset * 0.01
    else
        new_trailing_take_profit_percentage_trigger := sell_dynamic_trailing_take_profit_trigger * 0.01
        new_trailing_take_profit_percentage := sell_dynamic_trailing_take_profit_offset * 0.01
plotchar(new_trailing_take_profit_percentage_trigger * 100.0, "new_trailing_take_profit_percentage_trigger_percent", "", location = location.top)
// plotchar(new_trailing_take_profit_percentage * 100.0, "new_trailing_take_profit_percentage_percent", "", location = location.top)
// plotchar(ShortRatio, "ShortRatio", "", location = location.top)
// plotchar(DesiredShortRatio, "DesiredShortRatio", "", location = location.top)
//plotchar(new_sell_SL, "new_sell_SL", "", location = location.top)
// INTERNAL NOTE: N_017 file references to draw a rectangle might be useful
// when programming resistances and supports later
// (SS38)
// Try to bounce back to EMA55
// Normal or bounce back mode
buy_normal_mode = ema10 > ema55
sell_normal_mode = not (buy_normal_mode) // Also known as buy_bounce_back_mode
bounce_back_mode_buy_close_advice = fun_get_bounce_back_mode_buy_close_advice (close, ema10, ema55, bounce_back_to_EMA55_percent, main_resistance_price)
bounce_back_mode_sell_close_advice = fun_get_bounce_back_mode_sell_close_advice (close, ema10, ema55, bounce_back_to_EMA55_percent, main_resistance_price)
if enable_strict_mode
    bounce_back_mode_buy_close_advice := false
    bounce_back_mode_sell_close_advice := false
too_old_order_buy_close_advice = fun_get_too_old_order_buy_close_advice ()
too_old_order_sell_close_advice = fun_get_too_old_order_sell_close_advice ()
too_recent_order_not_open_advice = fun_get_too_recent_order_not_open_advice ()
// SS4.3
// Wait for the price to fall just below or above the MediaMovilMarron and so you can
// enter in long.
price_next_to_ema55_buy_advice = fun_get_price_next_to_mediamovilmarron_buy_advice (hc, ema10, ema55, next_to_EMA55_percent)
price_next_to_ema55_sell_advice = fun_get_price_next_to_mediamovilmarron_sell_advice (lc, ema10, ema55, next_to_EMA55_percent)
bottom_vpoc_n_bars_advice = hc > vp_bottom_vpoc
top_vpoc_n_bars_advice = lc < vp_top_vpoc
// Show Final advice
// If we are in strict mode we only want the advice from Smilb and ADX
if enable_strict_mode
    buy_normal_mode := false
    sell_normal_mode := false
PRE_BUY = false
if (emas_ignore_advice)
    if buy_normal_mode
        if vp_bottom_vpoc_ignore_advice
            PRE_BUY := (tradinglatino_strategy_smilb_and_adx_long_advice) or price_next_to_ema55_buy_advice
        else
            PRE_BUY := (tradinglatino_strategy_smilb_and_adx_long_advice) or price_next_to_ema55_buy_advice or bottom_vpoc_n_bars_advice
    else
        PRE_BUY := tradinglatino_strategy_smilb_and_adx_long_advice
else
    if buy_normal_mode
        if vp_bottom_vpoc_ignore_advice
            PRE_BUY := tradinglatino_strategy_emas_long_advice and (tradinglatino_strategy_smilb_and_adx_long_advice or price_next_to_ema55_buy_advice)
        else
            PRE_BUY := tradinglatino_strategy_emas_long_advice and (tradinglatino_strategy_smilb_and_adx_long_advice or price_next_to_ema55_buy_advice or bottom_vpoc_n_bars_advice)
    else
        PRE_BUY := tradinglatino_strategy_emas_long_advice and (tradinglatino_strategy_smilb_and_adx_long_advice)
BUY = PRE_BUY[1] and PRE_BUY
// Do not confirm the buy entry
if (enable_dynamic_stop_loss and stop_loss_not_worth_open_buy)
    BUY := false
else
    BUY := PRE_BUY // Default behaviour
if (too_recent_order_not_open_advice)
    BUY := false
PRE_SELL = false
if (emas_ignore_advice)
    if sell_normal_mode
        if vp_bottom_vpoc_ignore_advice // It uses the long bool variable on purpose
            PRE_SELL := (tradinglatino_strategy_smilb_and_adx_short_advice) or price_next_to_ema55_sell_advice
        else
            PRE_SELL := (tradinglatino_strategy_smilb_and_adx_short_advice) or price_next_to_ema55_sell_advice or top_vpoc_n_bars_advice
    else
        PRE_SELL := tradinglatino_strategy_smilb_and_adx_short_advice
else
    if sell_normal_mode
        if vp_bottom_vpoc_ignore_advice // It uses the long bool variable on purpose
            PRE_SELL := tradinglatino_strategy_emas_short_advice and (tradinglatino_strategy_smilb_and_adx_short_advice or price_next_to_ema55_sell_advice)
        else
            PRE_SELL := tradinglatino_strategy_emas_short_advice and (tradinglatino_strategy_smilb_and_adx_short_advice or price_next_to_ema55_sell_advice or top_vpoc_n_bars_advice)
    else
        PRE_SELL := tradinglatino_strategy_emas_short_advice and (tradinglatino_strategy_smilb_and_adx_short_advice)
SELL = PRE_SELL[1] and PRE_SELL
// Do not confirm the sell entry
if (enable_dynamic_stop_loss and stop_loss_not_worth_open_sell)
    SELL := false
else
    SELL := PRE_SELL // Default behaviour
if (too_recent_order_not_open_advice)
    SELL := false
BUY_CLOSE = true
// (SS13)
// Long sell signal means changing from light green to dark green
// (SS14)
// If we are inside a price range then it's going to stay the same or dump down
// (SS14. Updated)
// Let's ignore price range alltogether
// We will just print it and that's it
bool sqzmom_bcolor_buy_close_advice = na
bool new_tradinglatino_strategy_smilb_and_adx_short_advice = na
if enable_plus_mode
    sqzmom_bcolor_buy_close_advice := false
    new_tradinglatino_strategy_smilb_and_adx_short_advice := false
else
    // TODO: sqzmom_bcolor_buy_close_advice being dependent on di_plus should be optional.
    // sqzmom_bcolor_buy_close_advice := (sqzmom_bcolor == color.green) and ((di_plus <= di_minus) and (di_percentage < (- di_minimum_percentage)))
    //new_tradinglatino_strategy_smilb_and_adx_short_advice := tradinglatino_strategy_smilb_and_adx_short_advice and ((di_plus <= di_minus) and (di_percentage < (- di_minimum_percentage)))
    sqzmom_bcolor_buy_close_advice := (sqzmom_bcolor == color.green)
    new_tradinglatino_strategy_smilb_and_adx_short_advice := tradinglatino_strategy_smilb_and_adx_short_advice
if (too_old_order_ignore_advice_on_buy_close)
    if (emas_ignore_advice_on_buy_close)
        if buy_normal_mode
            BUY_CLOSE := new_tradinglatino_strategy_smilb_and_adx_short_advice or sqzmom_bcolor_buy_close_advice
        else
            BUY_CLOSE := new_tradinglatino_strategy_smilb_and_adx_short_advice or sqzmom_bcolor_buy_close_advice or bounce_back_mode_buy_close_advice
    else
        if buy_normal_mode
            BUY_CLOSE := new_tradinglatino_strategy_smilb_and_adx_short_advice or tradinglatino_strategy_emas_short_advice or sqzmom_bcolor_buy_close_advice
        else
            BUY_CLOSE := new_tradinglatino_strategy_smilb_and_adx_short_advice or tradinglatino_strategy_emas_short_advice or sqzmom_bcolor_buy_close_advice or bounce_back_mode_buy_close_advice
else
    if (emas_ignore_advice_on_buy_close)
        if buy_normal_mode
            BUY_CLOSE := new_tradinglatino_strategy_smilb_and_adx_short_advice or sqzmom_bcolor_buy_close_advice or too_old_order_buy_close_advice
        else
            BUY_CLOSE := new_tradinglatino_strategy_smilb_and_adx_short_advice or sqzmom_bcolor_buy_close_advice or bounce_back_mode_buy_close_advice  or too_old_order_buy_close_advice
    else
        if buy_normal_mode
            BUY_CLOSE := new_tradinglatino_strategy_smilb_and_adx_short_advice or tradinglatino_strategy_emas_short_advice or sqzmom_bcolor_buy_close_advice  or too_old_order_buy_close_advice
        else
            BUY_CLOSE := new_tradinglatino_strategy_smilb_and_adx_short_advice or tradinglatino_strategy_emas_short_advice or sqzmom_bcolor_buy_close_advice or bounce_back_mode_buy_close_advice or too_old_order_buy_close_advice
// Let's make sure BUY does not trigger if BUY_CLOSE would tell us to close the BUY
if BUY_CLOSE
    BUY := false
SELL_CLOSE = true
bool sqzmom_bcolor_sell_close_advice = na
bool new_tradinglatino_strategy_smilb_and_adx_long_advice = na
if enable_plus_mode
    sqzmom_bcolor_sell_close_advice := false
    new_tradinglatino_strategy_smilb_and_adx_long_advice := false
else
    // TODO: sqzmom_bcolor_sell_close_advice being dependent on di_plus should be optional.
    // sqzmom_bcolor_sell_close_advice := (sqzmom_bcolor == color.maroon) and ((di_plus > di_minus) and (di_percentage > di_minimum_percentage))
    // new_tradinglatino_strategy_smilb_and_adx_long_advice := tradinglatino_strategy_smilb_and_adx_long_advice and ((di_plus > di_minus) and (di_percentage > di_minimum_percentage))
    sqzmom_bcolor_sell_close_advice := (sqzmom_bcolor == color.maroon)
    new_tradinglatino_strategy_smilb_and_adx_long_advice := tradinglatino_strategy_smilb_and_adx_long_advice
if (too_old_order_ignore_advice_on_buy_close)
    if (emas_ignore_advice_on_buy_close) // It uses the long bool variable on purpose
        if sell_normal_mode
            SELL_CLOSE := new_tradinglatino_strategy_smilb_and_adx_long_advice or sqzmom_bcolor_sell_close_advice
        else
            SELL_CLOSE := new_tradinglatino_strategy_smilb_and_adx_long_advice or sqzmom_bcolor_sell_close_advice or bounce_back_mode_sell_close_advice
    else
        if sell_normal_mode
            SELL_CLOSE := new_tradinglatino_strategy_smilb_and_adx_long_advice or tradinglatino_strategy_emas_long_advice or sqzmom_bcolor_sell_close_advice
        else
            SELL_CLOSE := new_tradinglatino_strategy_smilb_and_adx_long_advice or tradinglatino_strategy_emas_long_advice or sqzmom_bcolor_sell_close_advice or bounce_back_mode_sell_close_advice
else
    if (emas_ignore_advice_on_buy_close) // It uses the long bool variable on purpose
        if sell_normal_mode
            SELL_CLOSE := new_tradinglatino_strategy_smilb_and_adx_long_advice or sqzmom_bcolor_sell_close_advice or too_old_order_sell_close_advice
        else
            SELL_CLOSE := new_tradinglatino_strategy_smilb_and_adx_long_advice or sqzmom_bcolor_sell_close_advice or bounce_back_mode_sell_close_advice or too_old_order_sell_close_advice
    else
        if sell_normal_mode
            SELL_CLOSE := new_tradinglatino_strategy_smilb_and_adx_long_advice or tradinglatino_strategy_emas_long_advice or sqzmom_bcolor_sell_close_advice or too_old_order_sell_close_advice
        else
            SELL_CLOSE := new_tradinglatino_strategy_smilb_and_adx_long_advice or tradinglatino_strategy_emas_long_advice or sqzmom_bcolor_sell_close_advice or bounce_back_mode_sell_close_advice or too_old_order_sell_close_advice
// Let's make sure SELL does not trigger if SELL_CLOSE would tell us to close the SELL
if SELL_CLOSE
    SELL := false
// Debug strategy variables - BEGIN
plotchar(BUY, "BUY", "", location = location.top)
plotchar(new_tradinglatino_strategy_smilb_and_adx_long_advice, "BUY_tradinglatino_strategy_smilb_and_adx_long_advice", "", location = location.top)
plotchar(tradinglatino_strategy_emas_long_advice, "BUY_tradinglatino_strategy_emas_long_advice", "", location = location.top)
plotchar(price_next_to_ema55_buy_advice, "BUY_price_next_to_ema55_buy_advice", "", location = location.top)
plotchar(bottom_vpoc_n_bars_advice, "BUY_bottom_vpoc_n_bars_advice", "", location = location.top)
plotchar(BUY_CLOSE, "BUY_CLOSE", "", location = location.top)
plotchar(tradinglatino_strategy_smilb_and_adx_short_advice, "BUY_CLOSE_tradinglatino_strategy_smilb_and_adx_short_advice", "", location = location.top)
plotchar(tradinglatino_strategy_emas_short_advice, "BUY_CLOSE_tradinglatino_strategy_emas_short_advice", "", location = location.top)
plotchar((sqzmom_bcolor == color.green), "BUY_CLOSE_bcolor_is_green", "", location = location.top)
plotchar(buy_normal_mode, "BUY_CLOSE_normal_mode", "", location = location.top)
plotchar(bounce_back_mode_buy_close_advice, "BUY_CLOSE_bounce_back_mode_advice", "", location = location.top)
plotchar(too_old_order_buy_close_advice, "BUY_CLOSE_too_old_order_buy_close_advice", "", location = location.top)
plotchar(stop_loss_not_worth_open_buy, "BUY_CLOSE_stop_loss_not_worth_open_buy", "", location = location.top)
plotchar(SELL, "SELL", "", location = location.top)
plotchar(tradinglatino_strategy_smilb_and_adx_short_advice, "SELL_tradinglatino_strategy_smilb_and_adx_short_advice", "", location = location.top)
plotchar(tradinglatino_strategy_emas_short_advice, "SELL_tradinglatino_strategy_emas_short_advice", "", location = location.top)
plotchar(price_next_to_ema55_sell_advice, "SELL_price_next_to_ema55_sell_advice", "", location = location.top)
plotchar(top_vpoc_n_bars_advice, "SELL_top_vpoc_n_bars_advice", "", location = location.top)
plotchar(SELL_CLOSE, "SELL_CLOSE", "", location = location.top)
plotchar(new_tradinglatino_strategy_smilb_and_adx_long_advice, "SELL_CLOSE_tradinglatino_strategy_smilb_and_adx_long_advice", "", location = location.top)
plotchar(tradinglatino_strategy_emas_long_advice, "SELL_CLOSE_tradinglatino_strategy_emas_long_advice", "", location = location.top)
plotchar((sqzmom_bcolor == color.maroon), "SELL_CLOSE_bcolor_is_maroon", "", location = location.top)
plotchar(sell_normal_mode, "SELL_CLOSE_normal_mode", "", location = location.top)
plotchar(bounce_back_mode_sell_close_advice, "SELL_CLOSE_bounce_back_mode_advice", "", location = location.top)
plotchar(too_old_order_sell_close_advice, "SELL_CLOSE_too_old_order_sell_close_advice", "", location = location.top)
plotchar(stop_loss_not_worth_open_sell, "SELL_CLOSE_stop_loss_not_worth_open_sell", "", location = location.top)
plotchar(too_recent_order_not_open_advice, "too_recent_order_not_open_advice", "", location = location.top)
plotchar(main_resistance_price, "main_resistance_price", "", location = location.top)
// plotchar(PRE_BUY, "PRE_BUY", "", location = location.top)
//
// plotchar(tradinglatino_strategy_emas_short_advice, "BUY_CLOSE_tradinglatino_strategy_emas_short_advice", "", location = location.top)
// plotchar((sqzmom_bcolor == color.green), "BUY_CLOSE_sqmom_bcolor equals green", "", location = location.top)
// plotchar(buy_normal_mode, "BUY_CLOSE_normal_mode", "", location = location.top)
// plotchar(bounce_back_mode_buy_close_advice, "BUY_CLOSE_bounce_back_mode_advice", "", location = location.top)
// plotchar(vp_recent_vpvr_vpoc_price, "BUY_CLOSE_vp_recent_vpvr_vpoc_price", "", location = location.top)
// 
// plotchar(ema10_1d, "ema10_1d", "", location = location.top)
// plotchar(ema55_1d, "ema55_1d", "", location = location.top)
// 
// plotchar(price_is_in_range, "price_is_in_range", "", location = location.top)
// 
// plotchar(adx_sig, "Current ADX", "", location = location.top)
// Debug strategy variables - END
// Dynamic Trailing Take Profit being constant during an order logic
// if ((old_inside_a_buy_order and inside_a_buy_order) or (old_inside_a_sell_order and inside_a_sell_order))
//     constant_trailing_take_profit_percentage_trigger := trailing_take_profit_percentage_trigger
//     constant_trailing_take_profit_percentage := trailing_take_profit_percentage
// else
//     constant_trailing_take_profit_percentage_trigger := new_trailing_take_profit_percentage_trigger
//     constant_trailing_take_profit_percentage := new_trailing_take_profit_percentage
if (not ((old_inside_a_buy_order and inside_a_buy_order) or (old_inside_a_sell_order and inside_a_sell_order)))
    constant_trailing_take_profit_percentage_trigger := new_trailing_take_profit_percentage_trigger
    constant_trailing_take_profit_percentage := new_trailing_take_profit_percentage
// Custom take profit and stop loss
TP_B = position_price * (1 + TP)
TP_S = position_price * (1 - TP)
float SL_B = na
float SL_S = na
// enable_dynamic_stop_loss being true or false is handle with the same piece of code
// I'm not sure that pyramiding=0 ensures that an exit order is scaled (and thus modified) so let's keep this here
float constant_buy_SL = na
if (old_inside_a_buy_order and inside_a_buy_order)
    constant_buy_SL := buy_SL
else
    constant_buy_SL := new_buy_SL
// I'm not sure that pyramiding=0 ensures that an exit order is scaled (and thus modified) so let's keep this here
float constant_sell_SL = na
if (old_inside_a_sell_order and inside_a_sell_order)
    constant_sell_SL := sell_SL
else
    constant_sell_SL := new_sell_SL
if na(constant_buy_SL)
    SL_B := na
else
    SL_B := position_price * (1 - constant_buy_SL)
if na(constant_sell_SL)
    SL_S := na
else
    SL_S := position_price * (1 + constant_sell_SL)
float entry_quantity = na
float current_capital = strategy.initial_capital + strategy.netprofit
// risk_management_maximum_loss_per_day
var float current_day_entry_quantity = na
current_day_entry_quantity := na
var current_day_loss = 0.0
var current_day_capital = 0.0
var current_day = 0
var day_minutes = get_resolution_bar_minutes('1D')
var bar_minutes = get_resolution_bar_minutes(timeframe.period)
bar_minutes_to_now = bar_index * bar_minutes
current_day := floor (bar_minutes_to_now / day_minutes)
// risk_management_maximum_loss_per_week
var float current_week_entry_quantity = na
current_week_entry_quantity := na
var current_week_loss = 0.0
var current_week_capital = 0.0
var current_week = 0
var week_minutes = get_resolution_bar_minutes('1W')
current_week := floor (bar_minutes_to_now / week_minutes)
// risk_management_maximum_loss_per_month
var float current_month_entry_quantity = na
current_month_entry_quantity := na
var current_month_loss = 0.0
var current_month_capital = 0.0
var current_month = 0
var month_minutes = get_resolution_bar_minutes('1M')
current_month := floor (bar_minutes_to_now / month_minutes)
float order_SL = na
if BUY
    order_SL := constant_buy_SL
else
    order_SL := constant_sell_SL
float tmp_entry_quantity = na
if (risk_management_type == _SAFE_)
    // Safe means we stick to the original initial capital
    // to enforce our risk management policy
    tmp_entry_quantity := (strategy.initial_capital * risk_management_maximum_loss_per_trade) / order_SL
else if (risk_management_type == _SCOMPOUND_)
    // Safe compound means that we are gambling everything we have
    // but we try to follow risk management rules
    tmp_entry_quantity:= (current_capital * risk_management_maximum_loss_per_trade) / order_SL
else if (risk_management_type == _UCOMPOUND_)
    // Unsafe compound means that we are gambling always everything we have
    tmp_entry_quantity := current_capital
if (tmp_entry_quantity > current_capital)
    // Avoid being stuck when numbers don't match
    entry_quantity := current_capital
else
    entry_quantity := tmp_entry_quantity
// DAY
if (current_day[1] != current_day)
    current_day_loss := 0.0
    current_day_capital := current_capital
else
    if (current_capital < current_day_capital)
        current_day_loss := current_day_capital - current_capital
    else
        current_day_loss := 0.0
    tmp_current_day_loss_perone = current_day_loss / current_day_capital
    if (tmp_current_day_loss_perone >= risk_management_maximum_loss_per_day)
        current_day_entry_quantity:= 0.0 // Avoid entering a position
// WEEK
if (current_week[1] != current_week)
    current_week_loss := 0.0
    current_week_capital := current_capital
else
    if (current_capital < current_week_capital)
        current_week_loss := current_week_capital - current_capital
    else
        current_week_loss := 0.0
    tmp_current_week_loss_perone = current_week_loss / current_week_capital
    if (tmp_current_week_loss_perone >= risk_management_maximum_loss_per_week)
        current_week_entry_quantity:= 0.0 // Avoid entering a position
// MONTH
if (current_month[1] != current_month)
    current_month_loss := 0.0
    current_month_capital := current_capital
else
    if (current_capital < current_month_capital)
        current_month_loss := current_month_capital - current_capital
    else
        current_month_loss := 0.0
    tmp_current_month_loss_perone = current_month_loss / current_month_capital
    if (tmp_current_month_loss_perone >= risk_management_maximum_loss_per_month)
        current_month_entry_quantity:= 0.0 // Avoid entering a position
// Avoid to enter a position overall logic
if ( (not na(current_day_entry_quantity)) or (not na(current_week_entry_quantity)) or (not na(current_month_entry_quantity)) )
    entry_quantity:= 0.0
if enable_raw_testing
    entry_quantity:= raw_testing_quantity
float entry_quantity_contracts_reducer = 0.99
contract_multiplier = get_contract_multiplier(contract_maximum_decimal_number)
// We assume the current price is current bar close
entry_quantity_contracts = (floor(((entry_quantity / close) * entry_quantity_contracts_reducer) * contract_multiplier) / contract_multiplier)
entry_quantity_contracts_usdt = entry_quantity_contracts * (close)
plotchar(strategy.initial_capital, "strategy.initial_capital", "", location = location.top)
plotchar(strategy.netprofit, "strategy.netprofit", "", location = location.top)
plotchar(entry_quantity, "entry_quantity", "", location = location.top)
// plotchar((contract_multiplier), "contract_multiplier", "", location = location.top)
// plotchar(entry_quantity_contracts_reducer, "entry_quantity_contracts_reducer", "", location = location.top)
plotchar(current_day_loss, "current_day_loss", "", location = location.top)
plotchar(((current_day_loss / current_day_capital) * 100 ), "current_day_loss_percent", "", location = location.top)
plotchar(current_day_capital, "current_day_capital", "", location = location.top)
plotchar(current_week_capital, "current_week_capital", "", location = location.top)
plotchar(current_month_capital, "current_month_capital", "", location = location.top)
plotchar(current_capital, "current_capital", "", location = location.top)
plotchar(current_week_loss, "current_week_loss", "", location = location.top)
plotchar(((current_week_loss / current_week_capital) * 100 ), "current_week_loss_percent", "", location = location.top)
plotchar(current_month_loss, "current_month_loss", "", location = location.top)
plotchar(((current_month_loss / current_month_capital) * 100 ), "current_month_loss_percent", "", location = location.top)
var float tmp_position_before_opening_order = na
if (Type == _L_)
    if BUY
        tmp_position_before_opening_order := strategy.position_avg_price
        tmp_order_alert_message := get_zignaly_long_alert_message(entry_quantity_contracts_usdt, current_capital)
        tmp_order_comment := get_order_comment("entry", strategy.long, tmp_order_alert_message)
        strategy.entry("[B]", strategy.long, qty=entry_quantity_contracts, alert_message=tmp_order_alert_message, comment=tmp_order_comment)
        if (na(tmp_position_before_opening_order)) // bar_index should only be saved when there is no order opened
            buy_order_open_bar_index := bar_index + 1
        if (not inside_a_buy_order)
            buy_SL := new_buy_SL
        inside_a_buy_order := true
        0 // Workaround for making every if branch to return the same type of value
    else if BUY_CLOSE
        tmp_order_comment := get_order_comment("close", strategy.long, get_zignaly_long_close_alert_message())
        strategy.close("[B]", alert_message=get_zignaly_long_close_alert_message(), comment=tmp_order_comment)
        inside_a_buy_order := false
        0 // Workaround for making every if branch to return the same type of value
if (Type == _S_)
    if SELL
        tmp_position_before_opening_order := strategy.position_avg_price
        tmp_order_alert_message := get_zignaly_short_alert_message(entry_quantity_contracts_usdt, current_capital)
        tmp_order_comment := get_order_comment("entry", strategy.short, tmp_order_alert_message)
        strategy.entry("[S]", strategy.short, qty=entry_quantity_contracts, alert_message=tmp_order_alert_message, comment=tmp_order_comment)
        if (na(tmp_position_before_opening_order)) // bar_index should only be saved when there is no order opened
            sell_order_open_bar_index := bar_index + 1
        if (not inside_a_sell_order)
            sell_SL := new_sell_SL
        inside_a_sell_order := true
        0 // Workaround for making every if branch to return the same type of value
    else if SELL_CLOSE
        tmp_order_comment := get_order_comment("close", strategy.short, get_zignaly_short_close_alert_message())
        strategy.close("[S]", alert_message=get_zignaly_short_close_alert_message(), comment=tmp_order_comment)
        inside_a_sell_order := false
        0 // Workaround for making every if branch to return the same type of value
if (Type == L_S)
// Asumption: Above we have:
// if BUY_CLOSE
//    BUY := false
// if SELL_CLOSE
//    SELL := false
    // BUY and SELL cannot be true at the same time
    // Anyways we will take it into account
    if (BUY == true) and (SELL == true)
        BUY := true
        SELL := false
        SELL_CLOSE := true
    if BUY
        tmp_position_before_opening_order := strategy.position_avg_price
        tmp_order_alert_message := get_zignaly_long_alert_message(entry_quantity_contracts_usdt, current_capital)
        tmp_order_comment := get_order_comment("entry", strategy.long, tmp_order_alert_message)
        strategy.entry("[B]", strategy.long, qty=entry_quantity_contracts, alert_message=tmp_order_alert_message, comment=tmp_order_comment)
        if (na(tmp_position_before_opening_order)) // bar_index should only be saved when there is no order opened
            buy_order_open_bar_index := bar_index + 1
        if (not inside_a_buy_order)
            buy_SL := new_buy_SL
        inside_a_buy_order := true
    if BUY_CLOSE
        tmp_order_comment := get_order_comment("close", strategy.long, get_zignaly_long_close_alert_message())
        strategy.close("[B]", alert_message=get_zignaly_long_close_alert_message(), comment=tmp_order_comment)
        inside_a_buy_order := false
    if SELL
        tmp_position_before_opening_order := strategy.position_avg_price
        tmp_order_alert_message := get_zignaly_short_alert_message(entry_quantity_contracts_usdt, current_capital)
        tmp_order_comment := get_order_comment("entry", strategy.short, tmp_order_alert_message)
        strategy.entry("[S]", strategy.short, qty=entry_quantity_contracts, alert_message=tmp_order_alert_message, comment=tmp_order_comment)
        if (na(tmp_position_before_opening_order)) // bar_index should only be saved when there is no order opened
            sell_order_open_bar_index := bar_index + 1
        if (not inside_a_sell_order)
            sell_SL := new_sell_SL
        inside_a_sell_order := true
    if SELL_CLOSE
        tmp_order_comment := get_order_comment("close", strategy.short, get_zignaly_short_close_alert_message())
        strategy.close("[S]", alert_message=get_zignaly_short_close_alert_message(), comment=tmp_order_comment)
        inside_a_sell_order := false
float buy_trailing_take_profit_price = na
float buy_trailing_take_profit_points = na
float buy_trailing_take_profit_offset = na
float sell_trailing_take_profit_price = na
float sell_trailing_take_profit_points = na
float sell_trailing_take_profit_offset = na
// Calculate trailing_take_profit_offset based on tick units
buy_tmp_ttp_base_value = position_price * (1 + constant_trailing_take_profit_percentage_trigger)
buy_tmp_ttp_top_value = buy_tmp_ttp_base_value * (1 + constant_trailing_take_profit_percentage)
buy_trailing_take_profit_offset_float = buy_tmp_ttp_top_value - buy_tmp_ttp_base_value
float buy_trailing_take_profit_offset_tick = floor (buy_trailing_take_profit_offset_float / syminfo.mintick)
sell_tmp_ttp_base_value = position_price * (1 - constant_trailing_take_profit_percentage_trigger)
sell_tmp_ttp_bottom_value = sell_tmp_ttp_base_value * (1 - constant_trailing_take_profit_percentage)
sell_trailing_take_profit_offset_float = sell_tmp_ttp_base_value - sell_tmp_ttp_bottom_value
float sell_trailing_take_profit_offset_tick = floor (sell_trailing_take_profit_offset_float / syminfo.mintick)
if enable_trailing_take_profit_percentage
    buy_trailing_take_profit_price := position_price * (1 + constant_trailing_take_profit_percentage_trigger)
    buy_trailing_take_profit_offset := buy_trailing_take_profit_offset_tick
    sell_trailing_take_profit_price := position_price * (1 - constant_trailing_take_profit_percentage_trigger)
    sell_trailing_take_profit_offset := sell_trailing_take_profit_offset_tick
else
    buy_trailing_take_profit_price := na
    buy_trailing_take_profit_offset := na
    sell_trailing_take_profit_price := na
    sell_trailing_take_profit_offset := na
// This might trigger additional close orders than needed in zignaly
// Better close an existing order twice than regreting zignaly not having closed it.
tmp_order_comment := get_order_comment("close", strategy.long, get_zignaly_long_close_alert_message())
strategy.exit("[SL/TP]", "[B]", stop= sl ? SL_B : na, limit= tp ? TP_B : na, trail_price= buy_trailing_take_profit_price, trail_offset = buy_trailing_take_profit_offset, alert_message=get_zignaly_long_close_alert_message(), comment=tmp_order_comment)
tmp_order_comment := get_order_comment("close", strategy.short, get_zignaly_short_close_alert_message())
strategy.exit("[SL/TP]", "[S]", stop= sl ? SL_S : na, limit= tp ? TP_S : na, trail_price= sell_trailing_take_profit_price, trail_offset = sell_trailing_take_profit_offset, alert_message=get_zignaly_short_close_alert_message(), comment=tmp_order_comment)
// Dynamic stop loss management Debug variables - BEGIN
plotchar(strategy.position_avg_price, "strategy.position_avg_price", "", location = location.top)
plotchar(strategy.position_size, "strategy.position_size", "", location = location.top)
plotchar(position_price, "position_price", "", location = location.top)
plotchar(buy_SL * 100.0, "BUY_buy_SL_percent", "", location = location.top)
plotchar(new_buy_SL * 100.0, "BUY_new_buy_SL_percent", "", location = location.top)
plotchar(sell_SL * 100.0, "SELL_sell_SL_percent", "", location = location.top)
plotchar(new_sell_SL * 100.0, "SELL_new_sell_SL_percent", "", location = location.top)
// plotchar(SL_B, "SL_B", "", location = location.top)
// plotchar(SL_S, "SL_S", "", location = location.top)
plotchar(constant_buy_SL * 100.0, "constant_buy_SL_percent", "", location = location.top)
plotchar(constant_sell_SL * 100.0, "constant_sell_SL_percent", "", location = location.top)
// Dynamic stop loss management Debug variables - END
// Debug - Angles - BEGIN
// [gx1,gy1,gx2,gy2] = fun_linear_regression_points(adx_sig, adx_steepness_periods_number)
// gline_slope = fun_line_slope(gx1,gy1,gx2,gy2)
// gline_angle = fun_slope_angle(gline_slope)
// 
// 
// plotchar(gline_angle, "gline_angle", "", location = location.top)
// plotchar(adx_minimum_steepness_entry, "adx_minimum_steepness_entry", "", location = location.top)
// Debug - Angles - END
Expand (3184 lines)