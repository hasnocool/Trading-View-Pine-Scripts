Script Name: Portfolio Performance - Effects of Rebalancing
Author: Skywalking2874
Description: Function:
- Can be used to evaluate the performance of a portfolio containing 2 assets over a set time interval
- Shows the % return of the portfolio over the time interval defined by the user
- Includes a threshold rebalancing algorithm to show the effects that rebalancing has on the portfolio over the long term
- Created to evaluate of the performance of...
PineScript code:

Pine Script™ strategy
Portfolio Performance - Effects of Rebalancing
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Skywalking2874
//@version=5
strategy("Portfolio Performance - Effects of Rebalancing", overlay=false, margin_long=100, margin_short=100, process_orders_on_close=true, max_bars_back=5000)
//****************************************************************** Define the time interval ******************************************************************//
entrytime = input.time(defval=timestamp("2021-12-16"), title="Entry Time", tooltip="Enter the starting date", confirm=true, group="Time Interval")
exittime = input.time(defval=timestamp("2021-12-17"), title="Exit Time", tooltip="Enter the ending date", confirm=true, group="Time Interval")
entrycondition = time >= entrytime and time < exittime
exitcondition = time >= exittime
strategy.entry("Buy", strategy.long, qty=100000/close, when=entrycondition)
strategy.close_all(when = exitcondition)
//****************************************************************** Define the second asset ******************************************************************//
second_asset_prefix = input.string(defval = "BATS", title = "Prefix", group="Second Asset", inline="Asset2")
second_asset_ticker = input.string(defval = "AGG", title="Ticker", group="Second Asset", inline="Asset2", tooltip="Input the prefix and ticker of the second asset that makes up the portfolio")
second_ticker = ticker.new(prefix = second_asset_prefix, ticker = second_asset_ticker, session = session.regular, adjustment = adjustment.dividends)
second_symbol = request.security(second_ticker, "D", close)
//****************************************************************** Define the portfolio weights ******************************************************************//
initial_investment = input.float(defval=100000, title="Initial Investment ($)", minval=0, step=0.1, tooltip="Input the dollar value of the inital investment", group="Portfolio")
portfolio_weight1 = input.float(defval=80.00, title="First Weight (%)", minval=0, maxval=100, step=0.1, inline="Asset1", group="Portfolio")/100.00
portfolio_weight2 = input.float(defval=20.00, title="Second Weight (%)", minval=0, maxval=100, step=0.1, tooltip="Input the weight of each asset relative to the portfolio", inline="Asset1", group="Portfolio")/100.00
//****************************************************************** Define the rebalancing thresholds ******************************************************************************//
high_threshold1 = input.float(defval=1, title="High (%)", minval=0.0, maxval=1000.00, step=0.1, tooltip="Input the low and high rebalancing thresholds", inline="threshold1", group="threshold 1")/100.00
low_threshold1 = input.float(defval=1, title="Low (%)", minval=0.0, maxval=1000.00, step=0.1, inline="threshold1", group="threshold 1")/100.00
high_threshold2 = input.float(defval=2.5, title="High (%)", minval=0.0, maxval=1000.00, step=0.1, tooltip="Input the low and high rebalancing thresholds", inline="threshold2", group="threshold 2")/100.00
low_threshold2 = input.float(defval=2.5, title="Low (%)", minval=0.0, maxval=1000.00, step=0.1, inline="threshold2", group="threshold 2")/100.00
high_threshold3 = input.float(defval=5, title="High (%)", minval=0.0, maxval=1000.00, step=0.1, tooltip="Input the low and high rebalancing thresholds", inline="threshold3", group="threshold 3")/100.00
low_threshold3 = input.float(defval=5, title="Low (%)", minval=0.0, maxval=1000.00, step=0.1, inline="threshold3", group="threshold 3")/100.00
high_threshold4 = input.float(defval=10, title="High (%)", minval=0.0, maxval=1000.00, step=0.1, tooltip="Input the low and high rebalancing thresholds", inline="threshold4", group="threshold 4")/100.00
low_threshold4 = input.float(defval=10, title="Low (%)", minval=0.0, maxval=1000.00, step=0.1, inline="threshold4", group="threshold 4")/100.00
high_threshold5 = input.float(defval=15, title="High (%)", minval=0.0, maxval=1000.00, step=0.1, tooltip="Input the low and high rebalancing thresholds", inline="threshold5", group="threshold 5")/100.00
low_threshold5 = input.float(defval=15, title="Low (%)", minval=0.0, maxval=1000.00, step=0.1, inline="threshold5", group="threshold 5")/100.00
high_threshold6 = input.float(defval=20, title="High (%)", minval=0.0, maxval=1000.00, step=0.1, tooltip="Input the low and high rebalancing thresholds", inline="threshold6", group="threshold 6")/100.00
low_threshold6 = input.float(defval=20, title="Low (%)", minval=0.0, maxval=1000.00, step=0.1, inline="threshold6", group="threshold 6")/100.00
high_threshold7 = input.float(defval=30, title="High (%)", minval=0.0, maxval=1000.00, step=0.1, tooltip="Input the low and high rebalancing thresholds", inline="threshold7", group="threshold 7")/100.00
low_threshold7 = input.float(defval=30, title="Low (%)", minval=0.0, maxval=1000.00, step=0.1, inline="threshold7", group="threshold 7")/100.00
//****************************************************************** Calculate %Return ******************************************************************//
trade_open_time = time >= strategy.opentrades.entry_time(strategy.opentrades-1) ? strategy.opentrades.entry_time(strategy.opentrades-1) : 2524608000000
bar_count = ta.barssince(time <= trade_open_time)
//threshold group 1
threshold_group_1_asset1_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight1/close[bar_count]) :int(initial_investment*portfolio_weight1/close)
threshold_group_1_asset2_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight2/second_symbol[bar_count]) : int(initial_investment*portfolio_weight2/second_symbol)
threshold_group_1_asset1_current_holdings = threshold_group_1_asset1_initial_holdings
threshold_group_1_asset2_current_holdings = threshold_group_1_asset2_initial_holdings
threshold_group_1_asset1_current_holdings := bar_count > 1 ? threshold_group_1_asset1_current_holdings[1] : threshold_group_1_asset1_initial_holdings
threshold_group_1_asset2_current_holdings := bar_count > 1 ? threshold_group_1_asset2_current_holdings[1] : threshold_group_1_asset2_initial_holdings
threshold_group_1_asset1_value = threshold_group_1_asset1_current_holdings*close
threshold_group_1_asset2_value = threshold_group_1_asset2_current_holdings*second_symbol
threshold_group_1_portfolio_value = threshold_group_1_asset1_value + threshold_group_1_asset2_value
threshold_group_1_asset1_weight = threshold_group_1_asset1_value/threshold_group_1_portfolio_value
threshold_group_1_asset2_weight = threshold_group_1_asset2_value/threshold_group_1_portfolio_value
threshold_group_1_delta1 = math.abs(threshold_group_1_asset1_value - (threshold_group_1_portfolio_value * portfolio_weight1))
threshold_group_1_delta2 = math.abs(threshold_group_1_asset2_value - (threshold_group_1_portfolio_value * portfolio_weight2))
threshold_group_1_number_of_assets_to_move1 = int(threshold_group_1_delta1/close)
threshold_group_1_number_of_assets_to_move2 = int(threshold_group_1_delta2/second_symbol)
if threshold_group_1_asset1_weight >= (portfolio_weight1+high_threshold1)
    threshold_group_1_asset1_current_holdings:= threshold_group_1_asset1_current_holdings - threshold_group_1_number_of_assets_to_move1
    threshold_group_1_asset2_current_holdings:= threshold_group_1_asset2_current_holdings + threshold_group_1_number_of_assets_to_move2
else if threshold_group_1_asset1_weight <= (portfolio_weight1-low_threshold1)
    threshold_group_1_asset1_current_holdings:= threshold_group_1_asset1_current_holdings + threshold_group_1_number_of_assets_to_move1
    threshold_group_1_asset2_current_holdings:= threshold_group_1_asset2_current_holdings - threshold_group_1_number_of_assets_to_move2
else 
    threshold_group_1_asset1_current_holdings:= threshold_group_1_asset1_current_holdings
    threshold_group_1_asset2_current_holdings:= threshold_group_1_asset2_current_holdings
threshold_group_1_portfolio_percent_return = ((threshold_group_1_portfolio_value - threshold_group_1_portfolio_value[bar_count])/threshold_group_1_portfolio_value[bar_count])*100
//threshold group 2
threshold_group_2_asset1_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight1/close[bar_count]) :int(initial_investment*portfolio_weight1/close)
threshold_group_2_asset2_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight2/second_symbol[bar_count]) : int(initial_investment*portfolio_weight2/second_symbol)
threshold_group_2_asset1_current_holdings = threshold_group_2_asset1_initial_holdings
threshold_group_2_asset2_current_holdings = threshold_group_2_asset2_initial_holdings
threshold_group_2_asset1_current_holdings := bar_count > 1 ? threshold_group_2_asset1_current_holdings[1] : threshold_group_2_asset1_initial_holdings
threshold_group_2_asset2_current_holdings := bar_count > 1 ? threshold_group_2_asset2_current_holdings[1] : threshold_group_2_asset2_initial_holdings
threshold_group_2_asset1_value = threshold_group_2_asset1_current_holdings*close
threshold_group_2_asset2_value = threshold_group_2_asset2_current_holdings*second_symbol
threshold_group_2_portfolio_value = threshold_group_2_asset1_value + threshold_group_2_asset2_value
threshold_group_2_asset1_weight = threshold_group_2_asset1_value/threshold_group_2_portfolio_value
threshold_group_2_asset2_weight = threshold_group_2_asset2_value/threshold_group_2_portfolio_value
threshold_group_2_delta1 = math.abs(threshold_group_2_asset1_value - (threshold_group_2_portfolio_value * portfolio_weight1))
threshold_group_2_delta2 = math.abs(threshold_group_2_asset2_value - (threshold_group_2_portfolio_value * portfolio_weight2))
threshold_group_2_number_of_assets_to_move1 = int(threshold_group_2_delta1/close)
threshold_group_2_number_of_assets_to_move2 = int(threshold_group_2_delta2/second_symbol)
if threshold_group_2_asset1_weight >= (portfolio_weight1+high_threshold2)
    threshold_group_2_asset1_current_holdings:= threshold_group_2_asset1_current_holdings - threshold_group_2_number_of_assets_to_move1
    threshold_group_2_asset2_current_holdings:= threshold_group_2_asset2_current_holdings + threshold_group_2_number_of_assets_to_move2
else if threshold_group_2_asset1_weight <= (portfolio_weight1-low_threshold2)
    threshold_group_2_asset1_current_holdings:= threshold_group_2_asset1_current_holdings + threshold_group_2_number_of_assets_to_move1
    threshold_group_2_asset2_current_holdings:= threshold_group_2_asset2_current_holdings - threshold_group_2_number_of_assets_to_move2
else 
    threshold_group_2_asset1_current_holdings:= threshold_group_2_asset1_current_holdings
    threshold_group_2_asset2_current_holdings:= threshold_group_2_asset2_current_holdings
threshold_group_2_portfolio_percent_return = ((threshold_group_2_portfolio_value - threshold_group_2_portfolio_value[bar_count])/threshold_group_2_portfolio_value[bar_count])*100
//threshold group 3
threshold_group_3_asset1_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight1/close[bar_count]) :int(initial_investment*portfolio_weight1/close)
threshold_group_3_asset2_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight2/second_symbol[bar_count]) : int(initial_investment*portfolio_weight2/second_symbol)
threshold_group_3_asset1_current_holdings = threshold_group_3_asset1_initial_holdings
threshold_group_3_asset2_current_holdings = threshold_group_3_asset2_initial_holdings
threshold_group_3_asset1_current_holdings := bar_count > 1 ? threshold_group_3_asset1_current_holdings[1] : threshold_group_3_asset1_initial_holdings
threshold_group_3_asset2_current_holdings := bar_count > 1 ? threshold_group_3_asset2_current_holdings[1] : threshold_group_3_asset2_initial_holdings
threshold_group_3_asset1_value = threshold_group_3_asset1_current_holdings*close
threshold_group_3_asset2_value = threshold_group_3_asset2_current_holdings*second_symbol
threshold_group_3_portfolio_value = threshold_group_3_asset1_value + threshold_group_3_asset2_value
threshold_group_3_asset1_weight = threshold_group_3_asset1_value/threshold_group_3_portfolio_value
threshold_group_3_asset2_weight = threshold_group_3_asset2_value/threshold_group_3_portfolio_value
threshold_group_3_delta1 = math.abs(threshold_group_3_asset1_value - (threshold_group_3_portfolio_value * portfolio_weight1))
threshold_group_3_delta2 = math.abs(threshold_group_3_asset2_value - (threshold_group_3_portfolio_value * portfolio_weight2))
threshold_group_3_number_of_assets_to_move1 = int(threshold_group_3_delta1/close)
threshold_group_3_number_of_assets_to_move2 = int(threshold_group_3_delta2/second_symbol)
if threshold_group_3_asset1_weight >= (portfolio_weight1+high_threshold3)
    threshold_group_3_asset1_current_holdings:= threshold_group_3_asset1_current_holdings - threshold_group_3_number_of_assets_to_move1
    threshold_group_3_asset2_current_holdings:= threshold_group_3_asset2_current_holdings + threshold_group_3_number_of_assets_to_move2
else if threshold_group_3_asset1_weight <= (portfolio_weight1-low_threshold3)
    threshold_group_3_asset1_current_holdings:= threshold_group_3_asset1_current_holdings + threshold_group_3_number_of_assets_to_move1
    threshold_group_3_asset2_current_holdings:= threshold_group_3_asset2_current_holdings - threshold_group_3_number_of_assets_to_move2
else 
    threshold_group_3_asset1_current_holdings:= threshold_group_3_asset1_current_holdings
    threshold_group_3_asset2_current_holdings:= threshold_group_3_asset2_current_holdings
threshold_group_3_portfolio_percent_return = ((threshold_group_3_portfolio_value - threshold_group_3_portfolio_value[bar_count])/threshold_group_3_portfolio_value[bar_count])*100
//threshold group 4
threshold_group_4_asset1_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight1/close[bar_count]) :int(initial_investment*portfolio_weight1/close)
threshold_group_4_asset2_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight2/second_symbol[bar_count]) : int(initial_investment*portfolio_weight2/second_symbol)
threshold_group_4_asset1_current_holdings = threshold_group_4_asset1_initial_holdings
threshold_group_4_asset2_current_holdings = threshold_group_4_asset2_initial_holdings
threshold_group_4_asset1_current_holdings := bar_count > 1 ? threshold_group_4_asset1_current_holdings[1] : threshold_group_4_asset1_initial_holdings
threshold_group_4_asset2_current_holdings := bar_count > 1 ? threshold_group_4_asset2_current_holdings[1] : threshold_group_4_asset2_initial_holdings
threshold_group_4_asset1_value = threshold_group_4_asset1_current_holdings*close
threshold_group_4_asset2_value = threshold_group_4_asset2_current_holdings*second_symbol
threshold_group_4_portfolio_value = threshold_group_4_asset1_value + threshold_group_4_asset2_value
threshold_group_4_asset1_weight = threshold_group_4_asset1_value/threshold_group_4_portfolio_value
threshold_group_4_asset2_weight = threshold_group_4_asset2_value/threshold_group_4_portfolio_value
threshold_group_4_delta1 = math.abs(threshold_group_4_asset1_value - (threshold_group_4_portfolio_value * portfolio_weight1))
threshold_group_4_delta2 = math.abs(threshold_group_4_asset2_value - (threshold_group_4_portfolio_value * portfolio_weight2))
threshold_group_4_number_of_assets_to_move1 = int(threshold_group_4_delta1/close)
threshold_group_4_number_of_assets_to_move2 = int(threshold_group_4_delta2/second_symbol)
if threshold_group_4_asset1_weight >= (portfolio_weight1+high_threshold4)
    threshold_group_4_asset1_current_holdings:= threshold_group_4_asset1_current_holdings - threshold_group_4_number_of_assets_to_move1
    threshold_group_4_asset2_current_holdings:= threshold_group_4_asset2_current_holdings + threshold_group_4_number_of_assets_to_move2
else if threshold_group_4_asset1_weight <= (portfolio_weight1-low_threshold4)
    threshold_group_4_asset1_current_holdings:= threshold_group_4_asset1_current_holdings + threshold_group_4_number_of_assets_to_move1
    threshold_group_4_asset2_current_holdings:= threshold_group_4_asset2_current_holdings - threshold_group_4_number_of_assets_to_move2
else 
    threshold_group_4_asset1_current_holdings:= threshold_group_4_asset1_current_holdings
    threshold_group_4_asset2_current_holdings:= threshold_group_4_asset2_current_holdings
threshold_group_4_portfolio_percent_return = ((threshold_group_4_portfolio_value - threshold_group_4_portfolio_value[bar_count])/threshold_group_4_portfolio_value[bar_count])*100
//threshold group 5
threshold_group_5_asset1_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight1/close[bar_count]) :int(initial_investment*portfolio_weight1/close)
threshold_group_5_asset2_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight2/second_symbol[bar_count]) : int(initial_investment*portfolio_weight2/second_symbol)
threshold_group_5_asset1_current_holdings = threshold_group_5_asset1_initial_holdings
threshold_group_5_asset2_current_holdings = threshold_group_5_asset2_initial_holdings
threshold_group_5_asset1_current_holdings := bar_count > 1 ? threshold_group_5_asset1_current_holdings[1] : threshold_group_5_asset1_initial_holdings
threshold_group_5_asset2_current_holdings := bar_count > 1 ? threshold_group_5_asset2_current_holdings[1] : threshold_group_5_asset2_initial_holdings
threshold_group_5_asset1_value = threshold_group_5_asset1_current_holdings*close
threshold_group_5_asset2_value = threshold_group_5_asset2_current_holdings*second_symbol
threshold_group_5_portfolio_value = threshold_group_5_asset1_value + threshold_group_5_asset2_value
threshold_group_5_asset1_weight = threshold_group_5_asset1_value/threshold_group_5_portfolio_value
threshold_group_5_asset2_weight = threshold_group_5_asset2_value/threshold_group_5_portfolio_value
threshold_group_5_delta1 = math.abs(threshold_group_5_asset1_value - (threshold_group_5_portfolio_value * portfolio_weight1))
threshold_group_5_delta2 = math.abs(threshold_group_5_asset2_value - (threshold_group_5_portfolio_value * portfolio_weight2))
threshold_group_5_number_of_assets_to_move1 = int(threshold_group_5_delta1/close)
threshold_group_5_number_of_assets_to_move2 = int(threshold_group_5_delta2/second_symbol)
if threshold_group_5_asset1_weight >= (portfolio_weight1+high_threshold5)
    threshold_group_5_asset1_current_holdings:= threshold_group_5_asset1_current_holdings - threshold_group_5_number_of_assets_to_move1
    threshold_group_5_asset2_current_holdings:= threshold_group_5_asset2_current_holdings + threshold_group_5_number_of_assets_to_move2
else if threshold_group_5_asset1_weight <= (portfolio_weight1-low_threshold5)
    threshold_group_5_asset1_current_holdings:= threshold_group_5_asset1_current_holdings + threshold_group_5_number_of_assets_to_move1
    threshold_group_5_asset2_current_holdings:= threshold_group_5_asset2_current_holdings - threshold_group_5_number_of_assets_to_move2
else 
    threshold_group_5_asset1_current_holdings:= threshold_group_5_asset1_current_holdings
    threshold_group_5_asset2_current_holdings:= threshold_group_5_asset2_current_holdings
threshold_group_5_portfolio_percent_return = ((threshold_group_5_portfolio_value - threshold_group_5_portfolio_value[bar_count])/threshold_group_5_portfolio_value[bar_count])*100
//threshold group 6
threshold_group_6_asset1_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight1/close[bar_count]) :int(initial_investment*portfolio_weight1/close)
threshold_group_6_asset2_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight2/second_symbol[bar_count]) : int(initial_investment*portfolio_weight2/second_symbol)
threshold_group_6_asset1_current_holdings = threshold_group_6_asset1_initial_holdings
threshold_group_6_asset2_current_holdings = threshold_group_6_asset2_initial_holdings
threshold_group_6_asset1_current_holdings := bar_count > 1 ? threshold_group_6_asset1_current_holdings[1] : threshold_group_6_asset1_initial_holdings
threshold_group_6_asset2_current_holdings := bar_count > 1 ? threshold_group_6_asset2_current_holdings[1] : threshold_group_6_asset2_initial_holdings
threshold_group_6_asset1_value = threshold_group_6_asset1_current_holdings*close
threshold_group_6_asset2_value = threshold_group_6_asset2_current_holdings*second_symbol
threshold_group_6_portfolio_value = threshold_group_6_asset1_value + threshold_group_6_asset2_value
threshold_group_6_asset1_weight = threshold_group_6_asset1_value/threshold_group_6_portfolio_value
threshold_group_6_asset2_weight = threshold_group_6_asset2_value/threshold_group_6_portfolio_value
threshold_group_6_delta1 = math.abs(threshold_group_6_asset1_value - (threshold_group_6_portfolio_value * portfolio_weight1))
threshold_group_6_delta2 = math.abs(threshold_group_6_asset2_value - (threshold_group_6_portfolio_value * portfolio_weight2))
threshold_group_6_number_of_assets_to_move1 = int(threshold_group_6_delta1/close)
threshold_group_6_number_of_assets_to_move2 = int(threshold_group_6_delta2/second_symbol)
if threshold_group_6_asset1_weight >= (portfolio_weight1+high_threshold6)
    threshold_group_6_asset1_current_holdings:= threshold_group_6_asset1_current_holdings - threshold_group_6_number_of_assets_to_move1
    threshold_group_6_asset2_current_holdings:= threshold_group_6_asset2_current_holdings + threshold_group_6_number_of_assets_to_move2
else if threshold_group_6_asset1_weight <= (portfolio_weight1-low_threshold6)
    threshold_group_6_asset1_current_holdings:= threshold_group_6_asset1_current_holdings + threshold_group_6_number_of_assets_to_move1
    threshold_group_6_asset2_current_holdings:= threshold_group_6_asset2_current_holdings - threshold_group_6_number_of_assets_to_move2
else 
    threshold_group_6_asset1_current_holdings:= threshold_group_6_asset1_current_holdings
    threshold_group_6_asset2_current_holdings:= threshold_group_6_asset2_current_holdings
threshold_group_6_portfolio_percent_return = ((threshold_group_6_portfolio_value - threshold_group_6_portfolio_value[bar_count])/threshold_group_6_portfolio_value[bar_count])*100
//threshold group 7
threshold_group_7_asset1_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight1/close[bar_count]) :int(initial_investment*portfolio_weight1/close)
threshold_group_7_asset2_initial_holdings = bar_count > 0 ? int(initial_investment*portfolio_weight2/second_symbol[bar_count]) : int(initial_investment*portfolio_weight2/second_symbol)
threshold_group_7_asset1_current_holdings = threshold_group_7_asset1_initial_holdings
threshold_group_7_asset2_current_holdings = threshold_group_7_asset2_initial_holdings
threshold_group_7_asset1_current_holdings := bar_count > 1 ? threshold_group_7_asset1_current_holdings[1] : threshold_group_7_asset1_initial_holdings
threshold_group_7_asset2_current_holdings := bar_count > 1 ? threshold_group_7_asset2_current_holdings[1] : threshold_group_7_asset2_initial_holdings
threshold_group_7_asset1_value = threshold_group_7_asset1_current_holdings*close
threshold_group_7_asset2_value = threshold_group_7_asset2_current_holdings*second_symbol
threshold_group_7_portfolio_value = threshold_group_7_asset1_value + threshold_group_7_asset2_value
threshold_group_7_asset1_weight = threshold_group_7_asset1_value/threshold_group_7_portfolio_value
threshold_group_7_asset2_weight = threshold_group_7_asset2_value/threshold_group_7_portfolio_value
threshold_group_7_delta1 = math.abs(threshold_group_7_asset1_value - (threshold_group_7_portfolio_value * portfolio_weight1))
threshold_group_7_delta2 = math.abs(threshold_group_7_asset2_value - (threshold_group_7_portfolio_value * portfolio_weight2))
threshold_group_7_number_of_assets_to_move1 = int(threshold_group_7_delta1/close)
threshold_group_7_number_of_assets_to_move2 = int(threshold_group_7_delta2/second_symbol)
if threshold_group_7_asset1_weight >= (portfolio_weight1+high_threshold7)
    threshold_group_7_asset1_current_holdings:= threshold_group_7_asset1_current_holdings - threshold_group_7_number_of_assets_to_move1
    threshold_group_7_asset2_current_holdings:= threshold_group_7_asset2_current_holdings + threshold_group_7_number_of_assets_to_move2
else if threshold_group_7_asset1_weight <= (portfolio_weight1-low_threshold7)
    threshold_group_7_asset1_current_holdings:= threshold_group_7_asset1_current_holdings + threshold_group_7_number_of_assets_to_move1
    threshold_group_7_asset2_current_holdings:= threshold_group_7_asset2_current_holdings - threshold_group_7_number_of_assets_to_move2
else 
    threshold_group_7_asset1_current_holdings:= threshold_group_7_asset1_current_holdings
    threshold_group_7_asset2_current_holdings:= threshold_group_7_asset2_current_holdings
threshold_group_7_portfolio_percent_return = ((threshold_group_7_portfolio_value - threshold_group_7_portfolio_value[bar_count])/threshold_group_7_portfolio_value[bar_count])*100
//Base Asset
percent_return_base_asset = ((close - close[bar_count])/close[bar_count])*100
//****************************************************************** Plot ******************************************************************//
threshold1_return = input.bool(defval=true, title="Plot Threshold 1 Return", group="threshold 1")
threshold2_return = input.bool(defval=true, title="Plot Threshold 2 Return", group="threshold 2")
threshold3_return = input.bool(defval=true, title="Plot Threshold 3 Return", group="threshold 3")
threshold4_return = input.bool(defval=true, title="Plot Threshold 4 Return", group="threshold 4")
threshold5_return = input.bool(defval=true, title="Plot Threshold 5 Return", group="threshold 5")
threshold6_return = input.bool(defval=true, title="Plot Threshold 6 Return", group="threshold 6")
threshold7_return = input.bool(defval=true, title="Plot Threshold 7 Return", group="threshold 7")
trade_close_time = time >= strategy.closedtrades.entry_time(strategy.closedtrades-1) ? strategy.closedtrades.entry_time(strategy.closedtrades-1) : 2524608000000
transparant = color.rgb(0, 0, 0, 100)
//Color Palette 
base_color = time >= trade_open_time ? color.new(#001eff, 0) : transparant
threshold_color1 = time >= trade_open_time ? color.new(#10B22D, 0) : transparant
threshold_color2 = time >= trade_open_time ? color.new(#00FF1E, 0) : transparant
threshold_color3 = time >= trade_open_time ? color.new(#FFFB00, 0) : transparant
threshold_color4 = time >= trade_open_time ? color.new(#ffa900, 0) : transparant
threshold_color5 = time >= trade_open_time ?color.new(#FF6600, 0) : transparant
threshold_color6 = time >= trade_open_time ? color.new(#FF0000, 0) : transparant
threshold_color7 = time >= trade_open_time ? color.new(#9C0000, 0) : transparant
plot(percent_return_base_asset, title="Return of Base Asset", color=base_color)
plot(threshold_group_1_portfolio_percent_return, title="Threshold 1 Percent Return", color=threshold1_return == true ? threshold_color1 : transparant)
plot(threshold_group_2_portfolio_percent_return, title="Threshold 2 Percent Return", color=threshold2_return == true ? threshold_color2 : transparant)
plot(threshold_group_3_portfolio_percent_return, title="Threshold 3 Percent Return", color=threshold3_return == true ? threshold_color3 : transparant)
plot(threshold_group_4_portfolio_percent_return, title="Threshold 4 Percent Return", color=threshold4_return == true ? threshold_color4 : transparant)
plot(threshold_group_5_portfolio_percent_return, title="Threshold 5 Percent Return", color=threshold5_return == true ? threshold_color5 : transparant)
plot(threshold_group_6_portfolio_percent_return, title="Threshold 6 Percent Return", color=threshold6_return == true ? threshold_color6 : transparant)
plot(threshold_group_7_portfolio_percent_return, title="Threshold 7 Percent Return", color=threshold7_return == true ? threshold_color7 : transparant)
Expand (341 lines)