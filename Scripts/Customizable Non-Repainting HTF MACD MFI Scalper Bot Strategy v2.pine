Script Name: Customizable Non-Repainting HTF MACD MFI Scalper Bot Strategy v2
Author: MauricioZuniga
Description: Customizable Non-Repainting HTF MACD MFI Scalper Bot Strategy v2
This script was originally shared by  Wunderbit   as a free open source script for the community to work with.  This is my second published iteration of this idea.

 WHAT THIS SCRIPT DOES: 
It is intended for use on an algorithmic bot trading platform but can be used for scalping and manual...
PineScript code:

Pine Script™ strategy
Customizable Non-Repainting HTF MACD MFI Scalper Bot Strategy v2
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
//(c) Wunderbit Trading 
//Modified by Mauricio Zuniga - Trade at your own risk 
//This script was originally shared on Wunderbit website as a free open source script for the community.
//WHAT THIS SCRIPT DOES:
//   This is a scalping script originally intended to be used on altorightmic bot trading.
//   This strategy is based on the trend-following momentum indicator. It includes the Money Flow index as an additional point for entry. 
//HOW IT DOES IT:
//   It uses a combination of MACD and MFI indicators to create entry signals.  Parameters for each indicator have been surfaced for user configurability.
//   Take profits are fixed, but stop loss uses ATR configuration to minimize losses and close profitably.
//HOW IS MY VERSION ORIGINAL:
//   I started trying to deploy this script myself in my algorithmic tradingg but ran into some issues which I have tried to address in this version.
//   Delayed Signals : The script has been refactored to use a time frame drop down.  The higher time frame can be run on a faster chart (recommended on one minute chart for fastest signal confirmation and relay to algotrading platform.  
//   Repainting Issues : All indicators have been recoded to use the security function that checks to see if the current calculation is in realtime, if it is, then it uses the previous bar for calculation.
//   If you are still experiencing repainting issues based on intended (or non intended use), please provide a report with screenshot and explanation so I can try to address.
//   Filtering :  I have added to additional filters an ABOVE EMA Filter and a BELOW RSI Filter (both can be turned on and off) 
//   Customizable Long and Clos Messages : This allows someone to use the script for algorithmic trading without having to alter code.  It also means you can use one indicator for all of your different alterts required for your bots.
//HOW TO USE IT:
//   Find a pair with high volatility - I have found it works particularly well with 3L and 3S tokens for crypto. although it the limitation is that confrigurations I have found to work typically have low R/R ratio, but very high win rate and profit factor.
//   Ieally set one minute chart for bots, but you can use other charts for manual trading.  The signal will be delayed by one bar but I have found configurations that still test well.
//   Select a time frame in configuration for your indicator calculations. 
//   I like ot use 5 and 15 minutes for scalping scenarios, but I am interested in hearing back from other community memebers.
//   Optimize your indicator without filters (trendFilter and RSI Filter)
//   Use the TrendFilter and RSI Filter to further refine your signals for entry.
// Revision 2.5
// Updated to Pinescript 5
// Changed MA filter to a variant type with customizable timeframe
// Changed RSI filter to customizable time frame and length of RSI 
// 
//@version=5
strategy('Customizable HTF MACD Strategy v2.0'
     , overlay=false
     , pyramiding=0
     , commission_type=strategy.commission.percent
     , commission_value=0.08
     , default_qty_type=strategy.percent_of_equity
     , default_qty_value=100
     , currency=currency.USD
     , calc_on_every_tick=true)
openlongcomment = 'Long In Here'
closelongcomment = 'Close'
openshortcomment = ''  //not used in this strategy
closeshortcommment = ''  //not used in this strategy
//RES
res = input.timeframe(title='Resolution', defval='5', group='Strategy', inline='1')
ribbon_period = input.int(19, 'Period', step=1, group='Strategy', inline='1')
olc = input.string(title='Open Long Comment', defval='', group='Strategy', inline='2')
clc = input.string(title='Close Long Comment', defval='', group='Strategy', inline='2')
if not(olc == '')
    openlongcomment := olc
    openlongcomment
if not(clc == '')
    closelongcomment := clc
    closelongcomment
// FUNCTIONS
Ema(src, p) =>
    ema = 0.
    sf = 2 / (p + 1)
    ema := nz(ema[1] + sf * (src - ema[1]), src)
    ema
Sma(src, p) =>
    a = ta.cum(src)
    (a - a[math.max(p, 0)]) / math.max(p, 0)
Atr(p, res) =>
    atr = 0.
    highHTF = request.security(syminfo.tickerid, res, high[barstate.isrealtime ? 1 : 0])
    lowHTF = request.security(syminfo.tickerid, res, low[barstate.isrealtime ? 1 : 0])
    closeHTF = request.security(syminfo.tickerid, res, close[barstate.isrealtime ? 1 : 0])
    Tr = math.max(highHTF - lowHTF, math.max(math.abs(highHTF - closeHTF[1]), math.abs(lowHTF - closeHTF[1])))
    atr := nz(atr[1] + (Tr - atr[1]) / p, Tr)
    atr
// security wrapper for repeat calls
reso(exp, use, res) =>
    security_1 = request.security(syminfo.tickerid, res, exp[barstate.isrealtime ? 1 : 0], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
    use ? security_1 : exp[barstate.isrealtime ? 1 : 0]
rp_security(_symbol, _res, _src) => request.security(_symbol, _res, _src[barstate.isrealtime ? 1 : 0])[barstate.isrealtime ? 1 : 0]
// Returns MA input selection variant, default to SMA if blank or typo.
variant(type, src, len, offSig, offALMA) =>
    v1 = ta.sma(src, len)  // Simple
    v2 = ta.ema(src, len)  // Exponential
    v3 = 2 * v2 - ta.ema(v2, len)  // Double Exponential
    v4 = 3 * (v2 - ta.ema(v2, len)) + ta.ema(ta.ema(v2, len), len)  // Triple Exponential
    v5 = ta.wma(src, len)  // Weighted
    v6 = ta.vwma(src, len)  // Volume Weighted
    v7 = 0.0
    sma_1 = ta.sma(src, len)  // Smoothed
    v7 := na(v7[1]) ? sma_1 : (v7[1] * (len - 1) + src) / len
    v8 = ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))  // Hull
    v9 = ta.linreg(src, len, offSig)  // Least Squares
    v10 = ta.alma(src, len, offALMA, offSig)  // Arnaud Legoux
    v11 = ta.sma(v1, len)  // Triangular (extreme smooth)
    // SuperSmoother filter
    // © 2013  John F. Ehlers
    a1 = math.exp(-1.414 * 3.14159 / len)
    b1 = 2 * a1 * math.cos(1.414 * 3.14159 / len)
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3
    v12 = 0.0
    v12 := c1 * (src + nz(src[1])) / 2 + c2 * nz(v12[1]) + c3 * nz(v12[2])
    type == 'EMA' ? v2 : type == 'DEMA' ? v3 : type == 'TEMA' ? v4 : type == 'WMA' ? v5 : type == 'VWMA' ? v6 : type == 'SMMA' ? v7 : type == 'HullMA' ? v8 : type == 'LSMA' ? v9 : type == 'ALMA' ? v10 : type == 'TMA' ? v11 : type == 'SSMA' ? v12 : v1
htfClose = request.security(syminfo.tickerid, res, close[barstate.isrealtime ? 1 : 0])
leadLine1 = ta.ema(htfClose, ribbon_period)
leadLine2 = ta.sma(htfClose, ribbon_period)
// p3 = plot(leadLine1, color= #53b987, title="EMA", transp = 50, linewidth = 1)
// p4 = plot(leadLine2, color= #eb4d5c, title="SMA", transp = 50, linewidth = 1)
// fill(p3, p4, transp = 60, color = leadLine1 > leadLine2 ? #53b987 : #eb4d5c)
//Upward Trend
UT = leadLine2 < leadLine1
DT = leadLine2 > leadLine1
// MACD
fast_length = input.int(title='Fast Length', defval=7, group='MACD', inline='1')
slow_length = input.int(title='Slow Length', defval=23, group='MACD', inline='1')
signal_length = input.int(title='Signal Smoothing', minval=1, maxval=50, defval=10, group='MACD', inline='2')
src = input.source(title='Source', defval=close, group='MACD', group='MACD', inline='2')
sma_source = input.bool(title='Simple MA(Oscillator)', defval=false, group='MACD', inline='3')
sma_signal = input.bool(title='Simple MA(Signal Line)', defval=false, group='MACD', inline='3')
// Plot colors
col_grow_above = #26A69A
col_grow_below = #FFCDD2
col_fall_above = #B2DFDB
col_fall_below = #EF5350
col_macd = #0094ff
col_signal = #ff6a00
srcHTF = request.security(syminfo.tickerid, res, src[barstate.isrealtime ? 1 : 0])
// Calculating
fast_ma = sma_source ? Sma(srcHTF, fast_length) : Ema(srcHTF, fast_length)
slow_ma = sma_source ? Sma(srcHTF, slow_length) : Ema(srcHTF, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? Sma(macd, signal_length) : Ema(macd, signal_length)
hist = macd - signal
/// MFI
MFIsource = hlc3
MFTsourceHTF = request.security(syminfo.tickerid, res, MFIsource[barstate.isrealtime ? 1 : 0])
length = input.int(15, minval=1, group='MFI', inline='1')
lower = input.int(12, minval=0, maxval=50, group='MFI', inline='1')
upper = input.int(80, minval=50, maxval=100, group='MFI', inline='1')
// DrawMFI_f=input(true, title="Draw MFI?", type=bool)
HighlightBreaches = input(true, title='Highlight Oversold/Overbought?')
volumeHTF = request.security(syminfo.tickerid, res, volume[barstate.isrealtime ? 1 : 0])
// MFI
upper_s = math.sum(volumeHTF * (ta.change(MFTsourceHTF) <= 0 ? 0 : MFTsourceHTF), length)
lower_s = math.sum(volumeHTF * (ta.change(MFTsourceHTF) >= 0 ? 0 : MFTsourceHTF), length)
mf = 100.0 - 100.0 / (1.0 + upper_s / lower_s)
top = hline(upper, color=color.new(color.gray, 100), linewidth=1, editable=false)
bottom = hline(lower, color=color.new(color.gray, 100), linewidth=1, editable=false)
hline(0, color=color.new(color.black, 100), editable=false)
hline(100, color=color.new(color.black, 100), editable=false)
// Breaches
b_color = mf > upper ? color.new(color.red, 70) : mf < lower ? color.new(color.green, 60) : na
bgcolor(HighlightBreaches ? b_color : na, transp=90)
fill(top, bottom, color=color.new(color.gray, 75))
//DEPRACATED
// TAKE PROFIT AND STOP LOSS
//useTP1 = input(false, title="Use TPI", group="TP/SL", inline='1', type=input.bool)
//long_tp1_inp = input(1, title='Long TP 1 %', step=0.1, group="TP/SL", inline='1')/100
//long_tp1_qty = input(20, title="Long TP 1 Qty", step=1, group="TP/SL", inline='1')
//traling profit after goal
useTP1 = false  //these are defined because of depracation above
long_tp1_inp = 6  //these are defined because of depracation above
long_tp1_qty = 100  //these are defined because of depracation above
enableTrailing = input.bool(defval=true, title='Enable Trailing', tooltip='Enable or disable the trailing for take profit.', group='Trailing Profit', inline='1')
longTakeProfitPerc = input.float(title='Long TP (%)', minval=0.0, step=0.1, defval=4, group='Trailing Profit', inline='1') * 0.01
trailingTakeProfitDeviationPerc = input.float(defval=0.5, title='TTP Dev %%', minval=0.01, maxval=100, step=0.1, tooltip='The step to follow the price when the take profit limit is reached.', group='Trailing Profit', inline='1') / 100
//DEPRACATED
long_trailing = 1.3  // input(1.3, title='Trailing Stop', step=0.1, group="TP/SL", inline='1', tooltip="") / 100
long_take_level_1 = strategy.position_avg_price * (1 + long_tp1_inp)
longTPPrice = strategy.position_avg_price * (1 + longTakeProfitPerc)
longLossPerc = input.float(8, title='Fixed SL (%)', minval=0.0, step=0.1, defval=1, tooltip='Use 100 to turn off - Stop loss % even if ATR did not catch it') * 0.01
longStopPrice = strategy.position_avg_price * (1 - longLossPerc)
// Stop Loss DEPRACATD
multiplier = 2  //input(2, "SL Mult", minval=1, step=0.1, group="TP/SL", inline='2')
ATR_period = 40  //input(40,"ATR Pd", minval=1, step=1, group="TP/SL", inline='2')
//DEPRACATED 
//FILTER LOGIC
//Display numbers
showData = input.bool(false, title='Show Data', group='Filters', inline='3', tooltip='Use this to help see numbers and help set filters')
//Only trade above this MA - doesn't seem to work well with my attempts, but maybe someone else can find useful
//depractated
//aboveTrend = input.bool(false, title='Use Trend', group='Filters', inline='1')
//TrendLength = input.int(3, minval=1, title='Trend EMA', group='Filters', inline='1')
//aboveTrendFilter = ta.ema(htfClose, TrendLength)
//Filter out false positives via moving average - try using LSMA 3 MIN varying length 
offsetSigma = 1
offsetALMA = 0.085
useVariantFilter = input.bool(false, title="Use MA", group="Filters", inline='1')
VariantFilterType = input.string(defval='LSMA', title='Type: ', group="Filters", inline="1", options=['SMA', 'EMA', 'DEMA', 'TEMA', 'WMA', 'VWMA', 'SMMA', 'HullMA', 'LSMA', 'ALMA', 'SSMA', 'TMA'])
VariantTimeFrame = input.timeframe(defval='3',title='TF: ', group="Filters", inline='1')
VariantFilterLength  = input.int(20, minval=1, title="Len", group="Filters", inline='1') // used to calculate RSI
//aboveVariant = input.float(0, title="Min ATR", minval=0.0, step=0.001, defval=1,group="Filters", inline='3', tooltip="Use 0 to turn off - can remove periods of low volatility where less likely profitable")
variantFilter = reso(variant(VariantFilterType, close[barstate.isrealtime ? 1 : 0], VariantFilterLength, offsetSigma, offsetALMA),true,VariantTimeFrame) // reso(variant(VariantFilterType, close[1], VariantFilterLength, offsetSigma, offsetALMA), 1, VariantTimeFrame) 
isAboveVariantFilter = (close[barstate.isrealtime ? 1 : 0] >= variantFilter) or not(useVariantFilter)
variantFilterP = plot(variantFilter, title='VariantFilter', color=color.blue, linewidth=4, style=plot.style_line, transp=20)
//Filter Updated to work on different time frame and a little sprinkle to make sure RSI is rising
//This seems to work rather well when you are filtering longer time periods (30-40 length) and start filtering below 55-45, which means that its not overboughtht
useRSI = input.bool(false, title="Use RSI", group="RSI Filter", inline='2')
rsiTimeFrame = input.timeframe(defval='5',title='TF: ', group="RSI Filter", inline='2')
RSILength  = input.int(13, minval=1, title="RSI Length", group="RSI Filter", inline='2') // used to calculate RSI
aboveRSIFilter  = input.int(45, minval=1, title="Buy Above  RSI", group="RSI Filter", inline='2') // only buy if its below this RSI - doesn't seem to work as expected
belowRSIFilter  = input.int(80, minval=1, title="Buy Below RSI", group="RSI Filter", inline='2') // only buy if its below this RSI - doesn't seem to work as expected
rsiTmp = ta.rsi(close[barstate.isconfirmed ? 0 : 1],RSILength) 
//rsiRisingLen  = input.int(2, minval=1, title="Rising Len", group="RSI Filter", inline='2', tooltip="Set RSI Moving Average Length for Filter check - use values 2-4 is what I like") // only buy if its below this RSI - doesn't seem to work as expected
//rsiMinROC  = input.float(0, minval=-5.0, title="Rising %", group="RSI Filter", inline='2', tooltip="If you want to be sure it is increasing by a certain amount") // only buy if its below this RSI - doesn't seem to work as expected
rsi = rp_security(syminfo.tickerid, rsiTimeFrame, rsiTmp) //rp_security(sys, _res, _src)
//rsiROC = ta.roc(rsi,rsiRisingLen)
RSIFilter = (rsi <= belowRSIFilter and rsi >= aboveRSIFilter and ta.rising(rsi,1)) or not(useRSI)// and ta.rising(ta.sma(rsi,rsiRisingLen),2) and rsiROC>rsiMinROC) or not(useRSI)  
//Filter via min ATR so you can make sure that there is enough volatility to make a profitable trade
minATR = input.float(0, title='Min ATR', minval=0.0, step=0.001, defval=1, tooltip='Use 0 to turn off - can remove periods of low volatility where less likely profitable')
//if not useRSI
//    belowRSIFilter := 100
//    belowRSIFilter
//if not aboveTrend
//    aboveTrendFilter := 0  //should never have 0 moving average so should always be above
//    aboveTrendFilter
atr = Atr(ATR_period, res)
// Strategy
entry_long = (ta.crossover(macd, signal) or ta.crossover(mf, lower) and leadLine2 < leadLine1) and RSIFilter and isAboveVariantFilter and atr > minATR
entry_price_long = ta.valuewhen(entry_long, high, 0)
//SL_floating_long = entry_price_long -( (entry_price_long)*multiplier/100)//*Atr(ATR_period,res)
//SL_floating_long = entry_price_long - multiplier*Atr(ATR_period,res)
SL_floating_long = entry_price_long - multiplier * atr
exit_long = close < SL_floating_long or close < longStopPrice
bool longIsActive = entry_long or strategy.position_size > 0
// LOGIC for Trailing Profit  ============================================================================================================
float longTakeProfitPrice = na
longTakeProfitPrice := if longIsActive
    if entry_long and not(strategy.position_size > 0)
        close * (1 + longTakeProfitPerc)
    else
        nz(longTakeProfitPrice[1], close * (1 + longTakeProfitPerc))
else
    na
longTrailingTakeProfitStepTicks = longTakeProfitPrice * trailingTakeProfitDeviationPerc / syminfo.mintick
var takeProfitColor = color.new(#419388, 0)
///// BACKTEST PERIOD ///////
testStartYear = input.int(2018, 'Fr Year', group='Backtest', inline='1')
testStartMonth = input.int(1, 'Fr Month', group='Backtest', inline='1')
testStartDay = input.int(1, 'Fr Day', group='Backtest', inline='1')
testPeriodStart = timestamp(testStartYear, testStartMonth, testStartDay, 0, 0)
testStopYear = input.int(9999, 'To Year', group='Backtest', inline='2')
testStopMonth = input.int(12, 'To Month', group='Backtest', inline='2')
testStopDay = input.int(31, 'To Day', group='Backtest', inline='2')
testPeriodStop = timestamp(testStopYear, testStopMonth, testStopDay, 0, 0)
testPeriod() =>
    time >= testPeriodStart and time <= testPeriodStop ? true : false
if testPeriod()
    if UT
        strategy.entry('long', strategy.long, when=entry_long == true, comment=openlongcomment)
    if useTP1
        strategy.exit('TP1', 'long', qty_percent=long_tp1_qty, limit=long_take_level_1)
    //if (strategy.position_size > 0)
    if strategy.position_size > 0 and close > longTPPrice
    //strategy.exit(id="long", profit = longTPPrice, comment=closelongcomment)
    // submit exit orders for trailing take profit price
        strategy.exit(id='Long Trailing Profit', from_entry='long', comment=closelongcomment, limit=enableTrailing ? na : longTakeProfitPrice, trail_price=enableTrailing ? longTakeProfitPrice : na, trail_offset=enableTrailing ? longTrailingTakeProfitStepTicks : na, when=longIsActive, alert_message='Long(' + syminfo.ticker + '): Take Profit activated')
        strategy.exit('ATR Trail stop', 'long', comment=closelongcomment, trail_points=entry_price_long * long_trailing / syminfo.mintick, trail_offset=entry_price_long * long_trailing / syminfo.mintick)
    if exit_long == true
        strategy.close('long', comment=closelongcomment)
//PLOTS - moved ot the end so that strategy logic gets executed first
//plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below) ), transp=0 )
plot(macd, title='MACD', color=color.new(col_macd, 0))
plot(signal, title='Signal', color=color.new(col_signal, 0))
mfp = plot(mf, color=color.new(color.gray, 0), linewidth=1)
plot(series=longTakeProfitPrice, title='Long Take Profit', color=takeProfitColor, linewidth=1, style=plot.style_linebr, offset=1)
//show actual numbers
if UT and entry_long and strategy.position_size == 0 and showData
    label.new(bar_index, na, 'RSI = ' + str.tostring(rsi, format.mintick) + '\nATR = ' + str.tostring(atr, format.mintick), yloc=yloc.abovebar, style=label.style_none, textcolor=color.white, size=size.normal)
// for later +'\nRSIROC : '+str.tostring(rsiROC)
Expand (321 lines)