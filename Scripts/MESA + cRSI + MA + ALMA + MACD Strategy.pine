Script Name: MESA + cRSI + MA + ALMA + MACD Strategy
Author: UnknownUnicorn36161431
Description: The WHAT
=============>
Basically a combination of multiple indicators into a strategy.
As the title says - it's a combo of MESA Pivot Points, Cyclic RSI, MESA Adjusted Moving Average, ALMA and MACD.
Feel free to play around with them and turn then on/off as desired to get the best results for your coin.

Enjoy :)
PineScript code:

Pine Script™ strategy
MESA + cRSI + MA + ALMA + MACD Strategy
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
// @version=5
strategy("MESA + cRSI Strategy", shorttitle="MESA + cRSI Strategy", overlay=true, process_orders_on_close = true, calc_on_order_fills = true, pyramiding = 0, default_qty_type = strategy.percent_of_equity, default_qty_value = 75, commission_type = strategy.commission.percent, commission_value = 0.04, initial_capital = 100)
GROUP_GLOBAL_OPTIONS = "Global Options"
GROUP_TIME_LIMITED_BACKTESTS = "Time-Limit BackTests (0 = disable)"
GROUP_CRSI_OPTIONS = "cRSI Options"
GROUP_HTF_MESA_MA = "HTF Adaptive MESA MA Options"
GROUP_ALMA = "ALMA Trend Direction Options"
GROUP_MACD = "MACD Options"
GROUP_MESA = "MESA Pivots Options"
SLPerc = input.float( 2.5, title="Stop Loss (%)", minval=0.0, step=0.1, group = GROUP_GLOBAL_OPTIONS)
i_use_time_limited_backtesting = input.bool( false, "Use Time-Limited Backtesting", group = GROUP_TIME_LIMITED_BACKTESTS )
startDay = input.int(0, "Start Day", minval = 0, maxval = 31, group = GROUP_TIME_LIMITED_BACKTESTS)
startMonth = input.int(0, "Start Month", minval = 0, maxval = 12, group = GROUP_TIME_LIMITED_BACKTESTS)
startYear = input.int(0, "Start Year", minval = 0, maxval = 2100, group = GROUP_TIME_LIMITED_BACKTESTS)
endDay = input.int(0, "End Day", minval = 0, maxval = 31, group = GROUP_TIME_LIMITED_BACKTESTS)
endMonth = input.int(0, "End Month", minval = 0, maxval = 12, group = GROUP_TIME_LIMITED_BACKTESTS)
endYear = input.int(0, "End Year", minval = 0, maxval = 2100, group = GROUP_TIME_LIMITED_BACKTESTS)
i_use_crsi = input.bool( true, "Trade by cRSI", group = GROUP_CRSI_OPTIONS )
i_show_crsi = input.bool( false, "Show cRSI Pivots", group = GROUP_CRSI_OPTIONS )
i_i_len   = input( 30, "cRSI EMA period", group = GROUP_CRSI_OPTIONS )
i_src     = input.source( close, 'cRSI Source',  group = GROUP_CRSI_OPTIONS )
i_trade_trend_direction = input( true, "cRSI trade in trend direction only", group = GROUP_CRSI_OPTIONS )
i_trade_trend_direction_change_percent_cancel = input.float( 3, "cRSI price change (%) to cancel trade in trend direction", group = GROUP_CRSI_OPTIONS )
i_use_htf_mesa = input.bool( false, "Trade by HTF Adaptive MESA MA", group = GROUP_HTF_MESA_MA )
i_show_htf_mesa = input.bool( false, "Show HFT Adaptive MESA MA", group = GROUP_HTF_MESA_MA )
_tf = input.timeframe( 'D', "HTF Adaptive MESA MA Resolution", group = GROUP_HTF_MESA_MA )
i_use_alma = input.bool( false, "Trade by ALMA Trend Direction", group = GROUP_ALMA )
i_show_alma = input.bool( false, "Show ALMA", group = GROUP_ALMA )
alma_len = input.int( 48, "Arnaud Legoux MA Length", minval = 1, group = GROUP_ALMA )
alma_offset = input.float( 0.15, "ALMA Offset", minval = 0.0001, group = GROUP_ALMA )
alma_sigma = input.int( 6, title="ALMA Sigma Value", minval = 1, group = GROUP_ALMA )
i_use_macd = input.bool( false, "Trade by MACD", group = GROUP_MACD )
macd_fast = input.int( 15, "MACD Fast Length", minval = 1, group = GROUP_MACD )
macd_slow = input.int( 30, "MACD Slow Length", minval = 1, group = GROUP_MACD )
macd_smooth = input.int( 9, "MACD Signal Smoothing", minval = 0, group = GROUP_MACD )
i_use_mesa = input.bool( true, "Trade by MESA Pivots", group = GROUP_MESA )
i_show_mesa = input.bool( false, "Show MESA Pivots", group = GROUP_MESA )
offsetNum = input( 0, "MESA offset", group = GROUP_MESA)
pivot_zone_upper = input.float( 0.4, "MESA pivot zone upper", step=0.1, group = GROUP_MESA )
pivot_zone_lower = input.float( -0.4, "MESA pivot zone lower", step=0.1, group = GROUP_MESA )
min_mesa_pivots_gap_minutes = input( 20, "MESA minimum pivots gap (minutes)", group = GROUP_MESA)
// i_use_ashi = input.bool( true, "Trade by Heiking ASHI", group = "Heikin Ashi Options" )
// ashi_res = input.timeframe( "60", "Heikin Ashi Candle Time Frame", group = "Heikin Ashi Options" )
// ashi_hshift = input( 1, "Heikin Ashi Candle Time Frame Shift", group = "Heikin Ashi Options" )
// ashi_res1 = input.timeframe( "180", "Heikin Ashi EMA Time Frame", group = "Heikin Ashi Options" )
// ashi_mhshift = input( 0, "Heikin Ashi EMA Time Frame Shift", group = "Heikin Ashi Options" )
// ashi_fama = input( 1, "Heikin Ashi EMA Period", group = "Heikin Ashi Options" )
// ashi_test = input( 1,"Heikin Ashi EMA Shift", group = "Heikin Ashi Options" )
// ashi_sloma = input( 30,"Slow EMA Period", group = "Heikin Ashi Options" )
// ashi_slomas = input( 1,"Slow EMA Shift" )
// ashi_logtransform = input( false, "Log Transform" )
inDateRange = true
// Look if the close time of the current bar falls inside the date range
if i_use_time_limited_backtesting and startDay != 0 and startMonth != 0 and startYear != 0 and endDay != 0 and endMonth != 0 and endYear != 0
    inDateRange := ( time >= timestamp( syminfo.timezone, startYear, startMonth, startDay, 0, 0 ) ) and ( time < timestamp( syminfo.timezone, endYear, endMonth, endDay, 0, 0 ) )
//------------------------------------------------------------------------------
// persisting variables
//------------------------------------------------------------------------------
var cRSI_high_extreme_found = 0.0
var cRSI_high_extreme_valid = true
var cRSI_low_extreme_found = 0.0
var cRSI_low_extreme_valid = true
var last_cRSI_extreme = ""
var last_pivot_ts = time
var last_trade_ts = time
var mesa_ma_trend_direction = ""
var alma_trend_direction = ""
var macd_trend_direction = ""
var min_trade_gap_minutes = 2
//------------------------------------------------------------------------------
// MESA calculations from the MESA indicator
//------------------------------------------------------------------------------
// Basic
//------------------------------------------------------------------------------
DomCycle = 15
RealPart = 0.0
ImagPart = 0.0
for J = 0 to DomCycle - 1
    Weight = (close[J] + close[J] + high[J] + low[J]) * 10000
    if DomCycle != 0
        RealPart := RealPart + math.cos(90 * J / DomCycle) * Weight * 2
        ImagPart := ((ImagPart + math.sin(90 * J / DomCycle) * Weight) + (ImagPart + math.sin(180 * J / DomCycle) * Weight)) / 2
Phase = ((math.atan(ImagPart / RealPart)) - 0.685) * 100
//------------------------------------------------------------------------------
//Pivot
//------------------------------------------------------------------------------
ph_mesa = ta.pivothigh(Phase, 1, 1)
pl_mesa = ta.pivotlow(Phase, 1, 1)
out_zone = Phase[2] < pivot_zone_lower or Phase[2] > pivot_zone_upper
plotshape(i_show_mesa and ph_mesa and out_zone ? ph_mesa : na, title = "Pivot High", color=#f23737, style = shape.circle, location = location.abovebar, offset = -1, size = size.tiny)
plotshape(i_show_mesa and pl_mesa and out_zone ? pl_mesa : na, title = "Pivot Low", color=#169788, style = shape.circle, location = location.belowbar, offset = -1, size = size.tiny)
//------------------------------------------------------------------------------
// MESA adaptive moving average indicator code
//------------------------------------------------------------------------------
tf1 = _tf == '0' ? timeframe.period : _tf
fast = 0.25
slow = 0.05
//Returns scalar difference between current timeframe and requested
ResolutionToMin(tf)=>
    mins = tf=="1M" ? 43830 : tf=="1W" ?   10080: tf=="1D" ?   1440 :tf=="240"?   240 :tf=="180"?   180 :tf=="120"?   120 :tf=="60"?    60  :tf=="45"?    45  :tf=="30"?    30  :tf=="15"?    15  :tf=="5"?     5   :tf=="3"?     3   :tf=="1"?     1   :   -1
    mins
chart_res = ResolutionToMin(timeframe.period)
if(timeframe.isdwm)
    chart_res := ResolutionToMin(str.tostring(timeframe.multiplier) + timeframe.period)
req_res = ResolutionToMin(_tf)
scale = req_res==-1 or chart_res==-1 or chart_res>req_res ? 1 : chart_res/req_res
    
    
//MESA Moving Average`
//Args: src - the series to perform MAMA calculations on
//      fast - limit to the fast moving average calc (default 0.5)
//      slow - limit to the slow moving average calc (default 0.05)
//      hide - for usage with multiple MESA plots. set to True to return [na,na]
//##############################################################################
getMESA(src_in, fast, slow, show) =>
    Price = src_in
    FastLimit = fast
    SlowLimit = slow
    MAMA = src_in
    FAMA = src_in
    PI = 3.14159
    Smooth = 0.0
    Detrender = 0.0
    I1 = 0.0
    Q1 = 0.0
    jI = 0.0
    jQ = 0.0
    I2 = 0.0
    Q2 = 0.0
    Re = 0.0
    Im = 0.0
    Period = 0.0
    SmoothPeriod = 0.0
    Phase = 0.0
    DeltaPhase = 0.0
    alpha = 0.0
    if(na(Price))
        MAMA := MAMA[1]
        FAMA := FAMA[1]
        Smooth := Smooth[1]
        Detrender := Detrender[1]
        I1 := I1[1]
        Q1 := Q1[1]
        I2 := I2[1]
        Q2 := Q2[1]
        Re := Re[1]
        Im := Im[1]
        Period := Period[1]
        SmoothPeriod := SmoothPeriod[1]
        Phase := Phase[1]
        
    if(bar_index > 5 and show and not na(Price))
        Smooth := (4 * Price + 3 * Price[1] + 2 * Price[2] + Price[3]) / 10
        Detrender := (0.0962 * Smooth + 0.5769 * Smooth[2] - 0.5769 * Smooth[4] - 0.0962 * Smooth[6]) * 
           (0.075 * Period[1] + 0.54)
        //Get the Inphase & Quadtrature Components
        Q1 := (0.0962 * Detrender + 0.5769 * Detrender[2] - 0.5769 * Detrender[4] - 
           0.0962 * Detrender[6]) * (0.075 * Period[1] + 0.54)
        I1 := Detrender[3]
        //Advance phase angle by 90 deg
        jI := (0.0962 * I1 + 0.5769 * I1[2] - 0.5769 * I1[4] - 0.0962 * I1[6]) * 
           (0.075 * Period[1] + 0.54)
        jQ := (0.0962 * Q1 + 0.5769 * Q1[2] - 0.5769 * Q1[4] - 0.0962 * Q1[6]) * 
           (0.075 * Period[1] + 0.54)
        //Phasor addition for 3-bar averaging 
        I2 := I1 - jQ
        Q2 := Q1 + jI
        //Smooth the I and Q components before applying the discriminator 
        I2 := 0.2 * I2 + 0.8 * I2[1]
        Q2 := 0.2 * Q2 + 0.8 * Q2[1]
        //Homodyne Discriminator 
        Re := I2 * I2[1] + Q2 * Q2[1]
        Im := I2 * Q2[1] - Q2 * I2[1]
        Re := 0.2 * Re + 0.8 * Re[1]
        Im := 0.2 * Im + 0.8 * Im[1]
        if Im != 0 and Re != 0
            Period := 2 * PI / math.atan(Im / Re)
        Period := Period > 1.5 * Period[1] ? 1.5 * Period[1] : Period
        Period := Period > 50 ? 50 : Period
        Period := Period < 0.67 * Period[1] ? 0.67 * Period[1] : Period
        Period := Period < 6 ? 6 : Period
        Period := 0.2 * Period + 0.8 * Period[1]
        SmoothPeriod := 0.33 * Period + 0.67 * SmoothPeriod[1]
        if I1 != 0
            Phase := 180 / PI * math.atan(Q1 / I1)
        DeltaPhase := Phase[1] - Phase
        if DeltaPhase < 1
            DeltaPhase := 1
        alpha := FastLimit / DeltaPhase
        alpha := alpha < SlowLimit ? SlowLimit : alpha
        alpha := alpha > FastLimit ? FastLimit : alpha
        MAMA := alpha * Price + (1 - alpha) * MAMA[1]
        FAMA := 0.5 * alpha * MAMA + (1 - 0.5 * alpha) * FAMA[1]
    if(not show)
        MAMA := na
        FAMA := na
    [MAMA, FAMA]
[M_1, F_1] = getMESA(close, fast*scale, slow*scale, true)
//Simple function to grab the color of the fill given a Mama / Fama tuple
//Args : mama - the Mesa adaptive moving average
//       fama - the follower moving average (generated by prior)
//##############################################################################
fillColor(mama, fama, show) =>
    color_1 = color.new(color.white, 100)
    ret = show ? mama > fama ? color.red : color.blue : color_1
    ret
//##############################################################################
p_m_1 = plot(M_1, "MAMA on HTF Adaptive MESA", i_show_htf_mesa ? color.maroon : na, 2)
p_f_1 = plot(F_1, "FAMA on HTF Adaptive MESA", i_show_htf_mesa ? color.navy : na, 2)
fill_1 = fillColor(M_1, F_1, i_show_htf_mesa)
fill(p_m_1, p_f_1, fill_1, "Fill1")
if mesa_ma_trend_direction == "" or ta.cross( M_1, F_1 )
    if M_1 > F_1
        mesa_ma_trend_direction := "up"
    else
        mesa_ma_trend_direction := "down"
//------------------------------------------------------------------------------
// ALMA Trend Direction indicator code
//------------------------------------------------------------------------------
trendALMA = ta.alma(close, alma_len, alma_offset, alma_sigma)
if low > trendALMA
    alma_trend_direction := "up"
else
    alma_trend_direction := "down"
    
p0 = plot(i_show_alma ? trendALMA : na, color = color.new( color.black, 100 ))
p1 = plot(i_show_alma ? close : na, color=color.new( color.black, 100 ))
fill(p0, p1, color=low > trendALMA ? color.new( #00ff00, 82) : color.new( #c2185b, 81 ))
    
//------------------------------------------------------------------------------
// MACD
//------------------------------------------------------------------------------
if i_use_macd
    [ macdLine, signalLine, hist ] = ta.macd(close, macd_fast, macd_slow, macd_smooth)
    if macdLine > signalLine
        macd_trend_direction := "up"
    else
        macd_trend_direction := "down"
//------------------------------------------------------------------------------
// Hekin Ashi strategy code
//------------------------------------------------------------------------------
// ha_t = ticker.heikinashi(syminfo.tickerid)
// ha_close = request.security(ha_t, ashi_res, ashi_logtransform ? math.log(close[ashi_hshift]) : close[ashi_hshift])
// mha_close = request.security(ha_t, ashi_res1, ashi_logtransform ? math.log(close[ashi_mhshift]) : close[ashi_mhshift])
// fma = ta.ema(mha_close[ashi_test], ashi_fama)
// sma = ta.ema(ha_close[ashi_slomas], ashi_sloma)
// // plot(showplots ? (logtransform ? math.exp(fma) : fma) : na, title="MA", color=#0094ff, linewidth=2, style=plot.style_line)
// // plot(showplots ? (logtransform ? math.exp(sma) : sma) : na, title="SMA", color=#ff6a00, linewidth=2, style=plot.style_line)
// ashi_golong = ta.crossover(fma, sma)
// ashi_goshort = ta.crossunder(fma, sma)
//------------------------------------------------------------------------------
// cRSI indicator code
//------------------------------------------------------------------------------
crsi       = 0.0
vibration  = 10
torque     = 0.618 / (vibration + 1)
phasingLag = (vibration - 1) / 0.618
rsi        = ta.rsi(i_src, i_i_len)
crsi      := torque * (2 * rsi - rsi[phasingLag]) + (1 - torque) * nz(crsi[1])
float osc = crsi
float ph = ta.highestbars(high, i_i_len) == 0 ? osc : na
float pl = ta.lowestbars(low,   i_i_len) == 0 ? osc : na
var int dir = 0
dir := ph and na(pl) ? 1 : pl and na(ph) ? -1 : dir
var max_array_size = 10
var arr_zz         = array.new_float(0)
older_zz           = array.copy(arr_zz)
dirchanged         = ta.change(dir)
add_to_zigzag(_id, float value, int bindex) =>
    array.unshift(_id, bindex)
    array.unshift(_id, value)
    if array.size(_id) > max_array_size
        array.pop(_id)
        array.pop(_id)
update_zigzag(_id, float value, int bindex, int dir) =>
    if array.size(_id) == 0
        add_to_zigzag(_id, value, bindex)
    else
        if dir == 1 and value > array.get(_id, 0) or dir == -1 and value < array.get(_id, 0)
            array.set(_id, 0, value)
            array.set(_id, 1, bindex)
        0.
if ph or pl
    if dirchanged
        add_to_zigzag(arr_zz, dir == 1 ? ph : pl, bar_index)
    else
        update_zigzag(arr_zz, dir == 1 ? ph : pl, bar_index, dir)
if array.size(arr_zz) >= 6
    // Variables
    var label label_zz = na
    // Bools for or
    bool bool_or_1 = array.get(arr_zz, 0) != array.get(older_zz, 0)
    bool bool_or_2 = array.get(arr_zz, 1) != array.get(older_zz, 1)
    
    // Bools for and
    bool bool_n_1 = array.get(arr_zz, 2) == array.get(older_zz, 2)
    bool bool_n_2 = array.get(arr_zz, 3) == array.get(older_zz, 3)
    
    // Bools for more than and less than
    bool bool_0_mt_4 = array.get(arr_zz, 0) > array.get(arr_zz, 4)
    bool bool_0_lt_4 = array.get(arr_zz, 0) < array.get(arr_zz, 4)
    if bool_or_1 or bool_or_2
        if bool_n_1 and bool_n_2
            label.delete(label_zz)
        str_label = dir == 1 ?   bool_0_mt_4 ? '▼'     : '◍' :
                                 bool_0_lt_4 ? '▲'     : '◍'
        col_label = dir == 1 ?   bool_0_mt_4 ? color.red  : color.teal :
                                 bool_0_lt_4 ? color.teal : color.red
        if i_show_crsi
            label_zz := label.new(bar_index, high, text = str_label, color = color.new(color.blue, 100), textcolor = col_label, style=dir == 1 ? label.style_label_down : label.style_label_up )
        if dir == 1
            cRSI_high_extreme_found := close
            cRSI_low_extreme_found := 0.0
            last_cRSI_extreme := "high"
        else
            cRSI_low_extreme_found := close
            cRSI_high_extreme_found := 0.0
            last_cRSI_extreme := "low"
        // if we found a cRSI extreme close any open trades here
        if i_use_crsi and cRSI_high_extreme_found > 0.0
            strategy.close( "Buy", comment = "close buy (cRSI)" )
        if i_use_crsi and cRSI_low_extreme_found > 0.0
            strategy.close( "Sell", comment = "close sell (cRSI)" )
// do we have a Heikin Ashi open signal?
// ashi_entry_found = false
// if i_use_ashi and ( ashi_golong or ashi_goshort )
//     ashi_entry_found = true
//     if ashi_golong
//         // close all shorts
//         strategy.close( "Sell", comment = "close sell (ashi)" )
//         // open a new Buy trade
//         stopPrice = close + ( ( SLPerc / 100 ) * close )
//         strategy.entry( "Buy", strategy.long, comment = "Buy (ashi, SL = " + str.tostring( stopPrice ) + ")")
//         strategy.exit( "Buy", stop = stopPrice, comment = "closed by SL " + str.tostring(SLPerc) + "%" )
// nothing else to do if we've had a Heikin Ashi opening
//if not ashi_entry_found
// check that our last found high extreme is not more than i_trade_trend_direction_change_percent_cancel percent lower than our current price
// in which case we'll mark it as invalid, so we can keep on opening buy entries
if i_use_crsi and i_trade_trend_direction and cRSI_high_extreme_found > 0.0
    if cRSI_high_extreme_found != close
        extreme_distance_from_last_point_percent = ( ( cRSI_high_extreme_found - close ) / cRSI_high_extreme_found ) * 100
        cRSI_high_extreme_valid := close < cRSI_high_extreme_found or math.abs( extreme_distance_from_last_point_percent ) < i_trade_trend_direction_change_percent_cancel
    // reset the high extreme to current price if we found out that we're redrawing it further
    if not cRSI_high_extreme_valid
        cRSI_high_extreme_found := close
        cRSI_high_extreme_valid := false
else
    cRSI_high_extreme_valid := true
// check that our last found low extreme is not more than i_trade_trend_direction_change_percent_cancel percent higher than our current price
// in which case we'll mark it as invalid, so we can keep on opening sell entries
if i_use_crsi and i_trade_trend_direction and cRSI_low_extreme_found > 0.0
    if cRSI_low_extreme_found != close
        extreme_distance_from_last_point_percent = ( ( cRSI_low_extreme_found - close ) / cRSI_low_extreme_found ) * 100
        cRSI_low_extreme_valid := close > cRSI_low_extreme_found or math.abs( extreme_distance_from_last_point_percent ) < i_trade_trend_direction_change_percent_cancel
    // reset the high extreme to current price if we found out that we're redrawing it further
    if not cRSI_low_extreme_valid
        cRSI_low_extreme_found := close
        cRSI_low_extreme_valid := false
else
    cRSI_low_extreme_valid := true
// MESA pivot high was found
if ( not i_use_mesa or ( ph_mesa and out_zone ) ? ph_mesa : na )
    // close trade if a cRSI extreme was previously found, otherwise let the cRSI close the trade once it gets there
    if not i_use_crsi or ( cRSI_high_extreme_found > 0.0 and cRSI_high_extreme_valid )
        strategy.close( "Buy", comment = "close buy (" + ( i_use_mesa ? "MESA" : i_use_crsi ? "cRSI" : i_use_htf_mesa ? "HTF MESA" : "unknown" ) + ")" )
        // open a counter-strategy, if:
        //   1) we're not too close to the last trade's TS
        //   2) we're in the correct cRSI trend (if enabled)
        //   3) we're in the correct MESA HTF MA trend (if enabled)
        //   4) we're in the correct ALMA trend (if enabled)
        //   5) we're in the correct MACD trend (if enabled)
        if ( inDateRange and ( ( time - last_trade_ts ) / 1000 >= ( 60 * min_trade_gap_minutes ) ) and ( not i_use_crsi or last_cRSI_extreme == "high" ) and ( not i_use_mesa or ( i_use_mesa and ( time - last_pivot_ts ) / 1000 >= ( 60 * min_mesa_pivots_gap_minutes ) ) ) and ( not i_use_crsi or not i_trade_trend_direction or last_cRSI_extreme == "high" ) and ( not i_use_htf_mesa or mesa_ma_trend_direction == "down" ) and ( not i_use_alma or alma_trend_direction == "down" ) and ( not i_use_macd or macd_trend_direction == "down" ) and ( strategy.opentrades == 0 or strategy.opentrades.entry_id( strategy.opentrades - 1 ) != "Sell" ) )
            stopPrice = close + ( ( SLPerc / 100 ) * close )
            strategy.entry( "Sell", strategy.short, comment = "Sell (SL = " + str.tostring( stopPrice ) + ")" )
            strategy.exit( "Sell", stop = stopPrice, comment = "closed by SL " + str.tostring(SLPerc) + "%" )
            cRSI_low_extreme_found := 0.0
            last_trade_ts := time
    last_pivot_ts := time
// MESA pivot low was found
if ( not i_use_mesa or ( pl_mesa and out_zone ) ? pl_mesa : na )
    // close trade if a cRSI extreme was previously found, otherwise let the cRSI close the trade once it gets there
    if not i_use_crsi or ( cRSI_low_extreme_found > 0.0 and cRSI_low_extreme_valid )
        strategy.close( "Sell", comment = "close sell (" + ( i_use_mesa ? "MESA" : i_use_crsi ? "cRSI" : i_use_htf_mesa ? "HTF MESA" : "unknown" ) + ")" )
        // open a counter-strategy, if:
        //   1) we're not too close to the last trade's TS
        //   2) we're in the correct cRSI trend (if enabled)
        //   3) we're in the correct MESA HTF MA trend (if enabled)
        //   4) we're in the correct ALMA trend (if enabled)
        //   5) we're in the correct MACD trend (if enabled)
        if ( inDateRange and ( ( time - last_trade_ts ) / 1000 >= ( 60 * min_trade_gap_minutes ) ) and ( not i_use_crsi or last_cRSI_extreme == "low" ) and ( not i_use_mesa or ( i_use_mesa and ( time - last_pivot_ts ) / 1000 >= ( 60 * min_mesa_pivots_gap_minutes ) ) ) and ( not i_use_crsi or not i_trade_trend_direction or last_cRSI_extreme == "low"  ) and ( not i_use_htf_mesa or mesa_ma_trend_direction == "up" ) and ( not i_use_alma or alma_trend_direction == "up" ) and ( not i_use_macd or macd_trend_direction == "down" )  and ( strategy.opentrades == 0 or strategy.opentrades.entry_id( strategy.opentrades - 1 ) != "Buy" ) )
            stopPrice = close - ( ( SLPerc / 100 ) * close )
            // strategy.entry("Buy", strategy.long, comment = "close: " + str.tostring(close) + ", sl: " + str.tostring(stopPrice) )
            strategy.entry( "Buy", strategy.long, comment = "Buy (SL = " + str.tostring( stopPrice ) + ")" )
            strategy.exit( "Buy", stop = stopPrice, comment = "closed by SL " + str.tostring(SLPerc) + "%" )
            cRSI_high_extreme_found := 0.0
            last_trade_ts := time
    last_pivot_ts := time
// Exit open market position when date range ends
if (not inDateRange)
    strategy.close_all()
Expand (464 lines)