Script Name: TradingGroundhog - Strategy & Wavetrend V2
Author: UnknownUnicorn27666852
Description: #-- Public Strategy - No Repaint - Fractals - Wavetrend -- 

Here I come with another script, a nice and simple strategy based on fractals and Wavetrends.

 #-- Synopsis -- 

A simple idea, on a small time frame (15 min) we buy when the opening price goes below a Bottom fractals and sell when it goes over a Top fractals, but in order to avoid bad and evil...
PineScript code:

Pine Script™ strategy
TradingGroundhog - Strategy & Wavetrend V2
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
// @version = 5
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TradingGroundhog
// ======================== CASH & DATE ============================ 
cash_amout = 10000
pyramid_val = 1
cash_given_per_lot = cash_amout/pyramid_val
startDate = input(title="Start Date",defval=13)
startMonth = input(title="Start Month",defval=1)
startYear = input(title="Start Year",defval=2021)
afterStartDate = (time >= timestamp(syminfo.timezone,startYear, startMonth, startDate, 0, 0))
//====================================
// ======================== STRATEGY ============================ 
strategy(title="TradingGroundhog - Strategy & Wavetrend V1", overlay=true, max_bars_back = 4000, overlay = false, max_labels_count=500, commission_type=strategy.commission.percent, commission_value=0.00,default_qty_type=strategy.cash, default_qty_value= cash_given_per_lot, pyramiding=pyramid_val)
//====================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////plotshape(filteredtopf, style=shape.triangledown, location=location.abovebar, color=color.red, text="•", offset=0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////plotshape(filteredbotf, style=shape.triangleup, location=location.belowbar, color=color.lime, text="•", offset=0)
// ======================== FUNCTIONS ============================ 
f_LazyLine(_data, _length) =>
    w1 = 0, w2 = 0, w3 = 0
    L1 = 0.0, L2 = 0.0, L3 = 0.0
    w = _length / 3
    
    if _length > 2 
        w2 := math.round(w)
        w1 := math.round((_length-w2)/2)
        w3 :=   int((_length-w2)/2)
        
        L1 := ta.wma(_data, w1)
        L2 := ta.wma(L1, w2)
        L3 := ta.wma(L2, w3)
    else
        L3 := _data
    L3
//====================================
choice_transp(top_val) =>
    bool c_val = false
    if top_val == 0.0
        c_val := false
    else
        c_val := true
    c_val
//====================================
f_Top_Bottom_Lazy(alpha, limit_candle) =>
    price = request.security(syminfo.tickerid, "D",open)
    low_day = request.security(syminfo.tickerid, "D",low)
    LL = f_LazyLine(price, alpha)
    uptrend     = LL > LL[1]
    bool reverse = false
    float reversed_price = 0.0
    float reversed_price_low = 0.0
    float limit_to_pass = 0.0
    float limit_to_pass_down = 0.0
    prices_top = array.new_float(0)
    prices_start = array.new_float(0)
    prices_bottom = array.new_float(0)
    prices_top_v = array.new_float(0)
    if uptrend[1] and not uptrend
        reversed_price := LL[1] // Max de close sur period donne en wavetrend
    else
        reversed_price :=0.0
        
    if uptrend and not uptrend[1]
        reversed_price_low := LL[1]
    else
        reversed_price_low :=1000000
    /// SHOW Actual OPEN
    limit_to_pass := price
    limit_to_pass_down := price
    ///
    float bottom_1 = 0.0
    float bottom_2 = 0.0
    float bottom_3 = 0.0
    float bottom_4 = 0.0
    float bottom_5 = 0.0
    int bottom_count = 0
    float top_1 = 10000000.0
    float top_2 = 10000000.0
    float top_3 = 10000000.0
    float top_4 = 10000000.0
    float top_5 = 10000000.0
    int top_count = 0
    /// SHOW PAST TOP BOTTOM
    for i = 0 to limit_candle
        if reversed_price[i] > limit_to_pass //and ((reversed_price[i]-limit_to_pass)/reversed_price[i])*100 > per_cent_space_up
            limit_to_pass := reversed_price[i]
            if top_count == 0
                top_1 := limit_to_pass
            if top_count == 1
                top_2 := limit_to_pass
            if top_count == 2
                top_3 := limit_to_pass
            if top_count == 3
                top_4 := limit_to_pass
            if top_count == 4
                top_5 := limit_to_pass
            top_count := top_count +1
    for i = 0 to limit_candle
        if reversed_price_low[i] < limit_to_pass_down //and ((limit_to_pass_down-reversed_price_low[i])/limit_to_pass_down)*100 > per_cent_space_down and array.size(prices_bottom) < 2
            limit_to_pass_down := reversed_price_low[i]
            if bottom_count == 0
                bottom_1 := limit_to_pass_down
            if bottom_count == 1
                bottom_2 := limit_to_pass_down
            if bottom_count == 2
                bottom_3 := limit_to_pass_down
            if bottom_count == 3
                bottom_4 := limit_to_pass_down
            if bottom_count == 4
                bottom_5 := limit_to_pass_down
            bottom_count := bottom_count +1
    bool c_top_1    = false
    bool c_top_2    = false
    bool c_top_3    = false
    bool c_top_4    = false
    bool c_top_5    = false
    bool c_bottom_1 = false
    bool c_bottom_2 = false
    bool c_bottom_3 = false
    bool c_bottom_4 = false
    bool c_bottom_5 = false
    c_top_1    := choice_transp(top_1)
    c_top_2    := choice_transp(top_2)
    c_top_3    := choice_transp(top_3)
    c_top_4    := choice_transp(top_3)
    c_top_5    := choice_transp(top_3)
    c_bottom_1 := choice_transp(bottom_1)
    c_bottom_2 := choice_transp(bottom_2)
    c_bottom_3 := choice_transp(bottom_3)
    c_bottom_4 := choice_transp(bottom_3)
    c_bottom_5 := choice_transp(bottom_3)
    bool go_above = false
    if price > top_1[2] and price[2] < top_1[2] and not go_above[1] and not go_above[2]
        go_above := true
    var go_down = false
    if low_day[1] < bottom_1[1]
        go_down := true
    if go_down and uptrend and not uptrend[1]
        go_down :=  false
    [top_1, top_2, top_3, top_4, top_5, bottom_1, bottom_2, bottom_3, bottom_4, bottom_5, go_above, go_down, LL, uptrend, c_top_1, c_top_2, c_top_3, c_top_4, c_top_5, c_bottom_1, c_bottom_2, c_bottom_3, c_bottom_4, c_bottom_5] 
//---------------------------------------------------------------------------------------------------------
// ======================== USER INPUT ============================
//per_cent_space_up       = input(title = "per_cent_space_up",     defval = 0.0, group="Sell Directive Inputs USER")
//per_cent_space_down       = input(title = "per_cent_space_down",   defval = 0.0, group="Sell Directive Inputs USER")
limit_candle       = input(title = "limit_candle to look on",      defval = 4000, group="Sell Directive Inputs USER")
draw_step       = input(title = "length top bottom drawn",      defval = 1, group="Sell Directive Inputs USER")
longLossPerc = input(title="Long Stop Loss (%)", defval=0.01) * 0.01
price       = input(title = "Source",                  defval = open)
alpha       = input(title = "Combined Smoothness", defval = 9)
vamp = input(title="VolumeMA",  defval=2)
showZigZag = input(false)
showchannel = input(false)
filterBW = input(false, title="filter Bill Williams Fractals:")
filterFractals = input(false, title="Filter fractals using extreme method:")
length = input(2, title="Extreme Window:")
//---------------------------------------------------------------------------------------------------------
// ======================== EXECUTION AND SORTING ============================
//  ||---   Fractal Recognition:
regulartopfractal = high[4] < high[3] and high[3] < high[2] and high[2] > high[1] and high[1] > high[0]
regularbotfractal = low[4] > low[3] and low[3] > low[2] and low[2] < low[1] and low[1] < low[0]
billwtopfractal = filterBW ? false : (high[4] < high[2] and high[3] < high[2] and high[2] > high[1] and high[2] > high[0] ? true : false)
billwbotfractal = filterBW ? false : (low[4] > low[2] and low[3] > low[2] and low[2] < low[1] and low[2] < low[0] ? true : false)
ftop = filterBW ? regulartopfractal : regulartopfractal or billwtopfractal
fbot = filterBW ? regularbotfractal : regularbotfractal or billwbotfractal
topf = ftop ? high[2] >= ta.highest(high, length) ? true : false : false
botf = fbot ? low[2] <= ta.lowest(low, length) ? true : false : false
filteredtopf = filterFractals ? topf : ftop
filteredbotf = filterFractals ? botf : fbot
//---------------------------------------------------------------------------------------------------------
//  ||---   Added Swing High/Low Option
ShowSwingsHL = input(true)
highswings = filteredtopf == false ? na : ta.valuewhen(filteredtopf == true, high[2], 2) < ta.valuewhen(filteredtopf == true, high[2], 1) and ta.valuewhen(filteredtopf == true, high[2], 1) > ta.valuewhen(filteredtopf == true, high[2], 0)
lowswings = filteredbotf == false ? na : ta.valuewhen(filteredbotf == true, low[2], 2) > ta.valuewhen(filteredbotf == true, low[2], 1) and ta.valuewhen(filteredbotf == true, low[2], 1) < ta.valuewhen(filteredbotf == true, low[2], 0)
//---------------------------------------------------------------------------------------------------------
//  ||---   ZigZag:
istop = filteredtopf ? true : false
isbot = filteredbotf ? true : false
topcount = ta.barssince(istop)
botcount = ta.barssince(isbot)
//---------------------------------------------------------------------------------------------------------
//  ||---   Fractals Up Down:
vam = ta.sma(volume, vamp)
fractalup = 0.0
fractaldown = 0.0
up = high[3]>high[4] and high[4]>high[5] and high[2]<high[3] and high[1]<high[2] and volume[3]>vam[3]
down = low[3]<low[4] and low[4]<low[5] and low[2]>low[3] and low[1]>low[2] and volume[3]>vam[3]
fractalup :=  up ? high[3] : fractalup[1] 
fractaldown := down ? low[3] : fractaldown[1]
//---------------------------------------------------------------------------------------------------------
//  ||---   Fractals Pattern and Signal recognition:
fractaldown_save = array.new_float(0)
for i = 0 to limit_candle
    if array.size(fractaldown_save) < 3
        if array.size(fractaldown_save) == 0
            array.push(fractaldown_save, fractaldown[i])
        else 
            if fractaldown[i] != array.get(fractaldown_save, array.size(fractaldown_save)-1)
                array.push(fractaldown_save, fractaldown[i])
if array.size(fractaldown_save) < 3
    array.push(fractaldown_save, fractaldown)
    array.push(fractaldown_save, fractaldown)
fractalup_save = array.new_float(0)
for i = 0 to limit_candle
    if array.size(fractalup_save) < 3
        if array.size(fractalup_save) == 0
            array.push(fractalup_save, fractalup[i])
        else 
            if fractalup[i] != array.get(fractalup_save, array.size(fractalup_save)-1)
                array.push(fractalup_save, fractalup[i])
if array.size(fractalup_save) < 3
    array.push(fractalup_save, fractalup)
    array.push(fractalup_save, fractalup)
//---------------------------------------------------------------------------------------------------------
//  ||---   Top/Bottom Fractals:
Bottom_1 = array.get(fractaldown_save,  0)
Bottom_2 = array.get(fractaldown_save,  1)
Bottom_3 = array.get(fractaldown_save,  2)
Top_1 = array.get(fractalup_save, 0)
Top_2 = array.get(fractalup_save, 1)
Top_3 = array.get(fractalup_save, 2)
bool Signal_Test = false
bool Signal_Test_OUT_TEMP = false
var Signal_Test_TEMP = false
//---------------------------------------------------------------------------------------------------------
//  ||---   Wavetrend Top/Bottom:
[top_1, top_2, top_3, top_4, top_5, bottom_1, bottom_2, bottom_3, bottom_4, bottom_5, go_above, go_down, LL, uptrend, c_top_1, c_top_2, c_top_3, c_top_4, c_top_5, c_bottom_1, c_bottom_2, c_bottom_3, c_bottom_4, c_bottom_5]  = request.security(syminfo.tickerid, "D",f_Top_Bottom_Lazy(alpha, limit_candle))
//---------------------------------------------------------------------------------------------------------
//  ||---   NoBuy Signal:
Kill_signal =   go_above or go_down
//---------------------------------------------------------------------------------------------------------
//  ||---   IF Statement for Buy and Sell:
if filteredbotf and open < Bottom_1 and (Bottom_1 - open) / Bottom_1 >= longLossPerc and not Kill_signal
    Signal_Test := true
if filteredtopf and open > Top_1 and not Kill_signal
    Signal_Test_TEMP := true
if filteredtopf and Signal_Test_TEMP or Kill_signal and not Kill_signal[1]
    Signal_Test_TEMP := false
    Signal_Test_OUT_TEMP := true
//---------------------------------------------------------------------------------------------------------
// ======================== PLOTTING ============================
// Plot Wavetrend
c_up        = color.new(#33ff00, 0)
c_dn        = color.new(#ff1111, 0)
//plot(LL, "SS_WMA Line",  color = uptrend ? c_up : c_dn,  linewidth=3)
//---------------------------------------------------------------------------------------------------------
// Plot Tops
plot(top_1, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(102, 204, 255, c_top_1 ? 0 : 100))
plot(top_2, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(51, 153, 255, c_top_2 ? 0 : 100))
plot(top_3, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(0, 102, 255, c_top_3 ? 0 : 100))
plot(top_4, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(0, 0, 255, c_top_4 ? 0 : 100))
plot(top_5, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(0, 0, 204, c_top_5 ? 0 : 100))
//---------------------------------------------------------------------------------------------------------
// Plot Bottoms
plot(bottom_1, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(255, 204, 153, c_bottom_1 ? 0 : 100))
plot(bottom_2, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(255, 153, 102, c_bottom_2 ? 0 :100))
plot(bottom_3, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(255, 102, 0, c_bottom_3 ? 0 : 100))
plot(bottom_4, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(255, 0, 0, c_bottom_4 ? 0 : 100))
plot(bottom_5, style=plot.style_circles, linewidth= 1 ,color=  color.rgb(128, 0, 0, c_bottom_5 ? 0 : 100))
//---------------------------------------------------------------------------------------------------------
// Plot NoBuy Patterns
plotshape(go_above, style=shape.diamond, location=location.abovebar, color=color.red, offset=0)
plotshape(go_down, style=shape.square, location=location.belowbar, color=color.red , offset=0)
//---------------------------------------------------------------------------------------------------------
// Plot BUY Signal
plotshape(Signal_Test, style=shape.flag, location=location.belowbar, color=color.yellow, offset=0)
//---------------------------------------------------------------------------------------------------------
// Plot SELL Signal
plotshape(Signal_Test_OUT_TEMP, style=shape.flag, location=location.abovebar, color=color.white, offset=0)
//---------------------------------------------------------------------------------------------------------
// Show NO-BUY Period presenting NoBuy Patterns
cl_Kill_signal = Kill_signal ? color.rgb(128, 0, 0,85) : na
bgcolor(cl_Kill_signal)
//---------------------------------------------------------------------------------------------------------
//  ||---   Plot Lines based on the fractals.
plot(showchannel ? (filteredtopf ? high[2] : na) : na, color=color.black, offset=0)
plot(showchannel ? (filteredbotf ? low[2] : na) : na, color=color.black, offset=0)
//---------------------------------------------------------------------------------------------------------
//  ||---   HLswings channel: unable to offset values
plot(showchannel ? (highswings ? high[2] : na) : na, color=color.black, offset=-2)
plot(showchannel ? (lowswings ? low[2] : na) : na, color=color.black, offset=-2)
//----------------------------------------------------------------------------------------------------------
// Strategy Buy and Sell
if Signal_Test and afterStartDate
    strategy.entry("SL", strategy.long)
if Signal_Test_OUT_TEMP and afterStartDate
    strategy.close_all()
//---------------------------------------------------------------------------------------------------------
Expand (334 lines)