Script Name: MACD, EMA, Know sure thing, Chopy Market - high adaptability
Author: TradingStrategyCheck
Description: Hey there :)

This is the free version of the script. The following indicators / settings are missing:
- Support and resistance zones
- dynamic textboxes for alarms when using bots (3 Commas, Alertatron, etc.)
- a table showing the current position, indicators and other important information

With this script there is the possibility to completely customize the...
PineScript code:

Pine Script™ strategy
MACD, EMA, Know sure thing, Chopy Market - high adaptability
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
//@version=4
//MACD versatile Customizable strategy
strategy(title="MACD versatile Customizable strategy", shorttitle="MACD versatile Customizable strategy", overlay = false, pyramiding = 0, max_bars_back=5000, calc_on_order_fills = false, commission_type =  strategy.commission.percent, commission_value = 0.01, slippage = 15, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, initial_capital=5000, currency=currency.USD)
// { Time Range
FromMonth=input(defval=1,title="FromMonth", group="Time", minval=1,maxval=12)
FromDay=input(defval=1,title="FromDay", group="Time", minval=1,maxval=31)
FromYear=input(defval=2020,title="FromYear", group="Time", minval=2016)
ToMonth=input(defval=1,title="ToMonth", group="Time", minval=1,maxval=12)
ToDay=input(defval=1,title="ToDay", group="Time", minval=1,maxval=31)
ToYear=input(defval=9999,title="ToYear", group="Time", minval=2017)
start=timestamp(FromYear,FromMonth,FromDay,00,00)
finish=timestamp(ToYear,ToMonth,ToDay,23,59)
window()=>time>=start and time<=finish?true:false
afterStartDate = time >= start and time<=finish?true:false
zeroline = 0
// } Time Range
// { MACD
fast_length = input(title="Fast Length", type=input.integer, defval=10, group="MACD Settings")
slow_length = input(title="Slow Length", type=input.integer, defval=23, group="MACD Settings")
src = input(title="Source", type=input.source, defval=close, group="MACD Settings")
signal_length = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 10, group="MACD Settings")
sma_source = input(title="Oscillator MA Type", type=input.string, defval="EMA", options=["SMA", "EMA"], group="MACD Settings")
sma_signal = input(title="Signal Line MA Type", type=input.string, defval="EMA", options=["SMA", "EMA"], group="MACD Settings")
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", input.color, group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", input.color, group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", input.color, group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", input.color, group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", input.color, group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", input.color, group="Histogram", inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? sma(src, fast_length) : ema(src, fast_length)
slow_ma = sma_source == "SMA" ? sma(src, slow_length) : ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal
plot(hist, title="Histogram", style=plot.style_columns, color=color.new((hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below) ),0))
plot(macd, title="MACD", color=color.new(col_macd, 0))
plot(signal, title="Signal", color=color.new(col_signal, 0))
// } MACD
// { KST
roclen1 = input(10, minval=1, title = "ROC Length #1", group="Know sure thing")
roclen2 = input(15, minval=1, title = "ROC Length #2", group="Know sure thing")
roclen3 = input(20, minval=1, title = "ROC Length #3", group="Know sure thing")
roclen4 = input(30, minval=1, title = "ROC Length #4", group="Know sure thing")
smalen1 = input(11, minval=1, title = "SMA Length #1", group="Know sure thing")
smalen2 = input(11, minval=1, title = "SMA Length #2", group="Know sure thing")
smalen3 = input(12, minval=1, title = "SMA Length #3", group="Know sure thing")
smalen4 = input(16, minval=1, title = "SMA Length #4", group="Know sure thing")
siglen = input(8, minval=1, title = "Signal Line Length", group="Know sure thing")
smaroc(roclen, smalen) => sma(roc(close, roclen), smalen)
kst = smaroc(roclen1, smalen1) + 2 * smaroc(roclen2, smalen2) + 3 * smaroc(roclen3, smalen3) + 4 * smaroc(roclen4, smalen4)
sig = sma(kst, siglen)
// } KST
// { Chopy Market
line = input(30, minval=0, maxval=100, title="Line", group="Chopy Market by TradingRush")
line_new = line/10
col_green = #4caf50 
col_green_slow = #81c784
col_green_slower = #c8e6c9
col_red = #4caf50
col_red_slow= #a5d6a7
col_red_slower= #c8e6c9
col_chop= color.new(color.white, 100)
histo = 10
maColor = if(close[1] > close[2] and close[2] > close[3] and close[3] > close[4] and close[4] > close[5] and close[5] > close[6])
    col_green
else if(close[1] > close[2] and close[2] > close[3] and close[3] > close[4])
    col_green_slow
else if(close[2] > close[3] and close[3] > close[4] and close[4] > close[5] and close[5] > close[6])
    col_green_slower
else if(close[1] > close[2] and close[3] > close[4] and close[4] > close[5] and close[5] > close[6])
    col_green_slower
else if(close[1] > close[2] and close[2] > close[3] and close[4] > close[5] and close[5] > close[6])
    col_green_slower
else if(close[1] > close[2] and close[2] > close[3] and close[3] > close[4] and close[5] > close[6])
    col_green_slower
else if(close[1] > close[2] and close[2] > close[3] and close[3] > close[4] and close[4] > close[5])
    col_green_slower
else if(close[1] < close[2] and close[2] < close[3] and close[3] < close[4] and close[4] < close[5] and close[5] < close[6])
    col_green
else if(close[1] < close[2] and close[2] < close[3] and close[3] < close[4])
    col_green_slow
else if(close[2] < close[3] and close[3] < close[4] and close[4] < close[5] and close[5] < close[6])
    col_green_slower
else if(close[1] < close[2] and close[3] < close[4] and close[4] < close[5] and close[5] < close[6])
    col_green_slower
else if(close[1] < close[2] and close[2] < close[3] and close[4] < close[5] and close[5] < close[6])
    col_green_slower
else if(close[1] < close[2] and close[2] < close[3] and close[3] < close[4] and close[5] < close[6])
    col_green_slower
else if(close[1] < close[2] and close[2] < close[3] and close[3] < close[4] and close[4] < close[5])
    col_green_slower
else 
    col_chop
if (maColor == col_green)
    histo := 10
if (maColor == col_green_slow)
    histo := 10
if (maColor == col_green_slower)
    histo := 10
if (maColor == col_chop)
    histo := 0
main = histo[1]+histo[2]+histo[3]+histo[4]+histo[5]+histo[6]+histo[7]+histo[8]+histo[9]+histo[10]/10
mainColor = if(main < main[1])
    color.red
else
    color.purple
//plot(hist*line_new, title="Choppy", style=plot.style_columns, color=maColor)
//plot(line, title="Line", color=color.orange, linewidth=2)
//plot(main, title="Average", color=mainColor, linewidth=2)
// } Chopy Market by tradingrush
// { EMA
emasrc = close
len1 = input(title="EMA1 Length", group="EMA Settings", type=input.integer, defval=200)
col1 = color.yellow
// Calculate EMA
ema1 = ema(emasrc, len1)
// } EMA
// { Conditions
exitcon = input(title="Exit Condition", defval="lowest/ highest Candle based stop loss", options=["ATR based Take Profit & Stop Loss", "lowest/ highest Candle based stop loss", "Fixed % Take Profit/ Stop Loss"], group="Exit Condition")
bought = strategy.position_size[1] < strategy.position_size
sold = strategy.position_size[1] > strategy.position_size
barsbought = barssince(bought)
barssold = barssince(sold)
// { ATR Take Profit/ Stop Loss
atrprofitfactorlong = input(title="ATR Profitfactor Long", group="Exit's ATR Take Profit/ Stop Loss", type=input.float, step=0.1, defval=10)
atrstopfactorlong = input(title="ATR Stopfactor Long", group="Exit's ATR Take Profit/ Stop Loss", type=input.float, step=0.1, defval=5)
atrprofitfactorshort = input(title="ATR Profitfactor Short", group="Exit's ATR Take Profit/ Stop Loss", type=input.float, step=0.1, defval=10)
atrstopfactorshort = input(title="ATR Stopfactor Short", group="Exit's ATR Take Profit/ Stop Loss", type=input.float, step=0.1, defval=6)
// ATR
lengthATR = input(title="ATR Length", group="Exit's ATR Take Profit/ Stop Loss", defval=11, minval=1)
atr = atr(lengthATR)
// Profit / Stop Loss Level
profit_level_atr_long = strategy.position_avg_price + (atr*atrprofitfactorlong)
stop_level_atr_long = strategy.position_avg_price - (atr*atrstopfactorlong)
stop_atr_long=stop_level_atr_long[barsbought]
profit_atr_long=profit_level_atr_long[barsbought]
profit_level_atr_short = strategy.position_avg_price - (atr*atrprofitfactorshort)
stop_level_atr_short = strategy.position_avg_price + (atr*atrstopfactorshort)
stop_atr_short=stop_level_atr_short[barssold]
profit_atr_short=profit_level_atr_short[barssold]
// } ATR Take Profit/ Stop Loss
// { Lowest Low/ Highest High Exit Condition
//Lowest Low LONG
profitfactorlong = input(title="ProfitfactorLong", type=input.float, step=0.1, defval=1.5, group = "Exit's - Lowest Low/ Highest High")
loLen = input(title="Lowest Low Lookback", type=input.integer,
  defval=25, minval=2, group = "Exit's - Lowest Low/ Highest High")
stop_level_long = lowest(low, loLen)[1]
//Lowest Low SHORT
profitfactorshort = input(title="ProfitfactorShort", type=input.float, step=0.1, defval=1.5, group = "Exit's - Lowest Low/ Highest High")
highLen = input(title="highest high lookback", type=input.integer,
  defval=25, minval=2, group = "Exit's - Lowest Low/ Highest High")
stop_level_short = highest(high, highLen)[1]
// } Lowest Low/ Highest High Exit Condition
// { Percentage Take Profit/ Stop Loss
longProfitPerc = input(title="Long Take Profit (%)",
     type=input.float, minval=0.0, step=0.1, defval=5, group = "Exit's - % SL TP") * 0.01
longperctp = strategy.position_avg_price * (1 + longProfitPerc)
longLossPerc = input(title="Long Stop Loss (%)",
     type=input.float, minval=0.0, step=0.1, defval=2, group = "Exit's - % SL TP") * 0.01
longpercsl = strategy.position_avg_price * (1 - longLossPerc)
shortProfitPerc = input(title="Short Take Profit (%)",
     type=input.float, minval=0.0, step=0.1, defval=5, group = "Exit's - % SL TP") * 0.01
shortperctp = strategy.position_avg_price * (1 - shortProfitPerc)
shortLossPerc = input(title="Short Stop Loss (%)",
     type=input.float, minval=0.0, step=0.1, defval=2, group = "Exit's - % SL TP") * 0.01
shortpercsl = strategy.position_avg_price * (1 + shortLossPerc)
// } Percentage Take Profit/ Stop Loss
actiema = input(true, title="Activate EMA?", group="Indicator Combination")
actikst = input(true, title="Activate Know sure thing?", group="Indicator Combination")
acticm = input(true, title="Activate Chopy Market?", group="Indicator Combination")
// } Conditions
// { Long Entry
enablelong = input(true, title="Enable long?", group="Entry Settings")
//Long Signal
macdcrossover = crossover(macd, signal)
macdunderhis = macd < hist
histocolgreen = hist > 0
ema1conlong = close > ema1
kstlong = kst > sig
cmlong = line > main
bar1 = macdcrossover
bar2 = macdunderhis
bar3 = histocolgreen
//strategy buy long
if (actiema == true) and (actikst == false) and (acticm == false) and (ema1conlong) and (bar1 and bar2 and bar3) and (afterStartDate) and (strategy.opentrades < 1) and (enablelong == true)
    strategy.entry("long", strategy.long)
else
    if (actiema == true) and (actikst == true) and (acticm == false) and (ema1conlong) and (kstlong) and (bar1 and bar2 and bar3) and (afterStartDate) and (strategy.opentrades < 1) and (enablelong == true)
        strategy.entry("long", strategy.long)
    else
        if (actiema == true) and (actikst == false) and (acticm == true) and (ema1conlong) and (acticm) and (bar1 and bar2 and bar3) and (afterStartDate) and (strategy.opentrades < 1) and (enablelong == true)
            strategy.entry("long", strategy.long)
        else
            if (actiema == true) and (actikst == true) and (acticm == true) and (ema1conlong) and (acticm) and (kstlong) and (bar1 and bar2 and bar3) and (afterStartDate) and (strategy.opentrades < 1) and (enablelong == true)
                strategy.entry("long", strategy.long)
            else
                if (actiema == false) and (actikst == true) and (acticm == true) and (kstlong) and (acticm) and (bar1 and bar2 and bar3) and (afterStartDate) and (strategy.opentrades < 1) and (enablelong == true)
                    strategy.entry("long", strategy.long)
                else
                    if (actiema == false) and (actikst == true) and (acticm == false) and (kstlong) and (bar1 and bar2 and bar3) and (afterStartDate) and (strategy.opentrades < 1) and (enablelong == true)
                        strategy.entry("long", strategy.long)
                    else
                        if (actiema == false) and (actikst == false) and (acticm == true) and (acticm) and (bar1 and bar2 and bar3) and (afterStartDate) and (strategy.opentrades < 1) and (enablelong == true)
                            strategy.entry("long", strategy.long)
                        else
                            if (actiema == false) and (actikst == false) and (acticm == false) and (bar1 and bar2 and bar3) and (afterStartDate) and (strategy.opentrades < 1) and (enablelong == true)
                                strategy.entry("long", strategy.long)
// } Long Entry
// { Short Entry
enableshort = input(true, title="Enable short?", group="Entry Settings")
macdcrossunder = crossunder(macd, signal)
macdoverhis = macd > hist
histocolred = hist < 0
ema1conshort = close < ema1
kstshort = kst < sig
cmshort = line < main
bar4 = macdcrossunder
bar5 = macdoverhis
bar6 = histocolred
//strategy buy short
if (actiema == true) and (actikst == false) and (acticm == false) and (ema1conshort) and (bar4 and bar5 and bar6) and (afterStartDate) and (strategy.opentrades < 1) and (enableshort == true)
    strategy.entry("short", strategy.short)
else
    if (actiema == true) and (actikst == true) and (acticm == false)and (kstshort) and (ema1conshort) and (bar4 and bar5 and bar6) and (afterStartDate) and (strategy.opentrades < 1) and (enableshort == true)
        strategy.entry("short", strategy.short)
    else
        if (actiema == true) and (actikst == false) and (acticm == true) and (cmshort) and (ema1conshort) and (bar4 and bar5 and bar6) and (afterStartDate) and (strategy.opentrades < 1) and (enableshort == true)
            strategy.entry("short", strategy.short)
        else
            if (actiema == true) and (actikst == true) and (acticm == true) and (cmshort) and (kstshort) and (ema1conshort) and (bar4 and bar5 and bar6) and (afterStartDate) and (strategy.opentrades < 1) and (enableshort == true)
                strategy.entry("short", strategy.short)
            else
                if (actiema == false) and (actikst == true) and (acticm == true) and (cmshort) and (kstshort) and (bar4 and bar5 and bar6) and (afterStartDate) and (strategy.opentrades < 1) and (enableshort == true)
                    strategy.entry("short", strategy.short)
                else
                    if (actiema == false) and (actikst == true) and (acticm == false)and (kstshort) and (bar4 and bar5 and bar6) and (afterStartDate) and (strategy.opentrades < 1) and (enableshort == true)
                        strategy.entry("short", strategy.short)
                    else
                        if (actiema == false) and (actikst == false) and (acticm == true) and (cmshort) and (bar4 and bar5 and bar6) and (afterStartDate) and (strategy.opentrades < 1) and (enableshort == true)
                            strategy.entry("short", strategy.short)
                        else
                            if (actiema == false) and (actikst == false) and (acticm == false) and (bar4 and bar5 and bar6) and (afterStartDate) and (strategy.opentrades < 1) and (enableshort == true)
                                strategy.entry("short", strategy.short)
// } Short Entry
// { Exit
//LONG EXIT
if (afterStartDate) and (exitcon == "ATR based Take Profit & Stop Loss") and (strategy.opentrades > 0) and (strategy.position_entry_name == "long")
    strategy.exit("TP/ SL", "long", stop=stop_atr_long, limit=profit_atr_long)
if (afterStartDate) and (exitcon == "lowest/ highest Candle based stop loss") and (strategy.opentrades > 0) and (strategy.position_entry_name == "long")
    profit_level = strategy.position_avg_price + ((strategy.position_avg_price - stop_level_long[barsbought])*profitfactorlong)
    strategy.exit(id="TP/ SL", stop=stop_level_long[barsbought], limit=profit_level)
if (afterStartDate) and (exitcon == "Fixed % Take Profit/ Stop Loss") and (strategy.opentrades > 0) and (strategy.position_entry_name == "long")
    strategy.exit("TP/ SL", "long", stop=longpercsl, limit=longperctp)
//SHORT EXIT
if (afterStartDate) and (exitcon == "ATR based Take Profit & Stop Loss") and (strategy.opentrades > 0) and strategy.position_entry_name == "short"
    strategy.exit("TP/ SL", "short", stop=stop_atr_short, limit=profit_atr_short)
if (afterStartDate) and (exitcon == "lowest/ highest Candle based stop loss") and (strategy.opentrades > 0) and (strategy.position_entry_name == "short")
    profit_level = strategy.position_avg_price - ((stop_level_short[barssold] - strategy.position_avg_price)*profitfactorshort)
    strategy.exit("TP/ SL", "short", stop=stop_level_short[barssold], limit=profit_level)
if (afterStartDate) and (exitcon == "Fixed % Take Profit/ Stop Loss") and (strategy.opentrades > 0) and (strategy.position_entry_name == "short")
    strategy.exit("TP/ SL", "short", stop=shortpercsl, limit=shortperctp)
//plot(profit_atr_long, title="Take Profit Long", linewidth=1, style=plot.style_linebr, color=color.green)
//plot(stop_atr_long, title="Stop Loss Long", linewidth=1, style=plot.style_linebr, color=color.red)
//plot(profit_atr_short, title="Take Profit Short", linewidth=1, style=plot.style_linebr, color=color.green)
//plot(stop_atr_short, title="Stop Loss Short", linewidth=1, style=plot.style_linebr, color=color.red)
// } Exit
Expand (379 lines)