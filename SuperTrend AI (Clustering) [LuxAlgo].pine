Script Name: SuperTrend AI (Clustering) [LuxAlgo]
Author: LuxAlgo
Description: The SuperTrend AI indicator is a novel take on bridging the gap between the K-means clustering machine learning method & technical indicators. In this case, we apply K-Means clustering to the famous SuperTrend indicator.

ğŸ”¶  USAGE 

  

Users can interpret the SuperTrend AI trailing stop similarly to the regular SuperTrend indicator. Using higher minimum/maximum...
PineScript code:

Pine Scriptâ„¢ indicator
SuperTrend AI (Clustering) [LuxAlgo]
Copy code
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
//Â ThisÂ workÂ isÂ licensedÂ underÂ aÂ Attribution-NonCommercial-ShareAlikeÂ 4.0Â InternationalÂ (CCÂ BY-NC-SAÂ 4.0)Â https://creativecommons.org/licenses/by-nc-sa/4.0/
//Â Â©Â LuxAlgo
//@version=5
indicator("SuperTrendÂ AIÂ (Clustering)Â [LuxAlgo]",Â "LuxAlgoÂ -Â SuperTrendÂ AI",Â overlayÂ =Â true,Â max_labels_countÂ =Â 500)
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
lengthÂ =Â input(10,Â 'ATRÂ Length')
minMultÂ =Â input.int(1,Â 'FactorÂ Range',Â minvalÂ =Â 0,Â inlineÂ =Â 'factor')
maxMultÂ =Â input.int(5,Â '',Â minvalÂ =Â 0,Â inlineÂ =Â 'factor')
stepÂ Â Â Â =Â input.float(.5,Â 'Step',Â minvalÂ =Â 0,Â stepÂ =Â 0.1)
//TriggerÂ error
ifÂ minMultÂ >Â maxMult
Â Â Â Â runtime.error('MinimumÂ factorÂ isÂ greaterÂ thanÂ maximumÂ factorÂ inÂ theÂ range')
perfAlphaÂ =Â input.float(10,Â 'PerformanceÂ Memory',Â minvalÂ =Â 2)
fromClusterÂ =Â input.string('Best',Â 'FromÂ Cluster',Â optionsÂ =Â ['Best',Â 'Average',Â 'Worst'])
//Optimization
maxIterÂ =Â input.int(1000,Â 'MaximumÂ IterationÂ Steps',Â minvalÂ =Â 0,Â groupÂ =Â 'Optimization')
maxDataÂ =Â input.int(10000,Â 'HistoricalÂ BarsÂ Calculation',Â minvalÂ =Â 0,Â groupÂ =Â 'Optimization')
//Style
bearCssÂ =Â input(color.red,Â 'TrailingÂ Stop',Â inlineÂ =Â 'ts',Â groupÂ =Â 'Style')
bullCssÂ =Â input(color.teal,Â '',Â inlineÂ =Â 'ts',Â groupÂ =Â 'Style')
amaBearCssÂ =Â input(color.new(color.red,Â 50),Â 'AMA',Â inlineÂ =Â 'ama',Â groupÂ =Â 'Style')
amaBullCssÂ =Â input(color.new(color.teal,Â 50),Â '',Â inlineÂ =Â 'ama',Â groupÂ =Â 'Style')
showGradientÂ =Â input(true,Â 'CandleÂ Coloring',Â groupÂ =Â 'Style')
showSignalsÂ =Â input(true,Â 'ShowÂ Signals',Â groupÂ =Â 'Style')
//Dashboard
showDashÂ Â =Â input(true,Â 'ShowÂ Dashboard',Â groupÂ =Â 'Dashboard')
dashLocÂ Â =Â input.string('TopÂ Right',Â 'Location',Â optionsÂ =Â ['TopÂ Right',Â 'BottomÂ Right',Â 'BottomÂ Left'],Â groupÂ =Â 'Dashboard')
textSizeÂ =Â input.string('Small',Â 'Size'Â Â Â Â Â Â Â Â ,Â optionsÂ =Â ['Tiny',Â 'Small',Â 'Normal'],Â groupÂ =Â 'Dashboard')
//-----------------------------------------------------------------------------}
//UDT's
//-----------------------------------------------------------------------------{
typeÂ supertrend
Â Â Â Â floatÂ upperÂ =Â hl2
Â Â Â Â floatÂ lowerÂ =Â hl2
Â Â Â Â floatÂ output
Â Â Â Â floatÂ perfÂ =Â 0
Â Â Â Â floatÂ factor
Â Â Â Â intÂ trendÂ =Â 0
typeÂ vector
Â Â Â Â array<float>Â out
//-----------------------------------------------------------------------------}
//Supertrend
//-----------------------------------------------------------------------------{
varÂ holderÂ =Â array.new<supertrend>(0)
varÂ factorsÂ =Â array.new<float>(0)
//PopulateÂ supertrendÂ typeÂ array
ifÂ barstate.isfirst
Â Â Â Â forÂ iÂ =Â 0Â toÂ int((maxMultÂ -Â minMult)Â /Â step)
Â Â Â Â Â Â Â Â factors.push(minMultÂ +Â iÂ *Â step)
Â Â Â Â Â Â Â Â holder.push(supertrend.new())
atrÂ =Â ta.atr(length)
//ComputeÂ SupertrendÂ forÂ multipleÂ factors
kÂ =Â 0
forÂ factorÂ inÂ factors
Â Â Â Â get_sptÂ =Â holder.get(k)
Â Â Â Â upÂ =Â hl2Â +Â atrÂ *Â factor
Â Â Â Â dnÂ =Â hl2Â -Â atrÂ *Â factor
Â Â Â Â 
Â Â Â Â get_spt.trendÂ :=Â closeÂ >Â get_spt.upperÂ ?Â 1Â :Â closeÂ <Â get_spt.lowerÂ ?Â 0Â :Â get_spt.trend
Â Â Â Â get_spt.upperÂ :=Â close[1]Â <Â get_spt.upperÂ ?Â math.min(up,Â get_spt.upper)Â :Â up
Â Â Â Â get_spt.lowerÂ :=Â close[1]Â >Â get_spt.lowerÂ ?Â math.max(dn,Â get_spt.lower)Â :Â dn
Â Â Â Â 
Â Â Â Â diffÂ =Â nz(math.sign(close[1]Â -Â get_spt.output))
Â Â Â Â get_spt.perfÂ +=Â 2/(perfAlpha+1)Â *Â (nz(closeÂ -Â close[1])Â *Â diffÂ -Â get_spt.perf)
Â Â Â Â get_spt.outputÂ :=Â get_spt.trendÂ ==Â 1Â ?Â get_spt.lowerÂ :Â get_spt.upper
Â Â Â Â get_spt.factorÂ :=Â factor
Â Â Â Â kÂ +=Â 1
//-----------------------------------------------------------------------------}
//K-meansÂ clustering
//-----------------------------------------------------------------------------{
factor_arrayÂ =Â array.new<float>(0)
dataÂ =Â array.new<float>(0)
//PopulateÂ dataÂ arrays
ifÂ last_bar_indexÂ -Â bar_indexÂ <=Â maxData
Â Â Â Â forÂ elementÂ inÂ holder
Â Â Â Â Â Â Â Â data.push(element.perf)
Â Â Â Â Â Â Â Â factor_array.push(element.factor)
//IntitalizeÂ centroidsÂ usingÂ quartiles
centroidsÂ =Â array.new<float>(0)
centroids.push(data.percentile_linear_interpolation(25))
centroids.push(data.percentile_linear_interpolation(50))
centroids.push(data.percentile_linear_interpolation(75))
//IntializeÂ clusters
varÂ array<vector>Â factors_clustersÂ =Â na
varÂ array<vector>Â perfclustersÂ =Â na
ifÂ last_bar_indexÂ -Â bar_indexÂ <=Â maxData
Â Â Â Â forÂ _Â =Â 0Â toÂ maxIter
Â Â Â Â Â Â Â Â factors_clustersÂ :=Â array.from(vector.new(array.new<float>(0)),Â vector.new(array.new<float>(0)),Â vector.new(array.new<float>(0)))
Â Â Â Â Â Â Â Â perfclustersÂ :=Â array.from(vector.new(array.new<float>(0)),Â vector.new(array.new<float>(0)),Â vector.new(array.new<float>(0)))
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â //AssignÂ valueÂ toÂ cluster
Â Â Â Â Â Â Â Â iÂ =Â 0
Â Â Â Â Â Â Â Â forÂ valueÂ inÂ data
Â Â Â Â Â Â Â Â Â Â Â Â distÂ =Â array.new<float>(0)
Â Â Â Â Â Â Â Â Â Â Â Â forÂ centroidÂ inÂ centroids
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â dist.push(math.abs(valueÂ -Â centroid))
Â Â Â Â Â Â Â Â Â Â Â Â idxÂ =Â dist.indexof(dist.min())
Â Â Â Â Â Â Â Â Â Â Â Â perfclusters.get(idx).out.push(value)
Â Â Â Â Â Â Â Â Â Â Â Â factors_clusters.get(idx).out.push(factor_array.get(i))
Â Â Â Â Â Â Â Â Â Â Â Â iÂ +=Â 1
Â Â Â Â Â Â Â Â //UpdateÂ centroids
Â Â Â Â Â Â Â Â new_centroidsÂ =Â array.new<float>(0)
Â Â Â Â Â Â Â Â forÂ cluster_Â inÂ perfclusters
Â Â Â Â Â Â Â Â Â Â Â Â new_centroids.push(cluster_.out.avg())
Â Â Â Â Â Â Â Â //TestÂ ifÂ centroidÂ changed
Â Â Â Â Â Â Â Â ifÂ new_centroids.get(0)Â ==Â centroids.get(0)Â andÂ new_centroids.get(1)Â ==Â centroids.get(1)Â andÂ new_centroids.get(2)Â ==Â centroids.get(2)
Â Â Â Â Â Â Â Â Â Â Â Â break
Â Â Â Â Â Â Â Â centroidsÂ :=Â new_centroids
//-----------------------------------------------------------------------------}
//SignalsÂ andÂ trailingÂ stop
//-----------------------------------------------------------------------------{
//GetÂ associatedÂ supertrend
varÂ floatÂ target_factorÂ =Â na
varÂ floatÂ perf_idxÂ =Â na
varÂ floatÂ perf_amaÂ =Â na
varÂ fromÂ =Â switchÂ fromCluster
Â Â Â Â 'Best'Â =>Â 2
Â Â Â Â 'Average'Â =>Â 1
Â Â Â Â 'Worst'Â =>Â 0
//PerformanceÂ indexÂ denominator
denÂ =Â ta.ema(math.abs(closeÂ -Â close[1]),Â int(perfAlpha))
ifÂ notÂ na(perfclusters)
Â Â Â Â //GetÂ averageÂ factorsÂ withinÂ targetÂ clusterÂ 
Â Â Â Â target_factorÂ :=Â nz(factors_clusters.get(from).out.avg(),Â target_factor)
Â Â Â Â 
Â Â Â Â //GetÂ performanceÂ indexÂ ofÂ targetÂ clusterÂ 
Â Â Â Â perf_idxÂ :=Â math.max(nz(perfclusters.get(from).out.avg()),Â 0)Â /Â den
//GetÂ newÂ supertrend
varÂ upperÂ =Â hl2
varÂ lowerÂ =Â hl2
varÂ osÂ =Â 0
upÂ =Â hl2Â +Â atrÂ *Â target_factor
dnÂ =Â hl2Â -Â atrÂ *Â target_factor
upperÂ :=Â close[1]Â <Â upperÂ ?Â math.min(up,Â upper)Â :Â up
lowerÂ :=Â close[1]Â >Â lowerÂ ?Â math.max(dn,Â lower)Â :Â dn
osÂ :=Â closeÂ >Â upperÂ ?Â 1Â :Â closeÂ <Â lowerÂ ?Â 0Â :Â os
tsÂ =Â osÂ ?Â lowerÂ :Â upper
//GetÂ trailingÂ stopÂ adaptiveÂ MA
ifÂ na(ts[1])Â andÂ notÂ na(ts)
Â Â Â Â perf_amaÂ :=Â ts
else
Â Â Â Â perf_amaÂ +=Â perf_idxÂ *Â (tsÂ -Â perf_ama)
//-----------------------------------------------------------------------------}
//Dashboard
//-----------------------------------------------------------------------------{
varÂ table_positionÂ =Â dashLocÂ ==Â 'BottomÂ Left'Â ?Â position.bottom_leftÂ 
Â Â :Â dashLocÂ ==Â 'TopÂ Right'Â ?Â position.top_rightÂ 
Â Â :Â position.bottom_right
varÂ table_sizeÂ =Â textSizeÂ ==Â 'Tiny'Â ?Â size.tinyÂ 
Â Â :Â textSizeÂ ==Â 'Small'Â ?Â size.smallÂ 
Â Â :Â size.normal
varÂ tbÂ =Â table.new(table_position,Â 4,Â 4
Â Â ,Â bgcolorÂ =Â #1e222d
Â Â ,Â border_colorÂ =Â #373a46
Â Â ,Â border_widthÂ =Â 1
Â Â ,Â frame_colorÂ =Â #373a46
Â Â ,Â frame_widthÂ =Â 1)
ifÂ showDash
Â Â Â Â ifÂ barstate.isfirst
Â Â Â Â Â Â Â Â tb.cell(0,Â 0,Â 'Cluster',Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â Â Â Â Â tb.cell(0,Â 1,Â 'Best',Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â Â Â Â Â tb.cell(0,Â 2,Â 'Average',Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â Â Â Â Â tb.cell(0,Â 3,Â 'Worst',Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â 
Â Â Â Â Â Â Â Â tb.cell(1,Â 0,Â 'Size',Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â Â Â Â Â tb.cell(2,Â 0,Â 'CentroidÂ Dispersion',Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â Â Â Â Â tb.cell(3,Â 0,Â 'Factors',Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â 
Â Â Â Â ifÂ barstate.islast
Â Â Â Â Â Â Â Â topNÂ =Â perfclusters.get(2).out.size()
Â Â Â Â Â Â Â Â midNÂ =Â perfclusters.get(1).out.size()
Â Â Â Â Â Â Â Â btmNÂ =Â perfclusters.get(0).out.size()
Â Â Â Â Â Â Â Â //Size
Â Â Â Â Â Â Â Â tb.cell(1,Â 1,Â str.tostring(topN),Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â Â Â Â Â tb.cell(1,Â 2,Â str.tostring(midN),Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â Â Â Â Â tb.cell(1,Â 3,Â str.tostring(btmN),Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â //Content
Â Â Â Â Â Â Â Â tb.cell(3,Â 1,Â str.tostring(factors_clusters.get(2).out),Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size,Â text_halignÂ =Â text.align_left)
Â Â Â Â Â Â Â Â tb.cell(3,Â 2,Â str.tostring(factors_clusters.get(1).out),Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size,Â text_halignÂ =Â text.align_left)
Â Â Â Â Â Â Â Â tb.cell(3,Â 3,Â str.tostring(factors_clusters.get(0).out),Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size,Â text_halignÂ =Â text.align_left)
Â Â Â Â Â Â Â Â //CalculateÂ dispersionÂ aroundÂ centroid
Â Â Â Â Â Â Â Â iÂ =Â 0
Â Â Â Â Â Â Â Â forÂ cluster_Â inÂ perfclusters
Â Â Â Â Â Â Â Â Â Â Â Â dispÂ =Â 0.
Â Â Â Â Â Â Â Â Â Â Â Â ifÂ cluster_.out.size()Â >Â 1
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â forÂ valueÂ inÂ cluster_.out
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â dispÂ +=Â math.abs(valueÂ -Â centroids.get(i))
Â Â Â Â Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â Â Â Â Â dispÂ /=Â switchÂ i
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 0Â =>Â btmN
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 1Â =>Â midN
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 2Â =>Â topN
Â Â Â Â Â Â Â Â Â Â Â Â iÂ +=Â 1
Â Â Â Â Â Â Â Â Â Â Â Â tb.cell(2,Â 4Â -Â i,Â str.tostring(disp,Â '#.####'),Â text_colorÂ =Â color.white,Â text_sizeÂ =Â table_size)
//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
cssÂ =Â osÂ ?Â bullCssÂ :Â bearCss
plot(ts,Â 'TrailingÂ Stop',Â osÂ !=Â os[1]Â ?Â naÂ :Â css)
plot(perf_ama,Â 'TrailingÂ StopÂ AMA',
Â Â ta.cross(close,Â perf_ama)Â ?Â na
Â Â :Â closeÂ >Â perf_amaÂ ?Â amaBullCssÂ :Â amaBearCss)
//CandleÂ coloring
barcolor(showGradientÂ ?Â color.from_gradient(perf_idx,Â 0,Â 1,Â color.new(css,Â 80),Â css)Â :Â na)
//Signals
nÂ =Â bar_index
ifÂ showSignals
Â Â Â Â ifÂ osÂ >Â os[1]
Â Â Â Â Â Â Â Â label.new(n,Â ts,Â str.tostring(int(perf_idxÂ *Â 10))
Â Â Â Â Â Â Â Â Â Â ,Â colorÂ =Â bullCss
Â Â Â Â Â Â Â Â Â Â ,Â styleÂ =Â label.style_label_up
Â Â Â Â Â Â Â Â Â Â ,Â textcolorÂ =Â color.white
Â Â Â Â Â Â Â Â Â Â ,Â sizeÂ =Â size.tiny)
Â Â Â Â ifÂ osÂ <Â os[1]
Â Â Â Â Â Â Â Â label.new(n,Â ts,Â str.tostring(int(perf_idxÂ *Â 10))
Â Â Â Â Â Â Â Â Â Â ,Â colorÂ =Â bearCss
Â Â Â Â Â Â Â Â Â Â ,Â styleÂ =Â label.style_label_down
Â Â Â Â Â Â Â Â Â Â ,Â textcolorÂ =Â color.white
Â Â Â Â Â Â Â Â Â Â ,Â sizeÂ =Â size.tiny)
//-----------------------------------------------------------------------------}
Expand (270 lines)